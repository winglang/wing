bring cloud;

let bucket1 = new cloud.Bucket() as "bucket1";
let bucket2 = new cloud.Bucket() as "bucket2";
let bucket3 = new cloud.Bucket() as "bucket3";

//Array tests
let empty_array = Array<num>[];
assert(empty_array.length == 0);
let empty_array2 = MutArray<num>[];
assert(empty_array2.length == 0);
let arr1 = [1, 2, 3];
assert(arr1.length == 3);
assert(arr1.at(1) == 2);
let arr2: Array<str> = ["1", "2", "3"];
assert(arr2.length == 3);
assert(arr2.at(1) == "2");
let arr3 = Array<num>[1, 2, 3];
assert(arr3.length == 3);
assert(arr3.at(1) == 2);
let arr4: Array<num> = Array<num>[1, 2, 3];
assert(arr4.length == 3);
assert(arr4.at(1) == 2);
let arr5 = [bucket1, bucket2, bucket3];
assert(arr5.length == 3);
assert(arr5.at(1) == bucket2);
let arr6: Array<cloud.Bucket> = [bucket1, bucket2, bucket3];
assert(arr6.length == 3);
assert(arr6.at(1) == bucket2);
let arr7: Array<num> = arr4;
assert(arr7.length == 3);
assert(arr7.at(1) == 2);

//Map tests
let empty_map = Map<num>{};
assert(empty_map.size() == 0);
let empty_map2 = MutMap<num>{};
assert(empty_map2.size() == 0);
let m1 = {"a":1, "b":2, "c":3};
assert(m1.size() == 3);
assert(m1.get("b") == 2);
let m2: Map<num> = {"a":1, "b":2, "c":3};
assert(m2.size() == 3);
assert(m2.get("b") == 2);
let m3 = Map<num> {"a":1, "b":2, "c":3};
assert(m3.size() == 3);
assert(m3.get("b") == 2);
let m4: Map<num> = Map<num> {"a":1, "b":2, "c":3};
assert(m4.size() == 3);
assert(m4.get("b") == 2);
let m5 = {"a":bucket1, "b":bucket2, "c":bucket3};
assert(m5.size() == 3);
assert(m5.get("b") == bucket2);
let m6: Map<cloud.Bucket> = {"a":bucket1, "b":bucket2, "c":bucket3};
assert(m6.size() == 3);
assert(m6.get("b") == bucket2);
let m7: Map<num> = m1;
assert(m7.size() == 3);
assert(m7.get("b") == 2);
assert(m7.has("b"));
assert(m4.has("boom") == false);
let m8 = {"a": "a1", b: "b1", c: "c1"};
assert(m8.keys().at(0) == "a");
assert(m8.keys().at(1) == "b");
assert(m8.keys().at(2) == "c");

//Set tests
let empty_set = Set<num>{};
assert(empty_set.size == 0);
let empty_set2 = MutSet<num>{};
assert(empty_set2.size == 0);
let s2: Set<num> = {1, 2, 3};
assert(s2.size == 3);
assert(s2.has(1));
let s3 = Set<num> {1, 2, 3};
assert(s3.size == 3);
assert(s3.has(1));
let s4: Set<num> = Set<num> {1, 2, 3};
assert(s4.size == 3);
assert(s4.has(1));
let s6: Set<cloud.Bucket> = {bucket1, bucket2, bucket3};
assert(s6.size == 3);
assert(s6.has(bucket2));
let s7: Set<num> = s2;
assert(s7.size == 3);
assert(s7.has(1));