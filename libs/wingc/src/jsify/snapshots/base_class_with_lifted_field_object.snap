---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    bring cloud;

    class Base {
      b: cloud.Bucket;
      init() {
        this.b = new cloud.Bucket();
      }
    }

    class Derived extends Base {
      inflight foo() {
        this.b.put("hello", "world");
      }
    }
    
```

## inflight.Base.js

```js
module.exports = function({  }) {
  class Base {
    constructor({  }) {
    }
  }
  return Base;
}
```

## inflight.Derived.js

```js
module.exports = function({ $Base }) {
  class Derived extends $Base {
    constructor({ $this_b }) {
      super({  });
      this.$this_b = $this_b;
    }
    async foo() {
      (await this.$this_b.put("hello","world"));
    }
  }
  return Derived;
}
```

## preflight.js

```js
const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
const cloud = $stdlib.cloud;
class $Root extends $stdlib.std.Resource {
  constructor(scope, id) {
    super(scope, id);
    class Base extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
        this._addInflightOps("$inflight_init");
        this.b = this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket");
      }
      static _toInflightType(context) {
        return $stdlib.core.NodeJsCode.fromInline(`
          require("./inflight.Base.js")({
          })
        `);
      }
      _toInflight() {
        return $stdlib.core.NodeJsCode.fromInline(`
          (await (async () => {
            const BaseClient = ${Base._toInflightType(this).text};
            const client = new BaseClient({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `);
      }
    }
    class Derived extends Base {
      constructor(scope, id, ) {
        super(scope, id);
        this._addInflightOps("foo", "$inflight_init");
      }
      static _toInflightType(context) {
        return $stdlib.core.NodeJsCode.fromInline(`
          require("./inflight.Derived.js")({
            $Base: ${context._lift(Base)},
          })
        `);
      }
      _toInflight() {
        return $stdlib.core.NodeJsCode.fromInline(`
          (await (async () => {
            const DerivedClient = ${Derived._toInflightType(this).text};
            const client = new DerivedClient({
              $this_b: ${this._lift(this.b)},
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `);
      }
      _registerBind(host, ops) {
        if (ops.includes("$inflight_init")) {
          Derived._registerBindObject(this.b, host, []);
        }
        if (ops.includes("foo")) {
          Derived._registerBindObject(this.b, host, ["put"]);
        }
        super._registerBind(host, ops);
      }
    }
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] }).synth();
```

