---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    inflight class MyType {
      field: str;
      init() { this.field = "hi"; }
  
      getField(): str {
        return this.field;
      }
    }
  
```

## inflight.MyType-1.js

```js
"use strict";
module.exports = function({  }) {
  class MyType {
    async getField() {
      return this.field;
    }
    constructor(){
      this.$inflight_init = async () => {
        this.field = "hi";
      }
    }
  }
  return MyType;
}
```

## preflight.js

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $plugins = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLUGIN_PATHS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
class $Root extends $stdlib.std.Resource {
  constructor(scope, id) {
    super(scope, id);
    class MyType extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
      }
      static _toInflightType(context) {
        return `
          require("./inflight.MyType-1.js")({
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const MyTypeClient = ${MyType._toInflightType(this)};
            const client = new MyTypeClient({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      _getInflightOps() {
        return ["field", "getField", "$inflight_init"];
      }
      _registerOnLift(host, ops) {
        if (ops.includes("$inflight_init")) {
          MyType._registerOnLiftObject(this, host, ["field"]);
        }
        if (ops.includes("getField")) {
          MyType._registerOnLiftObject(this, host, ["field"]);
        }
        super._registerOnLift(host, ops);
      }
    }
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] }).synth();
```

