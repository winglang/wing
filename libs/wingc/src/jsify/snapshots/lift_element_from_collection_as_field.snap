---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    bring cloud;
    class Foo {
      arr: Array<cloud.Bucket>;
      init() {
        this.arr = [new cloud.Bucket()];
      }

      inflight foo() {
        this.arr.at(0).put("hello", "world");
      }
    }
    
```

## inflight.Foo.js

```js
module.exports = function({  }) {
  class Foo {
    constructor({ $_this_arr_at_0__ }) {
      this.$_this_arr_at_0__ = $_this_arr_at_0__;
    }
    async foo() {
      (await this.$_this_arr_at_0__.put("hello","world"));
    }
  }
  return Foo;
}
```

## preflight.js

```js
const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const std = $stdlib.std;
const $wing_is_test = process.env.WING_IS_TEST === "true";
const cloud = require('@winglang/sdk').cloud;
class $Root extends $stdlib.std.Resource {
  constructor(scope, id) {
    super(scope, id);
    class Foo extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
        this._addInflightOps("foo", "$inflight_init");
        this.arr = Object.freeze([this.node.root.newAbstract("@winglang/sdk.cloud.Bucket",this,"cloud.Bucket")]);
      }
      static _toInflightType(context) {
        return $stdlib.core.NodeJsCode.fromInline(`
          require("./inflight.Foo.js")({
          })
        `);
      }
      _toInflight() {
        return $stdlib.core.NodeJsCode.fromInline(`
          (await (async () => {
            const FooClient = ${Foo._toInflightType(this).text};
            const client = new FooClient({
              $_this_arr_at_0__: ${this._lift((this.arr.at(0)))},
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `);
      }
      _registerBind(host, ops) {
        if (ops.includes("$inflight_init")) {
          Foo._registerBindObject((this.arr.at(0)), host, []);
        }
        if (ops.includes("foo")) {
          Foo._registerBindObject((this.arr.at(0)), host, ["put"]);
        }
        super._registerBind(host, ops);
      }
    }
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test }).synth();
```

