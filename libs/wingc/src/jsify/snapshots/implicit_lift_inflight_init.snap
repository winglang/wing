---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    bring cloud;

    class Foo {
      c: cloud.Counter;
      inflight myField2: str;

      init() {
        this.c = new cloud.Counter();
      }

      inflight init() {
        this.myField2 = "hello";
      }

      inflight incCounter() {
        this.c.inc();
      }

      inflight dontTouchCounter() {
        log("hello");
      }
    }
    
```

## inflight.Foo.js

```js
module.exports = function({  }) {
  class Foo {
    constructor({ $this_c }) {
      this.$this_c = $this_c;
    }
    async incCounter() {
      (await this.$this_c.inc());
    }
    async dontTouchCounter() {
      {console.log("hello")};
    }
    async $inflight_init() {
      this.myField2 = "hello";
    }
  }
  return Foo;
}
```

## preflight.js

```js
const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const std = $stdlib.std;
const $wing_is_test = process.env.WING_IS_TEST === "true";
const cloud = require('@winglang/sdk').cloud;
class $Root extends $stdlib.std.Resource {
  constructor(scope, id) {
    super(scope, id);
    class Foo extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
        this._addInflightOps("incCounter", "dontTouchCounter", "$inflight_init", "myField2");
        this.c = this.node.root.newAbstract("@winglang/sdk.cloud.Counter",this,"cloud.Counter");
      }
      static _toInflightType(context) {
        return $stdlib.core.NodeJsCode.fromInline(`
          require("./inflight.Foo.js")({
          })
        `);
      }
      _toInflight() {
        return $stdlib.core.NodeJsCode.fromInline(`
          (await (async () => {
            const FooClient = ${Foo._toInflightType(this).text};
            const client = new FooClient({
              $this_c: ${this._lift(this.c)},
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `);
      }
      _registerBind(host, ops) {
        if (ops.includes("$inflight_init")) {
          Foo._registerBindObject(this.c, host, []);
        }
        if (ops.includes("incCounter")) {
          Foo._registerBindObject(this.c, host, ["inc"]);
        }
        super._registerBind(host, ops);
      }
    }
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test }).synth();
```

