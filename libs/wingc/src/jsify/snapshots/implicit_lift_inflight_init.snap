---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    bring cloud;

    class Foo {
      c: cloud.Counter;
      inflight myField2: str;

      new() {
        this.c = new cloud.Counter();
      }

      inflight new() {
        this.myField2 = "hello";
      }

      inflight incCounter() {
        this.c.inc();
      }

      inflight dontTouchCounter() {
        log("hello");
      }
    }
    
```

## inflight.Foo-1.js

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
module.exports = function({  }) {
  class Foo {
    constructor({ $this_c }) {
      this.$this_c = $this_c;
    }
    async incCounter() {
      (await this.$this_c.inc());
    }
    async dontTouchCounter() {
      console.log("hello");
    }
    async $inflight_init() {
      this.myField2 = "hello";
    }
  }
  return Foo;
}
//# sourceMappingURL=inflight.Foo-1.js.map
```

## preflight.js

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $platforms = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLATFORMS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
const $helpers = $stdlib.helpers;
const cloud = $stdlib.cloud;
class $Root extends $stdlib.std.Resource {
  constructor($scope, $id) {
    super($scope, $id);
    class Foo extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
        this.c = this.node.root.new("@winglang/sdk.cloud.Counter", cloud.Counter, this, "cloud.Counter");
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.Foo-1.js")({
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const FooClient = ${Foo._toInflightType()};
            const client = new FooClient({
              $this_c: ${$stdlib.core.liftObject(this.c)},
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      get _liftMap() {
        return ({
          "incCounter": [
            [this.c, ["inc"]],
          ],
          "dontTouchCounter": [
          ],
          "$inflight_init": [
            [this.c, []],
          ],
          "myField2": [
          ],
        });
      }
    }
  }
}
const $PlatformManager = new $stdlib.platform.PlatformManager({platformPaths: $platforms});
const $APP = $PlatformManager.createApp({ outdir: $outdir, name: "main", rootConstruct: $Root, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] });
$APP.synth();
//# sourceMappingURL=preflight.js.map
```

