---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    bring cloud;

    let b = new cloud.Bucket();
    
    class MyType {
      pub static inflight putInBucket() {
        b.put("in", "bucket");
      }
    }

    class YourType {
      pub inflight putIndirect() {
        MyType.putInBucket();
      }
    }

    let t = new YourType();
    test "test" {
      t.putIndirect();
    }
    
```

## inflight.$Closure1-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({ $t }) {
  class $Closure1 {
    constructor($args) {
      const {  } = $args;
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
    async handle() {
      (await $t.putIndirect());
    }
  }
  return $Closure1;
}
//# sourceMappingURL=inflight.$Closure1-1.cjs.map
```

## inflight.MyType-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({ $b }) {
  class MyType {
    static async putInBucket() {
      (await $b.put("in", "bucket"));
    }
  }
  return MyType;
}
//# sourceMappingURL=inflight.MyType-1.cjs.map
```

## inflight.YourType-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({ $MyType }) {
  class YourType {
    async putIndirect() {
      (await $MyType.putInBucket());
    }
  }
  return YourType;
}
//# sourceMappingURL=inflight.YourType-1.cjs.map
```

## preflight.cjs

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $macros = require("@winglang/sdk/lib/macros");
const $platforms = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLATFORMS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
const $helpers = $stdlib.helpers;
const $extern = $helpers.createExternRequire(__dirname);
const $PlatformManager = new $stdlib.platform.PlatformManager({platformPaths: $platforms});
class $Root extends $stdlib.std.Resource {
  constructor($scope, $id) {
    super($scope, $id);
    $helpers.nodeof(this).root.$preflightTypesMap = { };
    let $preflightTypesMap = {};
    const cloud = $stdlib.cloud;
    $helpers.nodeof(this).root.$preflightTypesMap = $preflightTypesMap;
    class MyType extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.MyType-1.cjs")({
            $b: ${$stdlib.core.liftObject(b)},
          })
        `;
      }
      get _liftMap() {
        return ({
          "$inflight_init": [
            [b, []],
          ],
        });
      }
      static get _liftTypeMap() {
        return ({
          "putInBucket": [
            [b, ["put"]],
          ],
        });
      }
    }
    class YourType extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.YourType-1.cjs")({
            $MyType: ${$stdlib.core.liftObject(MyType)},
          })
        `;
      }
      get _liftMap() {
        return ({
          "putIndirect": [
            [MyType, ["putInBucket"]],
          ],
          "$inflight_init": [
            [MyType, []],
          ],
        });
      }
    }
    class $Closure1 extends $stdlib.std.AutoIdResource {
      _id = $stdlib.core.closureId();
      constructor($scope, $id, ) {
        super($scope, $id);
        $helpers.nodeof(this).hidden = true;
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.$Closure1-1.cjs")({
            $t: ${$stdlib.core.liftObject(t)},
          })
        `;
      }
      get _liftMap() {
        return ({
          "handle": [
            [t, ["putIndirect"]],
          ],
          "$inflight_init": [
            [t, []],
          ],
        });
      }
    }
    const b = globalThis.$ClassFactory.new("@winglang/sdk.cloud.Bucket", cloud.Bucket, this, "Bucket");
    const t = new YourType(this, "YourType");
    globalThis.$ClassFactory.new("@winglang/sdk.std.Test", std.Test, this, "test:test", new $Closure1(this, "$Closure1"));
  }
}
const $APP = $PlatformManager.createApp({ outdir: $outdir, name: "main", rootConstruct: $Root, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] });
$APP.synth();
//# sourceMappingURL=preflight.cjs.map
```

