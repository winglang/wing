---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    let x = "hello";

    class Base {
      protected inflight bar() {
        log(x);
      }
    }

    class Derived extends Base {
      inflight foo() {
        this.bar();
      }
    }
    
```

## inflight.Base-1.js

```js
"use strict";
module.exports = function({ $x }) {
  class Base {
    constructor({  }) {
    }
    async bar() {
      {console.log($x)};
    }
  }
  return Base;
}
```

## inflight.Derived-1.js

```js
"use strict";
module.exports = function({ $Base }) {
  class Derived extends $Base {
    constructor({  }) {
      super({  });
    }
    async foo() {
      (await this.bar());
    }
  }
  return Derived;
}
```

## preflight.js

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $plugins = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLUGIN_PATHS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
class $Root extends $stdlib.std.Resource {
  constructor(scope, id) {
    super(scope, id);
    class Base extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
      }
      static _toInflightType(context) {
        return `
          require("./inflight.Base-1.js")({
            $x: ${context._lift(x)},
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const BaseClient = ${Base._toInflightType(this)};
            const client = new BaseClient({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      _getInflightOps() {
        return ["bar", "$inflight_init"];
      }
      _registerBind(host, ops) {
        if (ops.includes("bar")) {
          Base._registerBindObject(x, host, []);
        }
        super._registerBind(host, ops);
      }
    }
    class Derived extends Base {
      constructor(scope, id, ) {
        super(scope, id);
      }
      static _toInflightType(context) {
        return `
          require("./inflight.Derived-1.js")({
            $Base: ${context._lift(Base)},
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const DerivedClient = ${Derived._toInflightType(this)};
            const client = new DerivedClient({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      _getInflightOps() {
        return ["foo", "$inflight_init"];
      }
      _registerBind(host, ops) {
        if (ops.includes("foo")) {
          Derived._registerBindObject(this, host, ["bar"]);
        }
        super._registerBind(host, ops);
      }
    }
    const x = "hello";
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] }).synth();
```

