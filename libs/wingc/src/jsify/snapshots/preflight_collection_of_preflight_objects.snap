---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    bring cloud;
    let arr = [
      new cloud.Bucket() as "b1",
      new cloud.Bucket() as "b2"
    ];
    test "test" {
      assert(arr.length == 2);
      arr[0].put("hello", "world");
    }
    
```

## inflight.$Closure1-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
module.exports = function({ $_helpers_lookup_arr__0_, $arr }) {
  class $Closure1 {
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
    async handle() {
      $helpers.assert($helpers.eq($arr.length, 2), "arr.length == 2");
      (await $_helpers_lookup_arr__0_.put("hello", "world"));
    }
  }
  return $Closure1;
}
//# sourceMappingURL=inflight.$Closure1-1.cjs.map
```

## preflight.cjs

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $platforms = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLATFORMS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
const $helpers = $stdlib.helpers;
const $extern = $helpers.createExternRequire(__dirname);
const cloud = $stdlib.cloud;
class $Root extends $stdlib.std.Resource {
  constructor($scope, $id) {
    super($scope, $id);
    class $Closure1 extends $stdlib.std.AutoIdResource {
      _id = $stdlib.core.closureId();
      constructor($scope, $id, ) {
        super($scope, $id);
        $helpers.nodeof(this).hidden = true;
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.$Closure1-1.cjs")({
            $_helpers_lookup_arr__0_: ${$stdlib.core.liftObject($helpers.lookup(arr, 0))},
            $arr: ${$stdlib.core.liftObject(arr)},
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const $Closure1Client = ${$Closure1._toInflightType()};
            const client = new $Closure1Client({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      get _liftMap() {
        return ({
          "handle": [
            [$helpers.lookup(arr, 0), ["put"]],
            [arr, ["length"]],
          ],
          "$inflight_init": [
            [$helpers.lookup(arr, 0), []],
            [arr, []],
          ],
        });
      }
    }
    const arr = [this.node.root.new("@winglang/sdk.cloud.Bucket", cloud.Bucket, this, "b1"), this.node.root.new("@winglang/sdk.cloud.Bucket", cloud.Bucket, this, "b2")];
    this.node.root.new("@winglang/sdk.std.Test", std.Test, this, "test:test", new $Closure1(this, "$Closure1"));
  }
}
const $PlatformManager = new $stdlib.platform.PlatformManager({platformPaths: $platforms});
const $APP = $PlatformManager.createApp({ outdir: $outdir, name: "main", rootConstruct: $Root, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] });
$APP.synth();
//# sourceMappingURL=preflight.cjs.map
```

