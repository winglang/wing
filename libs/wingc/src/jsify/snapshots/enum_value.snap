---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    enum MyEnum { B, C }
    let x = MyEnum.C;

    test "test" {
      assert(MyEnum.B != MyEnum.C);
      assert(x == MyEnum.C);
    }
    
```

## inflight.$Closure1-1.js

```js
"use strict";
module.exports = function({ $MyEnum, $x }) {
  class $Closure1 {
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
    async handle() {
      {((cond) => {if (!cond) throw new Error("assertion failed: MyEnum.B != MyEnum.C")})((((a,b) => { try { return require('assert').notDeepStrictEqual(a,b) === undefined; } catch { return false; } })($MyEnum.B,$MyEnum.C)))};
      {((cond) => {if (!cond) throw new Error("assertion failed: x == MyEnum.C")})((((a,b) => { try { return require('assert').deepStrictEqual(a,b) === undefined; } catch { return false; } })($x,$MyEnum.C)))};
    }
  }
  return $Closure1;
}
```

## preflight.js

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $plugins = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLUGIN_PATHS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
class $Root extends $stdlib.std.Resource {
  constructor(scope, id) {
    super(scope, id);
    class $Closure1 extends $stdlib.std.Resource {
      constructor(scope, id, ) {
        super(scope, id);
        (std.Node.of(this)).hidden = true;
      }
      static _toInflightType(context) {
        return `
          require("./inflight.$Closure1-1.js")({
            $MyEnum: ${context._lift(MyEnum)},
            $x: ${context._lift(x)},
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const $Closure1Client = ${$Closure1._toInflightType(this)};
            const client = new $Closure1Client({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      _getInflightOps() {
        return ["handle", "$inflight_init"];
      }
      _registerBind(host, ops) {
        if (ops.includes("handle")) {
          $Closure1._registerBindObject(x, host, []);
        }
        super._registerBind(host, ops);
      }
    }
    const MyEnum =
      (function (tmp) {
        tmp[tmp["B"] = 0] = "B";
        tmp[tmp["C"] = 1] = "C";
        return tmp;
      })({})
    ;
    const x = MyEnum.C;
    this.node.root.new("@winglang/sdk.std.Test",std.Test,this,"test:test",new $Closure1(this,"$Closure1"));
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] }).synth();
```

