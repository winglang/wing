---
source: libs/wingc/src/lsp/completions.rs
---
- label: base64Decode
  kind: 2
  detail: "(stringToDecode: str, url: bool?): str"
  documentation:
    kind: markdown
    value: "```wing\nstatic base64Decode: (stringToDecode: str, url: bool?): str\n```\n---\nConverts a string from base64 to UTF-8.\n### Parameters\n- `stringToDecode` — `str` — base64 string to decode.\n- `url` — `bool?` — If `true`, the source is expected to be a URL-safe base64 string.\n\n### Returns\nThe UTF-8 string."
  sortText: ff|base64Decode
  insertText: base64Decode($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: base64Encode
  kind: 2
  detail: "(stringToEncode: str, url: bool?): str"
  documentation:
    kind: markdown
    value: "```wing\nstatic base64Encode: (stringToEncode: str, url: bool?): str\n```\n---\nConverts a string from UTF-8 to base64.\n### Parameters\n- `stringToEncode` — `str` — The name of the UTF-8 string to encode.\n- `url` — `bool?` — If `true`, a URL-safe base64 string is returned.\n\n### Returns\nThe base64 string."
  sortText: ff|base64Encode
  insertText: base64Encode($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: env
  kind: 2
  detail: "(name: str): str"
  documentation:
    kind: markdown
    value: "```wing\nstatic env: (name: str): str\n```\n---\nReturns the value of an environment variable.\n### Parameters\n- `name` — `str` — The name of the environment variable.\n\n### Remarks\nThrows if not found or empty."
  sortText: ff|env
  insertText: env($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: nanoid
  kind: 2
  detail: "(options: NanoidOptions?): str"
  documentation:
    kind: markdown
    value: "```wing\nstatic nanoid: (options: NanoidOptions?): str\n```\n---\nGenerates a unique ID using the nanoid library.\n### Parameters\n- `...options` — `NanoidOptions?` — - Optional options object for generating the ID.\n  \n  - `alphabet?` — `str?` — Characters that make up the alphabet to generate the ID, limited to 256 characters or fewer.\n  - `size?` — `num?` — Size of ID.\n\n### Remarks\n# @link https://github.com/ai/nanoid"
  sortText: ff|nanoid
  insertText: nanoid($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: sha256
  kind: 2
  detail: "(data: str): str"
  documentation:
    kind: markdown
    value: "```wing\nstatic sha256: (data: str): str\n```\n---\nComputes the SHA256 hash of the given data.\n### Parameters\n- `data` — `str` — - The string to be hashed."
  sortText: ff|sha256
  insertText: sha256($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: tryEnv
  kind: 2
  detail: "(name: str): str?"
  documentation:
    kind: markdown
    value: "```wing\nstatic tryEnv: (name: str): str?\n```\n---\nReturns the value of an environment variable.\n### Parameters\n- `name` — `str` — The name of the environment variable.\n\n### Returns\nThe value of the environment variable or `nil`.\n\n### Remarks\nReturns `nil` if not found or empty."
  sortText: ff|tryEnv
  insertText: tryEnv($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: uuidv4
  kind: 2
  detail: "(): str"
  documentation:
    kind: markdown
    value: "```wing\nstatic uuidv4: (): str\n```\n---\nGenerates a version 4 UUID."
  sortText: ff|uuidv4
  insertText: uuidv4()
- label: Util
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Util\n```\n---\nUtility functions.\n\n### Methods\n- `base64Decode` — `(stringToDecode: str, url: bool?): str` — Converts a string from base64 to UTF-8.\n- `base64Encode` — `(stringToEncode: str, url: bool?): str` — Converts a string from UTF-8 to base64.\n- `env` — `(name: str): str` — Returns the value of an environment variable.\n- `nanoid` — `(options: NanoidOptions?): str` — Generates a unique ID using the nanoid library.\n- `sha256` — `(data: str): str` — Computes the SHA256 hash of the given data.\n- `sleep` — `inflight (delay: duration): void` — Suspends execution for a given duration.\n- `tryEnv` — `(name: str): str?` — Returns the value of an environment variable.\n- `uuidv4` — `(): str` — Generates a version 4 UUID.\n- `waitUntil` — `inflight (predicate: inflight (): bool, props: WaitUntilProps?): bool` — Run a predicate repeatedly, waiting until it returns true or until the timeout elapses."
  sortText: gg|Util
- label: NanoidOptions
  kind: 22
  documentation:
    kind: markdown
    value: "```wing\nstruct NanoidOptions\n```\n---\nOptions to generating a unique ID.\n### Fields\n- `alphabet?` — `str?` — Characters that make up the alphabet to generate the ID, limited to 256 characters or fewer.\n- `size?` — `num?` — Size of ID."
  sortText: hh|NanoidOptions
- label: WaitUntilProps
  kind: 22
  documentation:
    kind: markdown
    value: "```wing\nstruct WaitUntilProps\n```\n---\nProperties for `util.waitUntil`.\n### Fields\n- `interval?` — `duration?` — Interval between predicate retries.\n- `timeout?` — `duration?` — The timeout for keep trying predicate."
  sortText: hh|WaitUntilProps
- label: IPredicateHandler
  kind: 8
  documentation:
    kind: markdown
    value: "```wing\ninterface IPredicateHandler extends IResource\n```\n---\nA predicate with an inflight \"handle\" method that can be passed to `util.busyWait`.\n### Fields\n- `node` — `Node`\n### Methods\n- `handle` — `inflight (): bool` — The Predicate function that is called.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void`"
  sortText: ii|IPredicateHandler
- label: IPredicateHandlerClient
  kind: 8
  documentation:
    kind: markdown
    value: "```wing\ninterface IPredicateHandlerClient\n```\n---\nInflight client for `IPredicateHandler`.\n### Methods\n- `handle` — `inflight (): bool` — The Predicate function that is called."
  sortText: ii|IPredicateHandlerClient

