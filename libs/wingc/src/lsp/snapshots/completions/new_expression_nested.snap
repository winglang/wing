---
source: libs/wingc/src/lsp/completions.rs
---
- label: Api
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Api\n```\n---\nFunctionality shared between all `Api` implementations.\n\n### Initializer\n- `...props` — `ApiProps?`\n  \n  - `cors?` — `bool?` — Options for configuring the API's CORS behavior across all routes.\n  - `corsOptions?` — `ApiCorsOptions?` — Options for configuring the API's CORS behavior across all routes.\n### Fields\n- `node` — `Node` — The tree node.\n- `url` — `str` — The base URL of the API endpoint.\n### Methods\n- `connect` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiConnectOptions?): void` — Add a inflight handler to the api for CONNECT requests on the given path.\n- `delete` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiDeleteOptions?): void` — Add a inflight handler to the api for DELETE requests on the given path.\n- `get` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiGetOptions?): void` — Add a inflight handler to the api for GET requests on the given path.\n- `head` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiHeadOptions?): void` — Add a inflight handler to the api for HEAD requests on the given path.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `options` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiOptionsOptions?): void` — Add a inflight handler to the api for OPTIONS requests on the given path.\n- `patch` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiPatchOptions?): void` — Add a inflight handler to the api for PATCH requests on the given path.\n- `post` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiPostOptions?): void` — Add a inflight handler to the api for POST requests on the given path.\n- `put` — `preflight (path: str, inflight: inflight (request: ApiRequest): ApiResponse?, props: ApiPutOptions?): void` — Add a inflight handler to the api for PUT requests on the given path.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Api
  insertText: Api($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Bucket
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Bucket\n```\n---\nA cloud object store.\n\n### Initializer\n- `...props` — `BucketProps?`\n  \n  - `public?` — `bool?` — Whether the bucket's objects should be publicly accessible.\n### Fields\n- `node` — `Node` — The tree node.\n### Methods\n- `addFile` — `preflight (key: str, path: str, encoding: str?): void` — Add a file to the bucket from system folder.\n- `addObject` — `preflight (key: str, body: str): void` — Add a file to the bucket that is uploaded when the app is deployed.\n- `copy` — `inflight (srcKey: str, dstKey: str): void` — Copy an object to a new location in the bucket.\n- `delete` — `inflight (key: str, opts: BucketDeleteOptions?): void` — Delete an existing object using a key from the bucket.\n- `exists` — `inflight (key: str): bool` — Check if an object exists in the bucket.\n- `get` — `inflight (key: str, options: BucketGetOptions?): str` — Retrieve an object from the bucket.\n- `getJson` — `inflight (key: str): Json` — Retrieve a Json object from the bucket.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `list` — `inflight (prefix: str?): Array<str>` — Retrieve existing objects keys from the bucket.\n- `metadata` — `inflight (key: str): ObjectMetadata` — Get the metadata of an object in the bucket.\n- `onCreate` — `preflight (fn: inflight (key: str, type: BucketEventType): void, opts: BucketOnCreateOptions?): void` — Run an inflight whenever a file is uploaded to the bucket.\n- `onDelete` — `preflight (fn: inflight (key: str, type: BucketEventType): void, opts: BucketOnDeleteOptions?): void` — Run an inflight whenever a file is deleted from the bucket.\n- `onEvent` — `preflight (fn: inflight (key: str, type: BucketEventType): void, opts: BucketOnEventOptions?): void` — Run an inflight whenever a file is uploaded, modified, or deleted from the bucket.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `onUpdate` — `preflight (fn: inflight (key: str, type: BucketEventType): void, opts: BucketOnUpdateOptions?): void` — Run an inflight whenever a file is updated in the bucket.\n- `publicUrl` — `inflight (key: str): str` — Returns a url to the given file.\n- `put` — `inflight (key: str, body: str, options: BucketPutOptions?): void` — Put an object in the bucket.\n- `putJson` — `inflight (key: str, body: Json): void` — Put a Json object in the bucket.\n- `rename` — `inflight (srcKey: str, dstKey: str): void` — Move an object to a new location in the bucket.\n- `signedUrl` — `inflight (key: str, options: BucketSignedUrlOptions?): str` — Returns a signed url to the given file.\n- `toString` — `preflight (): str` — Returns a string representation of this construct.\n- `tryDelete` — `inflight (key: str): bool` — Delete an object from the bucket if it exists.\n- `tryGet` — `inflight (key: str, options: BucketTryGetOptions?): str?` — Get an object from the bucket if it exists If the bytes returned are not a valid UTF-8 string, an error is thrown.\n- `tryGetJson` — `inflight (key: str): Json?` — Gets an object from the bucket if it exists, parsing it as Json."
  sortText: gg|Bucket
  insertText: Bucket($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Counter
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Counter\n```\n---\nA distributed atomic counter.\n\n### Initializer\n- `...props` — `CounterProps?`\n  \n  - `initial?` — `num?` — The initial value of the counter.\n### Fields\n- `initial` — `num` — The initial value of the counter.\n- `node` — `Node` — The tree node.\n### Methods\n- `dec` — `inflight (amount: num?, key: str?): num` — Decrement the counter, returning the previous value.\n- `inc` — `inflight (amount: num?, key: str?): num` — Increments the counter atomically by a certain amount and returns the previous value.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `peek` — `inflight (key: str?): num` — Get the current value of the counter.\n- `set` — `inflight (value: num, key: str?): void` — Set a counter to a given value.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Counter
  insertText: Counter($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Domain
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Domain\n```\n---\nA cloud Domain.\n\n### Initializer\n- `...props` — `DomainProps`\n  \n  - `domainName` — `str` — The website's custom domain name.\n### Fields\n- `domainName` — `str` — The domain name.\n- `node` — `Node` — The tree node.\n### Methods\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Domain
  insertText: Domain($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Endpoint
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Endpoint\n```\n---\nA cloud Endpoint.\n\n### Initializer\n- `url` — `str`\n- `...props` — `EndpointProps?`\n  \n  - `browserSupport?` — `bool?` — Whether the endpoint is supported through browsers.\n  - `label?` — `str?` — The endpoint's label.\n### Fields\n- `node` — `Node` — The tree node.\n- `url` — `str` — The endpoint url.\n### Methods\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Endpoint
  insertText: Endpoint($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Function
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Function impl IInflightHost\n```\n---\nA function.\n\n### Initializer\n- `handler` — `inflight (event: str?): str?`\n- `...props` — `FunctionProps?`\n  \n  - `concurrency?` — `num?` — The maximum concurrent invocations that can run at one time.\n  - `env?` — `Map<str>?` — Environment variables to pass to the function.\n  - `logRetentionDays?` — `num?` — Specifies the number of days that function logs will be kept.\n  - `memory?` — `num?` — The amount of memory to allocate to the function, in MB.\n  - `timeout?` — `duration?` — The maximum amount of time the function can run.\n### Fields\n- `env` — `Map<str>` — Returns the set of environment variables for this function.\n- `node` — `Node` — The tree node.\n### Methods\n- `addEnvironment` — `preflight (name: str, value: str): void` — Add an environment variable to the function.\n- `invoke` — `inflight (payload: str?): str?` — Invokes the function with a payload and waits for the result.\n- `invokeAsync` — `inflight (payload: str?): void` — Kicks off the execution of the function with a payload and returns immediately while the function is running.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Function
  insertText: Function($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: OnDeploy
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass OnDeploy\n```\n---\nRun code every time the app is deployed.\n\n### Initializer\n- `handler` — `inflight (): void`\n- `...props` — `OnDeployProps?`\n  \n  - `concurrency?` — `num?`\n  - `env?` — `Map<str>?`\n  - `executeAfter?` — `Array<Construct>?` — Execute this trigger only after these resources have been provisioned.\n  - `executeBefore?` — `Array<Construct>?` — Adds this trigger as a dependency on other constructs.\n  - `logRetentionDays?` — `num?`\n  - `memory?` — `num?`\n  - `timeout?` — `duration?`\n### Fields\n- `node` — `Node` — The tree node.\n### Methods\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|OnDeploy
  insertText: OnDeploy($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Queue
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Queue\n```\n---\nA queue.\n\n### Initializer\n- `...props` — `QueueProps?`\n  \n  - `retentionPeriod?` — `duration?` — How long a queue retains a message.\n  - `timeout?` — `duration?` — How long a queue's consumers have to process a message.\n### Fields\n- `node` — `Node` — The tree node.\n### Methods\n- `approxSize` — `inflight (): num` — Retrieve the approximate number of messages in the queue.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `pop` — `inflight (): str?` — Pop a message from the queue.\n- `purge` — `inflight (): void` — Purge all of the messages in the queue.\n- `push` — `inflight (messages: Array<str>?): void` — Push one or more messages to the queue.\n- `setConsumer` — `preflight (handler: inflight (message: str): void, props: QueueSetConsumerOptions?): Function` — Create a function to consume messages from this queue.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Queue
  insertText: Queue($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Schedule
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Schedule\n```\n---\nA schedule.\n\n### Initializer\n- `...props` — `ScheduleProps?`\n  \n  - `cron?` — `str?` — Trigger events according to a cron schedule using the UNIX cron format.\n  - `rate?` — `duration?` — Trigger events at a periodic rate.\n### Fields\n- `node` — `Node` — The tree node.\n### Methods\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `onTick` — `preflight (inflight: inflight (): void, props: ScheduleOnTickOptions?): Function` — Create a function that runs when receiving the scheduled event.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Schedule
  insertText: Schedule($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Secret
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Secret\n```\n---\nA cloud secret.\n\n### Initializer\n- `...props` — `SecretProps?`\n  \n  - `name?` — `str?` — The secret's name.\n### Fields\n- `node` — `Node` — The tree node.\n### Methods\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `toString` — `preflight (): str` — Returns a string representation of this construct.\n- `value` — `inflight (options: GetSecretValueOptions?): str` — Retrieve the value of the secret.\n- `valueJson` — `inflight (options: GetSecretValueOptions?): Json` — Retrieve the Json value of the secret."
  sortText: gg|Secret
  insertText: Secret($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Service
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Service impl IInflightHost\n```\n---\nA long-running service.\n\n### Initializer\n- `handler` — `inflight (): inflight (): void?`\n- `...props` — `ServiceProps?`\n  \n  - `autoStart?` — `bool?` — Whether the service should start automatically.\n  - `env?` — `Map<str>?` — Environment variables to pass to the function.\n### Fields\n- `env` — `Map<str>` — Returns the set of environment variables for this function.\n- `node` — `Node` — The tree node.\n### Methods\n- `addEnvironment` — `preflight (name: str, value: str): void` — Add an environment variable to the function.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `start` — `inflight (): void` — Start the service.\n- `started` — `inflight (): bool` — Indicates whether the service is started.\n- `stop` — `inflight (): void` — Stop the service.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Service
  insertText: Service($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Topic
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Topic\n```\n---\nA topic.\n\n### Initializer\n- `...props` — `TopicProps?`\n### Fields\n- `node` — `Node` — The tree node.\n### Methods\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `onMessage` — `preflight (inflight: inflight (event: str): void, props: TopicOnMessageOptions?): Function` — Run an inflight whenever an message is published to the topic.\n- `publish` — `inflight (message: str): void` — Publish message to topic.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Topic
  insertText: Topic($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: Website
  kind: 7
  documentation:
    kind: markdown
    value: "```wing\nclass Website impl IWebsite\n```\n---\nA cloud static website.\n\n### Initializer\n- `...props` — `WebsiteProps`\n  \n  - `path` — `str`\n  - `domain?` — `Domain?`\n  - `errorDocument?` — `str?`\n### Fields\n- `node` — `Node` — The tree node.\n- `path` — `str` — Absolute local path to the website's static files.\n- `url` — `str` — The website's url.\n### Methods\n- `addFile` — `preflight (path: str, data: str, options: AddFileOptions?): str` — Add a file to the website during deployment.\n- `addJson` — `preflight (path: str, data: Json): str` — Add a JSON file with custom values during the website's deployment.\n- `isConstruct` — `preflight (x: any): bool` — Checks if `x` is a construct.\n- `onLift` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight.\n- `onLiftType` — `preflight (host: IInflightHost, ops: Array<str>): void` — A hook called by the Wing compiler once for each inflight host that needs to use this type inflight.\n- `toString` — `preflight (): str` — Returns a string representation of this construct."
  sortText: gg|Website
  insertText: Website($1)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints

