---
source: libs/wingc/src/lsp/completions.rs
---
- label: a
  kind: 6
  detail: num
  documentation:
    kind: markdown
    value: "```wing\npreflight a: num\n```"
  sortText: bb|a
- label: b
  kind: 6
  detail: unresolved
  documentation:
    kind: markdown
    value: "```wing\npreflight b: unresolved\n```"
  sortText: bb|b
- label: assert
  kind: 3
  detail: "(condition: bool): void"
  documentation:
    kind: markdown
    value: "```wing\nassert: (condition: bool): void\n```\n---\nAsserts that a condition is true\n\n### Parameters\n- `condition` — The condition to assert"
  sortText: cc|assert
  insertText: assert($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: log
  kind: 3
  detail: "(message: str): void"
  documentation:
    kind: markdown
    value: "```wing\nlog: (message: str): void\n```\n---\nLogs a message\n\n### Parameters\n- `message` — The message to log"
  sortText: cc|log
  insertText: log($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: unsafeCast
  kind: 3
  detail: "(value: any): any"
  documentation:
    kind: markdown
    value: "```wing\nunsafeCast: (value: any): any\n```\n---\nCasts a value into a different type. This is unsafe and can cause runtime errors\n\n### Parameters\n- `value` — The value to cast into a different type"
  sortText: cc|unsafeCast
  insertText: unsafeCast($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: "inflight () => {}"
  kind: 15
  sortText: "ll|inflight () => {}"
  filterText: inflight
  insertText: "inflight ($1) => {$2}"
  insertTextFormat: 2

