---
source: libs/wingc/src/lsp/completions.rs
---
- label: deepCopyMut
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic deepCopyMut: (json: Json): MutJson\n```\n---\nCreates a mutable deep copy of the Json.\n\n### Parameters\n - *json* - to copy.\n\n### Returns\nthe mutable copy of the Json"
  sortText: ff|deepCopyMut
  insertText: deepCopyMut($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: delete
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic delete: (json: Json, key: str): void\n```\n---\nDeletes a key in a given Json.\n\n### Parameters\n - *json* - to delete key from.\n - *key* - the key to delete."
  sortText: ff|delete
  insertText: delete($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: has
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic has: (json: Json, key: str): bool\n```\n---\nChecks if a Json object has a given key.\n\n### Parameters\n - *json* - The json object to inspect.\n - *key* - The key to check.\n\n### Returns\nBoolean value corresponding to whether the key exists"
  sortText: ff|has
  insertText: has($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: keys
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic keys: (json: Json): Array<str>\n```\n---\nReturns the keys from the Json object.\n\n### Parameters\n - *json* - to get keys from.\n\n### Returns\nthe keys from the Json object as string array"
  sortText: ff|keys
  insertText: keys($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: parse
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic parse: (str: str): Json\n```\n---\nParse a string into a Json.\n\n### Parameters\n - *str* - to parse as Json.\n\n### Returns\nJson representation of the string"
  sortText: ff|parse
  insertText: parse($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: stringify
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic stringify: (json: Json, indent: num?): str\n```\n---\nFormats Json as string.\n\n### Parameters\n - *json* - to format as string.\n - *indent*\n\n### Returns\nstring representation of the Json\n\n### Remarks\n(JSON.stringify($args$))"
  sortText: ff|stringify
  insertText: stringify($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: tryParse
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic tryParse: (str: str): Json?\n```\n---\nTry to parse a string into a Json.\n\n### Parameters\n - *str* - to parse as Json.\n\n### Returns\nJson representation of the string or undefined if string is not parsable"
  sortText: ff|tryParse
  insertText: tryParse($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints
- label: values
  kind: 2
  documentation:
    kind: markdown
    value: "```wing\nstatic values: (json: Json): Array<Json>\n```\n---\nReturns the values from the Json.\n\n### Parameters\n - *json* - to get values from.\n\n### Returns\nthe values from the Json as array of Json"
  sortText: ff|values
  insertText: values($0)
  insertTextFormat: 2
  command:
    title: triggerParameterHints
    command: editor.action.triggerParameterHints

