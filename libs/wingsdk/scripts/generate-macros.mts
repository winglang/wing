import { MethodDeclaration, Project, SyntaxKind } from "ts-morph";

const MACRO = "macro";

const project = new Project();

const sourceFiles = project.addSourceFilesAtPaths("src/std/*.ts");

function extractJSDocs(node: MethodDeclaration) {
  const jsDocs = node.getChildrenOfKind(SyntaxKind.JSDoc);
  if (!jsDocs || !jsDocs.length) {
    return undefined;
  }
  return jsDocs[0]
    .getTags()
    .find((d) => d.getTagName() === MACRO)
    ?.getComment();
}

let macroFileContent = `
// This file is generated by the generate-macro npm script. Changes will be overridden.
`;

for (const file of sourceFiles) {
  for (const cls of file.getClasses()) {
    for (const mtd of cls.getMethods()) {
      const macro = extractJSDocs(mtd);
      if (macro) {
        const spreadArgs = macro.includes("...$args$") ? "..." : "";
        macroFileContent += `
        exports.__${cls.getName()}_${mtd.getName()} = (skipIfNil, $self$, ${spreadArgs}$args$) => {
          if (skipIfNil && $self$ === undefined) return $self$;
          return ${macro}
        }
        `;
      }
    }
  }
}

project.createSourceFile("lib/macros.js", macroFileContent, {
  overwrite: true,
});

await project.save();
