import { Construct } from "constructs";
import * as cloud from "../cloud";
import * as core from "../core";
import { BucketEncryption, Bucket as S3Bucket } from 'aws-cdk-lib/aws-s3';
import { CaseConventions, NameOptions, ResourceNames } from "../utils/resource-names";

export const BUCKET_PREFIX_OPTS: NameOptions = {
  maxLen: 37,
  case: CaseConventions.LOWERCASE,
  disallowedRegex: /([^a-z0-9\-]+)/g,
  // add a dash to the end of the prefix to distinguish between the
  // Wing-generated portion of the name and the suffix generated by Terraform
  // suffix: "-",
};

/**
 * AWS implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 */
export class Bucket extends cloud.BucketBase {
  // private readonly bucket: S3Bucket;

  constructor(scope: Construct, id: string, props: cloud.BucketProps) {
    super(scope, id, props);

    const bucketPrefix = ResourceNames.generateName(this, BUCKET_PREFIX_OPTS);

    // names cannot begin with 'xn--'
    if (bucketPrefix.startsWith("xn--")) {
      throw new Error("AWS S3 bucket names cannot begin with 'xn--'.");
    }

    // names must begin with a letter or number
    if (!/^[a-z0-9]/.test(bucketPrefix)) {
      throw new Error(
        "AWS S3 bucket names must begin with a letter or number."
      );
    }

    new S3Bucket(this, "Default", {
      bucketName: bucketPrefix,
      encryption: BucketEncryption.S3_MANAGED,
    });
  }

  public addObject(key: string, body: string): void {
    key;
    body;
    throw new Error("Method not implemented.");
  }

  /** @internal */
  public _toInflight(): core.Code {
    return core.InflightClient.for(__filename, "BucketClient", [
      `process.env["${this.envName()}"]`,
    ]);
  }

  private envName(): string {
    return `BUCKET_NAME_${this.node.addr.slice(-8)}`;
  }
}