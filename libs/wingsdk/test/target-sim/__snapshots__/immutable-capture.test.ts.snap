// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture.length === 2)) { throw new Error(\`assertion failed: \\"this.my_capture.length === 2\\"\`); }
if (!(this.my_capture[0] === \\"hello\\")) { throw new Error(\`assertion failed: \\"this.my_capture[0] === \\\\\\"hello\\\\\\"\\"\`); }
if (!(this.my_capture[1] === \\"dude\\")) { throw new Error(\`assertion failed: \\"this.my_capture[1] === \\\\\\"dude\\\\\\"\\"\`); }

}
};
})())({
my_capture: [\\"hello\\",\\"dude\\"]
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`array of buckets 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
await this.my_buckets[0].put(\\"hello.txt\\", \\"world\\");
const objects = await this.my_buckets[0].list();
if (!(objects.length === 1)) { throw new Error(\`assertion failed: \\"objects.length === 1\\"\`); }
if (!(objects[0] === \\"hello.txt\\")) { throw new Error(\`assertion failed: \\"objects[0] === \\\\\\"hello.txt\\\\\\"\\"\`); }
await this.my_buckets[1].put(\\"foo\\", \\"bar\\");
if (!(await this.my_buckets[1].get(\\"foo\\") === \\"bar\\")) { throw new Error(\`assertion failed: \\"await this.my_buckets[1].get(\\\\\\"foo\\\\\\") === \\\\\\"bar\\\\\\"\\"\`); }

}
};
})())({
my_buckets: [(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_4fecd6d0\\"),(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_300e8055\\")]
})).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B1",
      },
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B2",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/B1",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/B2",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {
            "BUCKET_HANDLE_300e8055": "\${root/B2#attrs.handle}",
            "BUCKET_HANDLE_4fecd6d0": "\${root/B1#attrs.handle}",
          },
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "B1": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B1",
          "path": "root/B1",
        },
        "B2": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B2",
          "path": "root/B2",
        },
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`array of durations 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_array.length === 2)) { throw new Error(\`assertion failed: \\"this.my_array.length === 2\\"\`); }
if (!(this.my_array[0].minutes === 10)) { throw new Error(\`assertion failed: \\"this.my_array[0].minutes === 10\\"\`); }
if (!(this.my_array[1].minutes === 20)) { throw new Error(\`assertion failed: \\"this.my_array[1].minutes === 20\\"\`); }

}
};
})())({
my_array: [{\\"seconds\\": 600,\\"minutes\\": 10,\\"hours\\": 0.16666666666666666,},{\\"seconds\\": 1200,\\"minutes\\": 20,\\"hours\\": 0.3333333333333333,}]
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`array of maps 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_array[0].get('foo') === 1)) { throw new Error(\`assertion failed: \\"this.my_array[0].get('foo') === 1\\"\`); }
if (!(this.my_array[1].get('bar') === 4)) { throw new Error(\`assertion failed: \\"this.my_array[1].get('bar') === 4\\"\`); }

}
};
})())({
my_array: [new Map([[\\"foo\\",1],[\\"bar\\",2]]),new Map([[\\"foo\\",3],[\\"bar\\",4]])]
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`boolean 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture === false)) { throw new Error(\`assertion failed: \\"this.my_capture === false\\"\`); }

}
};
})())({
my_capture: false
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`duration 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture.minutes === 120)) { throw new Error(\`assertion failed: \\"this.my_capture.minutes === 120\\"\`); }
if (!(this.my_capture.seconds === 7200)) { throw new Error(\`assertion failed: \\"this.my_capture.seconds === 7200\\"\`); }
if (!(this.my_capture.hours === 2)) { throw new Error(\`assertion failed: \\"this.my_capture.hours === 2\\"\`); }

}
};
})())({
my_capture: {\\"seconds\\": 7200,\\"minutes\\": 120,\\"hours\\": 2,}
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`map 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture.has(\\"foo\\"))) { throw new Error(\`assertion failed: \\"this.my_capture.has(\\\\\\"foo\\\\\\")\\"\`); }
if (!(this.my_capture.has(\\"bar\\"))) { throw new Error(\`assertion failed: \\"this.my_capture.has(\\\\\\"bar\\\\\\")\\"\`); }
if (!(this.my_capture.size === 2)) { throw new Error(\`assertion failed: \\"this.my_capture.size === 2\\"\`); }
if (!(this.my_capture.get(\\"foo\\") === 123)) { throw new Error(\`assertion failed: \\"this.my_capture.get(\\\\\\"foo\\\\\\") === 123\\"\`); }
if (!(this.my_capture.get(\\"bar\\") === 456)) { throw new Error(\`assertion failed: \\"this.my_capture.get(\\\\\\"bar\\\\\\") === 456\\"\`); }

}
};
})())({
my_capture: new Map([[\\"foo\\",123],[\\"bar\\",456]])
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`map of arrays 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_map.has(\\"foo\\"))) { throw new Error(\`assertion failed: \\"this.my_map.has(\\\\\\"foo\\\\\\")\\"\`); }
if (!(this.my_map.has(\\"bar\\"))) { throw new Error(\`assertion failed: \\"this.my_map.has(\\\\\\"bar\\\\\\")\\"\`); }
if (!(this.my_map.size === 2)) { throw new Error(\`assertion failed: \\"this.my_map.size === 2\\"\`); }
if (!(this.my_map.get(\\"foo\\")[0] === 1)) { throw new Error(\`assertion failed: \\"this.my_map.get(\\\\\\"foo\\\\\\")[0] === 1\\"\`); }
if (!(this.my_map.get(\\"foo\\")[1] === 2)) { throw new Error(\`assertion failed: \\"this.my_map.get(\\\\\\"foo\\\\\\")[1] === 2\\"\`); }
if (!(this.my_map.get(\\"bar\\")[0] === 3)) { throw new Error(\`assertion failed: \\"this.my_map.get(\\\\\\"bar\\\\\\")[0] === 3\\"\`); }
if (!(this.my_map.get(\\"bar\\")[1] === 4)) { throw new Error(\`assertion failed: \\"this.my_map.get(\\\\\\"bar\\\\\\")[1] === 4\\"\`); }

}
};
})())({
my_map: new Map([[\\"foo\\",[1,2]],[\\"bar\\",[3,4]]])
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`map of arrays of durations 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_map.get('foo')[0].minutes === 10)) { throw new Error(\`assertion failed: \\"this.my_map.get('foo')[0].minutes === 10\\"\`); }
if (!(this.my_map.get('foo')[1].seconds === 20 * 60)) { throw new Error(\`assertion failed: \\"this.my_map.get('foo')[1].seconds === 20 * 60\\"\`); }
if (!(this.my_map.get('bar')[0].minutes === 30)) { throw new Error(\`assertion failed: \\"this.my_map.get('bar')[0].minutes === 30\\"\`); }
if (!(this.my_map.get('bar')[1].seconds === 40 * 60)) { throw new Error(\`assertion failed: \\"this.my_map.get('bar')[1].seconds === 40 * 60\\"\`); }

}
};
})())({
my_map: new Map([[\\"foo\\",[{\\"seconds\\": 600,\\"minutes\\": 10,\\"hours\\": 0.16666666666666666,},{\\"seconds\\": 1200,\\"minutes\\": 20,\\"hours\\": 0.3333333333333333,}]],[\\"bar\\",[{\\"seconds\\": 1800,\\"minutes\\": 30,\\"hours\\": 0.5,},{\\"seconds\\": 2400,\\"minutes\\": 40,\\"hours\\": 0.6666666666666666,}]]])
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`map of buckets 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
const foo = this.my_map.get(\\"foo\\");
await foo.put(\\"hello.txt\\", \\"world\\");
if (!(await foo.get(\\"hello.txt\\") === \\"world\\")) { throw new Error(\`assertion failed: \\"await foo.get(\\\\\\"hello.txt\\\\\\") === \\\\\\"world\\\\\\"\\"\`); }

}
};
})())({
my_map: new Map([[\\"foo\\",(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_4fecd6d0\\")],[\\"bar\\",(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_300e8055\\")]])
})).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B1",
      },
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B2",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/B1",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/B2",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {
            "BUCKET_HANDLE_300e8055": "\${root/B2#attrs.handle}",
            "BUCKET_HANDLE_4fecd6d0": "\${root/B1#attrs.handle}",
          },
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "B1": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B1",
          "path": "root/B1",
        },
        "B2": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B2",
          "path": "root/B2",
        },
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`number 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture + 20 === 143)) { throw new Error(\`assertion failed: \\"this.my_capture + 20 === 143\\"\`); }

}
};
})())({
my_capture: 123
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`set 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture.has(\\"boom\\"))) { throw new Error(\`assertion failed: \\"this.my_capture.has(\\\\\\"boom\\\\\\")\\"\`); }
if (!(this.my_capture.has(\\"bam\\"))) { throw new Error(\`assertion failed: \\"this.my_capture.has(\\\\\\"bam\\\\\\")\\"\`); }
if (!(this.my_capture.has(\\"bang\\"))) { throw new Error(\`assertion failed: \\"this.my_capture.has(\\\\\\"bang\\\\\\")\\"\`); }
if (!(this.my_capture.size === 3)) { throw new Error(\`assertion failed: \\"this.my_capture.size === 3\\"\`); }

}
};
})())({
my_capture: new Set([\\"boom\\",\\"bam\\",\\"bang\\"])
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`set of durations 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(Array.from(this.my_set)[0].minutes === 10)) { throw new Error(\`assertion failed: \\"Array.from(this.my_set)[0].minutes === 10\\"\`); }
if (!(Array.from(this.my_set)[0].hours === 0.16666666666666666)) { throw new Error(\`assertion failed: \\"Array.from(this.my_set)[0].hours === 0.16666666666666666\\"\`); }
if (!(Array.from(this.my_set)[1].seconds === 1200)) { throw new Error(\`assertion failed: \\"Array.from(this.my_set)[1].seconds === 1200\\"\`); }

}
};
})())({
my_set: new Set([{\\"seconds\\": 600,\\"minutes\\": 10,\\"hours\\": 0.16666666666666666,},{\\"seconds\\": 1200,\\"minutes\\": 20,\\"hours\\": 0.3333333333333333,}])
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`string 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture.length === 11)) { throw new Error(\`assertion failed: \\"this.my_capture.length === 11\\"\`); }
if (!(this.my_capture === \\"bam bam bam\\")) { throw new Error(\`assertion failed: \\"this.my_capture === \\\\\\"bam bam bam\\\\\\"\\"\`); }

}
};
})())({
my_capture: \\"bam bam bam\\"
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`struct 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_capture.hello === \\"dude\\")) { throw new Error(\`assertion failed: \\"this.my_capture.hello === \\\\\\"dude\\\\\\"\\"\`); }
if (!(this.my_capture.world === \\"cup\\")) { throw new Error(\`assertion failed: \\"this.my_capture.world === \\\\\\"cup\\\\\\"\\"\`); }
if (!(this.my_capture.foo === \\"bar\\")) { throw new Error(\`assertion failed: \\"this.my_capture.foo === \\\\\\"bar\\\\\\"\\"\`); }
if (!(Object.keys(this.my_capture).length === 3)) { throw new Error(\`assertion failed: \\"Object.keys(this.my_capture).length === 3\\"\`); }

}
};
})())({
my_capture: {\\"hello\\": \\"dude\\",\\"world\\": \\"cup\\",\\"foo\\": \\"bar\\",}
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`struct of maps 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
if (!(this.my_struct.foo.get('foo') === 1)) { throw new Error(\`assertion failed: \\"this.my_struct.foo.get('foo') === 1\\"\`); }
if (!(this.my_struct.foo.get('bar') === 2)) { throw new Error(\`assertion failed: \\"this.my_struct.foo.get('bar') === 2\\"\`); }
if (!(this.my_struct.bar.get('foo') === 3)) { throw new Error(\`assertion failed: \\"this.my_struct.bar.get('foo') === 3\\"\`); }
if (!(this.my_struct.bar.get('bar') === 4)) { throw new Error(\`assertion failed: \\"this.my_struct.bar.get('bar') === 4\\"\`); }

}
};
})())({
my_struct: {\\"foo\\": new Map([[\\"foo\\",1],[\\"bar\\",2]]),\\"bar\\": new Map([[\\"foo\\",3],[\\"bar\\",4]]),}
})).handle(event);
};",
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`struct with resources 1`] = `
{
  ".wing/function_c8e6b4af.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
const b = this.my_struct.bucky;
await b.put(\\"hello.txt\\", \\"world\\");
if (!(await b.get(\\"hello.txt\\") === \\"world\\")) { throw new Error(\`assertion failed: \\"await b.get(\\\\\\"hello.txt\\\\\\") === \\\\\\"world\\\\\\"\\"\`); }
const boom = this.my_struct.arry.boom[1];
if (!((await boom.list()).length === 0)) { throw new Error(\`assertion failed: \\"(await boom.list()).length === 0\\"\`); }
const bar = this.my_struct.mapy.get(\\"bar\\");
await bar.put(\\"foo\\", \\"bar\\");
if (!(await bar.get(\\"foo\\") === \\"bar\\")) { throw new Error(\`assertion failed: \\"await bar.get(\\\\\\"foo\\\\\\") === \\\\\\"bar\\\\\\"\\"\`); }

}
};
})())({
my_struct: {\\"bucky\\": (function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_4fecd6d0\\"),\\"mapy\\": new Map([[\\"foo\\",(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_300e8055\\")],[\\"bar\\",(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_0120daf4\\")]]),\\"arry\\": {\\"boom\\": [(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_ea7944ef\\"),(function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"BUCKET_HANDLE_1d7ab674\\")],},}
})).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B1",
      },
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B2",
      },
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B3",
      },
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B4",
      },
      {
        "name": "$inflight_init()",
        "source": "root/Function",
        "target": "root/B5",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/B1",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/B2",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/B3",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/B4",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/B5",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "wingsdk.cloud.Bucket",
      },
      {
        "attrs": {},
        "path": "root/Function",
        "props": {
          "environmentVariables": {
            "BUCKET_HANDLE_0120daf4": "\${root/B3#attrs.handle}",
            "BUCKET_HANDLE_1d7ab674": "\${root/B5#attrs.handle}",
            "BUCKET_HANDLE_300e8055": "\${root/B2#attrs.handle}",
            "BUCKET_HANDLE_4fecd6d0": "\${root/B1#attrs.handle}",
            "BUCKET_HANDLE_ea7944ef": "\${root/B4#attrs.handle}",
          },
          "sourceCodeFile": ".wing/function_c8e6b4af.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "B1": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B1",
          "path": "root/B1",
        },
        "B2": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B2",
          "path": "root/B2",
        },
        "B3": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B3",
          "path": "root/B3",
        },
        "B4": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B4",
          "path": "root/B4",
        },
        "B5": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "B5",
          "path": "root/B5",
        },
        "Function": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A cloud function (FaaS)",
            "title": "Function",
          },
          "id": "Function",
          "path": "root/Function",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "foo": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "foo",
          "path": "root/foo",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;
