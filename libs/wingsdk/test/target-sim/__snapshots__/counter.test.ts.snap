// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`create a counter 1`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 123
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`dec 1`] = `
[
  "root/my_counter/Resource started",
  "dec()",
  "dec()",
  "dec(10)",
  "dec(10)",
  "root/my_counter/Resource stopped",
]
`;

exports[`dec 2`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 123
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`inc 1`] = `
[
  "root/my_counter/Resource started",
  "inc()",
  "inc()",
  "inc(10)",
  "inc(10)",
  "root/my_counter/Resource stopped",
]
`;

exports[`inc 2`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 123
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`key dec 1`] = `
[
  "root/my_counter/Resource started",
  "dec(1, "my-key")",
  "dec(nil, "my-key")",
  "dec(10, "my-key")",
  "dec(10, "my-key")",
  "root/my_counter/Resource stopped",
]
`;

exports[`key dec 2`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 0
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`key inc 1`] = `
[
  "root/my_counter/Resource started",
  "inc(1, "my-key")",
  "inc(nil, "my-key")",
  "inc(10, "my-key")",
  "inc(10, "my-key")",
  "root/my_counter/Resource stopped",
]
`;

exports[`key inc 2`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 0
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`key set to new value 1`] = `
[
  "root/my_counter/Resource started",
  "set(5, "my-key")",
  "peek("my-key")",
  "root/my_counter/Resource stopped",
]
`;

exports[`key set to new value 2`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 0
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`set to new value 1`] = `
[
  "root/my_counter/Resource started",
  "set(5)",
  "peek()",
  "root/my_counter/Resource stopped",
]
`;

exports[`set to new value 2`] = `
{
  ".wing/resource_c81f10c5.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 123
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "inc",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "dec",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "peek",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/my_counter",
        "sourceOp": "set",
        "target": "root/my_counter/Resource",
        "targetOp": "call",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_counter/Resource": {
        "addr": "c81f10c55a36e5ca9846b94e2177596099ff6376ac",
        "path": "root/my_counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81f10c5.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_counter": {
          "children": {
            "Resource": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "color": "emerald",
                "description": "A simulated resource",
                "hidden": true,
                "title": "Resource",
              },
              "id": "Resource",
              "path": "root/my_counter/Resource",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A distributed atomic counter",
            "title": "Counter",
          },
          "id": "my_counter",
          "path": "root/my_counter",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;
