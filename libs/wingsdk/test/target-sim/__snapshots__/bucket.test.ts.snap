// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bucket on event creates 3 topics, and sends the right event and key in the event handlers 1`] = `
[
  "root/my_bucket/oncreate started",
  "root/my_bucket/onupdate started",
  "root/my_bucket/ondelete started",
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "root/log_bucket started",
  "root/my_bucket/oncreate/OnMessage0 started",
  "root/my_bucket/oncreate/Policy started",
  "root/my_bucket/oncreate/TopicEventMapping0 started",
  "root/my_bucket/onupdate/OnMessage0 started",
  "root/my_bucket/onupdate/Policy started",
  "root/my_bucket/onupdate/TopicEventMapping0 started",
  "root/my_bucket/ondelete/OnMessage0 started",
  "root/my_bucket/ondelete/Policy started",
  "root/my_bucket/ondelete/TopicEventMapping0 started",
  "root/log_bucket/Policy started",
  "Publish (message=a).",
  "Sending message (message=a, subscriber=sim-6).",
  "InvokeAsync (payload="a").",
  "Put (key=a).",
  "Put (key=a).",
  "I am done",
  "Get (key=a).",
  "Publish (message=a).",
  "Sending message (message=a, subscriber=sim-9).",
  "InvokeAsync (payload="a").",
  "Put (key=a).",
  "Put (key=a).",
  "I am done",
  "Get (key=a).",
  "Publish (message=a).",
  "Sending message (message=a, subscriber=sim-12).",
  "InvokeAsync (payload="a").",
  "Delete (key=a).",
  "Put (key=a).",
  "I am done",
  "Get (key=a).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
  "root/my_bucket/oncreate/Policy stopped",
  "root/my_bucket/oncreate/TopicEventMapping0 stopped",
  "root/my_bucket/oncreate stopped",
  "root/my_bucket/onupdate/Policy stopped",
  "root/my_bucket/onupdate/TopicEventMapping0 stopped",
  "root/my_bucket/onupdate stopped",
  "root/my_bucket/ondelete/Policy stopped",
  "root/my_bucket/ondelete/TopicEventMapping0 stopped",
  "root/my_bucket/ondelete stopped",
  "root/my_bucket/oncreate/OnMessage0 stopped",
  "root/my_bucket/onupdate/OnMessage0 stopped",
  "root/my_bucket/ondelete/OnMessage0 stopped",
  "root/log_bucket/Policy stopped",
  "root/log_bucket stopped",
]
`;

exports[`can add file in preflight 1`] = `
[
  "Adding object from preflight (key=test.txt).",
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Get (key=test.txt).",
  "Get (key=test.txt).",
  "List (prefix=null).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`can add file in preflight 2`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_bucket": {
        "addr": "c8220a82a4ad9c25a4f236946f350d2ac081dd7bbc",
        "path": "root/my_bucket",
        "props": {
          "initialObjects": {
            "test.txt": "test1",
          },
          "public": false,
          "topics": {},
        },
        "type": "@winglang/sdk.cloud.Bucket",
      },
      "root/my_bucket/Policy": {
        "addr": "c8b5ba55132964ee19331fb9f46241560e67fed76b",
        "path": "root/my_bucket/Policy",
        "props": {
          "principal": "\${wsim#root/my_bucket#attrs.handle}",
          "statements": [],
        },
        "type": "@winglang/sdk.sim.Policy",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Counter": {
        "className": "Counter",
        "sourcePath": "<ABSOLUTE PATH>/counter.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.ex.Redis": {
        "className": "Redis",
        "sourcePath": "<ABSOLUTE PATH>/redis.inflight.js",
      },
      "@winglang/sdk.ex.Table": {
        "className": "Table",
        "sourcePath": "<ABSOLUTE PATH>/table.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_bucket": {
          "children": {
            "Policy": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A simulated resource policy",
                "hidden": true,
                "title": "Policy",
              },
              "id": "Policy",
              "path": "root/my_bucket/Policy",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "my_bucket",
          "path": "root/my_bucket",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`can add object in preflight 1`] = `
[
  "Adding object from preflight (key=greeting.txt).",
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Get (key=greeting.txt).",
  "Get (key=greeting.txt).",
  "List (prefix=null).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`can add object in preflight 2`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_bucket": {
        "addr": "c8220a82a4ad9c25a4f236946f350d2ac081dd7bbc",
        "path": "root/my_bucket",
        "props": {
          "initialObjects": {
            "greeting.txt": "Hello world!",
          },
          "public": false,
          "topics": {},
        },
        "type": "@winglang/sdk.cloud.Bucket",
      },
      "root/my_bucket/Policy": {
        "addr": "c8b5ba55132964ee19331fb9f46241560e67fed76b",
        "path": "root/my_bucket/Policy",
        "props": {
          "principal": "\${wsim#root/my_bucket#attrs.handle}",
          "statements": [],
        },
        "type": "@winglang/sdk.sim.Policy",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Counter": {
        "className": "Counter",
        "sourcePath": "<ABSOLUTE PATH>/counter.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.ex.Redis": {
        "className": "Redis",
        "sourcePath": "<ABSOLUTE PATH>/redis.inflight.js",
      },
      "@winglang/sdk.ex.Table": {
        "className": "Table",
        "sourcePath": "<ABSOLUTE PATH>/table.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_bucket": {
          "children": {
            "Policy": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A simulated resource policy",
                "hidden": true,
                "title": "Policy",
              },
              "id": "Policy",
              "path": "root/my_bucket/Policy",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "my_bucket",
          "path": "root/my_bucket",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`create a bucket 1`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_bucket": {
        "addr": "c8220a82a4ad9c25a4f236946f350d2ac081dd7bbc",
        "path": "root/my_bucket",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "@winglang/sdk.cloud.Bucket",
      },
      "root/my_bucket/Policy": {
        "addr": "c8b5ba55132964ee19331fb9f46241560e67fed76b",
        "path": "root/my_bucket/Policy",
        "props": {
          "principal": "\${wsim#root/my_bucket#attrs.handle}",
          "statements": [],
        },
        "type": "@winglang/sdk.sim.Policy",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Counter": {
        "className": "Counter",
        "sourcePath": "<ABSOLUTE PATH>/counter.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.ex.Redis": {
        "className": "Redis",
        "sourcePath": "<ABSOLUTE PATH>/redis.inflight.js",
      },
      "@winglang/sdk.ex.Table": {
        "className": "Table",
        "sourcePath": "<ABSOLUTE PATH>/table.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_bucket": {
          "children": {
            "Policy": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A simulated resource policy",
                "hidden": true,
                "title": "Policy",
              },
              "id": "Policy",
              "path": "root/my_bucket/Policy",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "my_bucket",
          "path": "root/my_bucket",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`get invalid object throws an error 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Get (key=unknown.txt).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`get invalid object throws an error 2`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/my_bucket": {
        "addr": "c8220a82a4ad9c25a4f236946f350d2ac081dd7bbc",
        "path": "root/my_bucket",
        "props": {
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "@winglang/sdk.cloud.Bucket",
      },
      "root/my_bucket/Policy": {
        "addr": "c8b5ba55132964ee19331fb9f46241560e67fed76b",
        "path": "root/my_bucket/Policy",
        "props": {
          "principal": "\${wsim#root/my_bucket#attrs.handle}",
          "statements": [],
        },
        "type": "@winglang/sdk.sim.Policy",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Counter": {
        "className": "Counter",
        "sourcePath": "<ABSOLUTE PATH>/counter.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.ex.Redis": {
        "className": "Redis",
        "sourcePath": "<ABSOLUTE PATH>/redis.inflight.js",
      },
      "@winglang/sdk.ex.Table": {
        "className": "Table",
        "sourcePath": "<ABSOLUTE PATH>/table.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "my_bucket": {
          "children": {
            "Policy": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A simulated resource policy",
                "hidden": true,
                "title": "Policy",
              },
              "id": "Policy",
              "path": "root/my_bucket/Policy",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {
            "description": "A cloud object store",
            "title": "Bucket",
          },
          "id": "my_bucket",
          "path": "root/my_bucket",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`list respects prefixes 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=path/dir1/file1.txt).",
  "Put (key=path/dir2/file2.txt).",
  "List (prefix=null).",
  "List (prefix=path).",
  "List (prefix=path/dir1).",
  "List (prefix=path/dir2).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`objects can have keys that look like directories 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=foo).",
  "Put (key=foo/).",
  "Put (key=foo/bar).",
  "Put (key=foo/bar/).",
  "Put (key=foo/bar/baz).",
  "List (prefix=null).",
  "List (prefix=foo).",
  "List (prefix=foo/).",
  "List (prefix=foo/bar).",
  "List (prefix=foo/bar/).",
  "List (prefix=foo/bar/baz).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`put and get metadata of objects from bucket 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=file1.main.w).",
  "Put (key=file2.txt).",
  "Put (key=file3.txt).",
  "Metadata (key=file1.main.w).",
  "Metadata (key=file2.txt).",
  "Metadata (key=file3.txt).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`put and get object from bucket 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=greeting.txt).",
  "Get (key=greeting.txt).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`put multiple json objects and list all from bucket 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put Json (key=greeting1.json).",
  "Put Json (key=greeting2.json).",
  "Put Json (key=greeting3.json).",
  "List (prefix=null).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`put multiple objects and list all from bucket 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=greeting1.txt).",
  "Put (key=greeting2.txt).",
  "Put (key=greeting3.txt).",
  "List (prefix=null).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`remove object from a bucket 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=unknown.txt).",
  "Delete (key=unknown.txt).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`remove object from a bucket with mustExist as option 1`] = `
[
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "Put (key=unknown.txt).",
  "Delete (key=unknown.txt).",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
]
`;

exports[`removing a key will call onDelete method 1`] = `
[
  "root/my_bucket/ondelete started",
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "root/my_bucket/ondelete/OnMessage0 started",
  "root/my_bucket/ondelete/Policy started",
  "root/my_bucket/ondelete/TopicEventMapping0 started",
  "Put (key=unknown.txt).",
  "Publish (message=unknown.txt).",
  "Sending message (message=unknown.txt, subscriber=sim-3).",
  "InvokeAsync (payload="unknown.txt").",
  "Delete (key=unknown.txt).",
  "Received unknown.txt",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
  "root/my_bucket/ondelete/Policy stopped",
  "root/my_bucket/ondelete/TopicEventMapping0 stopped",
  "root/my_bucket/ondelete stopped",
  "root/my_bucket/ondelete/OnMessage0 stopped",
]
`;

exports[`update an object in bucket 1`] = `
[
  "root/my_bucket/oncreate started",
  "root/my_bucket started",
  "root/my_bucket/Policy started",
  "root/my_bucket/oncreate/OnMessage0 started",
  "root/my_bucket/oncreate/Policy started",
  "root/my_bucket/oncreate/TopicEventMapping0 started",
  "Publish (message=1.txt).",
  "Sending message (message=1.txt, subscriber=sim-3).",
  "InvokeAsync (payload="1.txt").",
  "Put (key=1.txt).",
  "Put (key=1.txt).",
  "I am done",
  "root/my_bucket/Policy stopped",
  "root/my_bucket stopped",
  "root/my_bucket/oncreate/Policy stopped",
  "root/my_bucket/oncreate/TopicEventMapping0 stopped",
  "root/my_bucket/oncreate stopped",
  "root/my_bucket/oncreate/OnMessage0 stopped",
]
`;
