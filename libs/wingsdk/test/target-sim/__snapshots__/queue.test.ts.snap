// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`create a queue 2`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 10,
        },
        "type": "wingsdk.cloud.Queue",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`messages are not requeued if the function fails after retention timeout 1`] = `
{
  ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new (require(\\"[REDACTED]/wingsdk/src/target-sim/queue.setconsumer.inflight.js\\")).QueueSetConsumerHandlerClient({ handler: new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  
async handle(message) {
  if (message === \\"BAD MESSAGE\\") {
    throw new Error(\\"ERROR\\");
  }
}
};
})())({

}), args: {} })).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "handle()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "$inflight_init()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "setConsumer()",
        "source": "root/my_queue",
        "target": "root/my_queue/my_queue-SetConsumer-e645076f",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-SetConsumer-e645076f",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 1,
          "timeout": 0.1,
        },
        "type": "wingsdk.cloud.Queue",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
        "props": {
          "publisher": "\${root/my_queue#attrs.handle}",
          "subscriber": "\${root/my_queue/my_queue-SetConsumer-e645076f#attrs.handle}",
          "subscriptionProps": {
            "batchSize": 1,
          },
        },
        "type": "wingsdk.sim.EventMapping",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Handler": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "Handler",
          "path": "root/Handler",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "children": {
            "my_queue-QueueEventMapping-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-QueueEventMapping-e645076f",
              "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
            },
            "my_queue-SetConsumer-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "description": "A cloud function (FaaS)",
                "sourceModule": "@winglang/sdk",
                "title": "setConsumer()",
              },
              "id": "my_queue-SetConsumer-e645076f",
              "path": "root/my_queue/my_queue-SetConsumer-e645076f",
            },
            "my_queue-SetConsumerHandler-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-SetConsumerHandler-e645076f",
              "path": "root/my_queue/my_queue-SetConsumerHandler-e645076f",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`messages are not requeued if the function fails before timeout 1`] = `
[
  "wingsdk.cloud.TestRunner created.",
  "wingsdk.cloud.Function created.",
  "wingsdk.cloud.Queue created.",
  "wingsdk.sim.EventMapping created.",
  "Push (messages=BAD MESSAGE).",
  "Sending messages (messages=[\\"BAD MESSAGE\\"], subscriber=sim-1).",
  "Invoke (payload=\\"{\\\\\\"messages\\\\\\":[\\\\\\"BAD MESSAGE\\\\\\"]}\\").",
  "Subscriber error - returning 1 messages to queue: ERROR",
  "wingsdk.sim.EventMapping deleted.",
  "wingsdk.cloud.Queue deleted.",
  "wingsdk.cloud.Function deleted.",
  "wingsdk.cloud.TestRunner deleted.",
]
`;

exports[`messages are not requeued if the function fails before timeout 2`] = `
{
  ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new (require(\\"[REDACTED]/wingsdk/src/target-sim/queue.setconsumer.inflight.js\\")).QueueSetConsumerHandlerClient({ handler: new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  
async handle(message) {
  if (message === \\"BAD MESSAGE\\") {
    throw new Error(\\"ERROR\\");
  }
}
};
})())({

}), args: {} })).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "handle()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "$inflight_init()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "setConsumer()",
        "source": "root/my_queue",
        "target": "root/my_queue/my_queue-SetConsumer-e645076f",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-SetConsumer-e645076f",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 30,
        },
        "type": "wingsdk.cloud.Queue",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
        "props": {
          "publisher": "\${root/my_queue#attrs.handle}",
          "subscriber": "\${root/my_queue/my_queue-SetConsumer-e645076f#attrs.handle}",
          "subscriptionProps": {
            "batchSize": 1,
          },
        },
        "type": "wingsdk.sim.EventMapping",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Handler": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "Handler",
          "path": "root/Handler",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "children": {
            "my_queue-QueueEventMapping-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-QueueEventMapping-e645076f",
              "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
            },
            "my_queue-SetConsumer-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "description": "A cloud function (FaaS)",
                "sourceModule": "@winglang/sdk",
                "title": "setConsumer()",
              },
              "id": "my_queue-SetConsumer-e645076f",
              "path": "root/my_queue/my_queue-SetConsumer-e645076f",
            },
            "my_queue-SetConsumerHandler-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-SetConsumerHandler-e645076f",
              "path": "root/my_queue/my_queue-SetConsumerHandler-e645076f",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`messages are requeued if the function fails after timeout 1`] = `
[
  "wingsdk.cloud.TestRunner created.",
  "wingsdk.cloud.Function created.",
  "wingsdk.cloud.Queue created.",
  "wingsdk.sim.EventMapping created.",
  "Push (messages=BAD MESSAGE).",
  "Sending messages (messages=[\\"BAD MESSAGE\\"], subscriber=sim-1).",
  "Invoke (payload=\\"{\\\\\\"messages\\\\\\":[\\\\\\"BAD MESSAGE\\\\\\"]}\\").",
  "Subscriber error - returning 1 messages to queue: ERROR",
  "wingsdk.sim.EventMapping deleted.",
  "wingsdk.cloud.Queue deleted.",
  "wingsdk.cloud.Function deleted.",
  "wingsdk.cloud.TestRunner deleted.",
  "1 messages pushed back to queue after visibility timeout.",
]
`;

exports[`messages are requeued if the function fails after timeout 2`] = `
{
  ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new (require(\\"[REDACTED]/wingsdk/src/target-sim/queue.setconsumer.inflight.js\\")).QueueSetConsumerHandlerClient({ handler: new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  
async handle(message) {
  if (message === \\"BAD MESSAGE\\") {
    throw new Error(\\"ERROR\\");
  }
}
};
})())({

}), args: {} })).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "handle()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "$inflight_init()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "setConsumer()",
        "source": "root/my_queue",
        "target": "root/my_queue/my_queue-SetConsumer-e645076f",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-SetConsumer-e645076f",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 1,
        },
        "type": "wingsdk.cloud.Queue",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
        "props": {
          "publisher": "\${root/my_queue#attrs.handle}",
          "subscriber": "\${root/my_queue/my_queue-SetConsumer-e645076f#attrs.handle}",
          "subscriptionProps": {
            "batchSize": 1,
          },
        },
        "type": "wingsdk.sim.EventMapping",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Handler": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "Handler",
          "path": "root/Handler",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "children": {
            "my_queue-QueueEventMapping-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-QueueEventMapping-e645076f",
              "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
            },
            "my_queue-SetConsumer-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "description": "A cloud function (FaaS)",
                "sourceModule": "@winglang/sdk",
                "title": "setConsumer()",
              },
              "id": "my_queue-SetConsumer-e645076f",
              "path": "root/my_queue/my_queue-SetConsumer-e645076f",
            },
            "my_queue-SetConsumerHandler-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-SetConsumerHandler-e645076f",
              "path": "root/my_queue/my_queue-SetConsumerHandler-e645076f",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`push rejects empty message 1`] = `
[
  "wingsdk.cloud.TestRunner created.",
  "wingsdk.cloud.Queue created.",
  "Push (messages=).",
  "wingsdk.cloud.Queue deleted.",
  "wingsdk.cloud.TestRunner deleted.",
]
`;

exports[`push rejects empty message 2`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 10,
        },
        "type": "wingsdk.cloud.Queue",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`queue batch size of 2, purge the queue 1`] = `
[
  "wingsdk.cloud.TestRunner created.",
  "wingsdk.cloud.Queue created.",
  "Push (messages=A).",
  "Push (messages=B).",
  "ApproxSize ().",
  "Purge ().",
  "ApproxSize ().",
  "wingsdk.cloud.Queue deleted.",
  "wingsdk.cloud.TestRunner deleted.",
]
`;

exports[`queue batch size of 2, purge the queue 2`] = `
{
  "connections.json": {
    "connections": [],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 10,
        },
        "type": "wingsdk.cloud.Queue",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`queue with one subscriber, batch size of 5 1`] = `
{
  ".wing/function_c8ab799f.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  async handle() {
  await this.queue.push(\\"A\\");
  await this.queue.push(\\"B\\");
  await this.queue.push(\\"C\\");
  await this.queue.push(\\"D\\");
  await this.queue.push(\\"E\\");
  await this.queue.push(\\"F\\");
}
};
})())({
queue: (function(env) {
  let handle = process.env[env];
  if (!handle) {
    throw new Error(\\"Missing environment variable: \\" + env);
  }
  return $simulator.findInstance(handle);
})(\\"QUEUE_HANDLE_54fcf4cd\\")
})).handle(event);
};",
  ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new (require(\\"[REDACTED]/wingsdk/src/target-sim/queue.setconsumer.inflight.js\\")).QueueSetConsumerHandlerClient({ handler: new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  
async handle(message) {
  if (message === \\"BAD MESSAGE\\") {
    throw new Error(\\"ERROR\\");
  }
}
};
})())({

}), args: {} })).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "handle()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "$inflight_init()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "setConsumer()",
        "source": "root/my_queue",
        "target": "root/my_queue/my_queue-SetConsumer-e645076f",
      },
      {
        "name": "push()",
        "source": "root/my_queue_messages/Function",
        "target": "root/my_queue",
      },
      {
        "name": "$inflight_init()",
        "source": "root/my_queue_messages/Function",
        "target": "root/my_queue",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-SetConsumer-e645076f",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 10,
        },
        "type": "wingsdk.cloud.Queue",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
        "props": {
          "publisher": "\${root/my_queue#attrs.handle}",
          "subscriber": "\${root/my_queue/my_queue-SetConsumer-e645076f#attrs.handle}",
          "subscriptionProps": {
            "batchSize": 5,
          },
        },
        "type": "wingsdk.sim.EventMapping",
      },
      {
        "attrs": {},
        "path": "root/my_queue_messages/Function",
        "props": {
          "environmentVariables": {
            "QUEUE_HANDLE_54fcf4cd": "\${root/my_queue#attrs.handle}",
          },
          "sourceCodeFile": ".wing/function_c8ab799f.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
      {
        "attrs": {},
        "path": "root/my_queue_messages",
        "props": {
          "functionHandle": "\${root/my_queue_messages/Function#attrs.handle}",
        },
        "type": "wingsdk.cloud.OnDeploy",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Handler": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "Handler",
          "path": "root/Handler",
        },
        "OnDeployHandler": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "OnDeployHandler",
          "path": "root/OnDeployHandler",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "children": {
            "my_queue-QueueEventMapping-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-QueueEventMapping-e645076f",
              "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
            },
            "my_queue-SetConsumer-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "description": "A cloud function (FaaS)",
                "sourceModule": "@winglang/sdk",
                "title": "setConsumer()",
              },
              "id": "my_queue-SetConsumer-e645076f",
              "path": "root/my_queue/my_queue-SetConsumer-e645076f",
            },
            "my_queue-SetConsumerHandler-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-SetConsumerHandler-e645076f",
              "path": "root/my_queue/my_queue-SetConsumerHandler-e645076f",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
        "my_queue_messages": {
          "children": {
            "Function": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "description": "A cloud function (FaaS)",
                "sourceModule": "@winglang/sdk",
                "title": "Function",
              },
              "id": "Function",
              "path": "root/my_queue_messages/Function",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "Run code during the app's deployment.",
            "title": "OnDeploy",
          },
          "id": "my_queue_messages",
          "path": "root/my_queue_messages",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;

exports[`queue with one subscriber, default batch size of 1 1`] = `
{
  ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js": "\\"use strict\\";
exports.handler = async function(event) {
  return await (new (require(\\"[REDACTED]/wingsdk/src/target-sim/queue.setconsumer.inflight.js\\")).QueueSetConsumerHandlerClient({ handler: new ((function(){
return class Handler {
  constructor(clients) {
    for (const [name, client] of Object.entries(clients)) {
      this[name] = client;
    }
  }
  
async handle(message) {
  if (message === \\"BAD MESSAGE\\") {
    throw new Error(\\"ERROR\\");
  }
}
};
})())({

}), args: {} })).handle(event);
};",
  "connections.json": {
    "connections": [
      {
        "name": "handle()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "$inflight_init()",
        "source": "root/my_queue/my_queue-SetConsumer-e645076f",
        "target": "root/Handler",
      },
      {
        "name": "setConsumer()",
        "source": "root/my_queue",
        "target": "root/my_queue/my_queue-SetConsumer-e645076f",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": [
      {
        "attrs": {},
        "path": "root/cloud.TestRunner",
        "props": {
          "tests": {},
        },
        "type": "wingsdk.cloud.TestRunner",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-SetConsumer-e645076f",
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/my_queue-setconsumer-e645076f_c8ddc1ce.js",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "wingsdk.cloud.Function",
      },
      {
        "attrs": {},
        "path": "root/my_queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 10,
        },
        "type": "wingsdk.cloud.Queue",
      },
      {
        "attrs": {},
        "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
        "props": {
          "publisher": "\${root/my_queue#attrs.handle}",
          "subscriber": "\${root/my_queue/my_queue-SetConsumer-e645076f#attrs.handle}",
          "subscriptionProps": {
            "batchSize": 1,
          },
        },
        "type": "wingsdk.sim.EventMapping",
      },
    ],
    "sdkVersion": "0.0.0",
  },
  "tree.json": {
    "tree": {
      "children": {
        "Handler": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "An inflight resource",
            "hidden": true,
            "title": "Inflight",
          },
          "id": "Handler",
          "path": "root/Handler",
        },
        "cloud.TestRunner": {
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A suite of APIs for running tests and collecting results.",
            "hidden": true,
            "title": "TestRunner",
          },
          "id": "cloud.TestRunner",
          "path": "root/cloud.TestRunner",
        },
        "my_queue": {
          "children": {
            "my_queue-QueueEventMapping-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-QueueEventMapping-e645076f",
              "path": "root/my_queue/my_queue-QueueEventMapping-e645076f",
            },
            "my_queue-SetConsumer-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "description": "A cloud function (FaaS)",
                "sourceModule": "@winglang/sdk",
                "title": "setConsumer()",
              },
              "id": "my_queue-SetConsumer-e645076f",
              "path": "root/my_queue/my_queue-SetConsumer-e645076f",
            },
            "my_queue-SetConsumerHandler-e645076f": {
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.2.70",
              },
              "display": {
                "hidden": true,
              },
              "id": "my_queue-SetConsumerHandler-e645076f",
              "path": "root/my_queue/my_queue-SetConsumerHandler-e645076f",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.2.70",
          },
          "display": {
            "description": "A distributed message queue",
            "title": "Queue",
          },
          "id": "my_queue",
          "path": "root/my_queue",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.2.70",
      },
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;
