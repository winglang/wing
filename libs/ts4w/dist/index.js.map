{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { std, platform } from \"@winglang/sdk\";\nimport { Construct } from \"constructs\";\n\nexport * as internal from \"./internal\";\n\n/**\n * Properties for a Wing app.\n */\nexport interface AppProps {\n  /**\n   * The name and id of the app.\n   * @default \"main\"\n   */\n  name?: string;\n}\n\n/**\n * Create a Wing app.\n *\n * ```ts\n * import { main } from \"ts4w\";\n * import { cloud } from \"@winglang/sdk\";\n *\n * main(app => {\n *   new cloud.Bucket(app, \"Bucket\");\n * });\n * ```\n *\n * @param fn Define your application using the provided root construct.\n *           Note that this function may be called multiple times when used with `wing test`.\n */\nexport function main(fn: (root: Construct) => void, props: AppProps = {}) {\n  // check if we have everything we need\n  const requiredEnvVars = [\n    \"WING_PLATFORMS\",\n    \"WING_SYNTH_DIR\",\n    \"WING_SOURCE_DIR\",\n    \"WING_IS_TEST\",\n  ];\n  for (const envVar of requiredEnvVars) {\n    if (process.env[envVar] === undefined) {\n      throw new Error(`\\\nMissing environment variable: ${envVar}\nThis is a Wing app and must be run through the Wing CLI (npm install -f winglang).`);\n    }\n  }\n\n  class $Root extends std.Resource {\n    constructor(scope: Construct, id: string) {\n      super(scope, id);\n      fn(this);\n    }\n  }\n\n  const platformPaths = ((s) => (!s ? [] : s.split(\";\")))(\n    process.env.WING_PLATFORMS\n  );\n  const outdir = process.env.WING_SYNTH_DIR;\n  const name = props.name ?? \"main\";\n  const rootConstruct = $Root;\n  const isTestEnvironment = process.env.WING_IS_TEST === \"true\";\n  const entrypointDir = process.env.WING_SOURCE_DIR!;\n  const rootId = process.env.WING_ROOT_ID;\n\n  const $PlatformManager = new platform.PlatformManager({ platformPaths });\n  const app = $PlatformManager.createApp({\n    outdir,\n    name,\n    rootConstruct,\n    isTestEnvironment,\n    entrypointDir,\n    rootId,\n  });\n\n  app.synth();\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA8B;AAG9B,eAA0B;AA4BnB,SAAS,KAAK,IAA+B,QAAkB,CAAC,GAAG;AAExE,QAAM,kBAAkB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,aAAW,UAAU,iBAAiB;AACpC,QAAI,QAAQ,IAAI,MAAM,MAAM,QAAW;AACrC,YAAM,IAAI,MAAM,iCACU,MAAM;AAAA,mFAC6C;AAAA,IAC/E;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,eAAI,SAAS;AAAA,IAC/B,YAAY,OAAkB,IAAY;AACxC,YAAM,OAAO,EAAE;AACf,SAAG,IAAI;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,CAAC,MAAO,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,GAAG;AAAA,IAClD,QAAQ,IAAI;AAAA,EACd;AACA,QAAM,SAAS,QAAQ,IAAI;AAC3B,QAAM,OAAO,MAAM,QAAQ;AAC3B,QAAM,gBAAgB;AACtB,QAAM,oBAAoB,QAAQ,IAAI,iBAAiB;AACvD,QAAM,gBAAgB,QAAQ,IAAI;AAClC,QAAM,SAAS,QAAQ,IAAI;AAE3B,QAAM,mBAAmB,IAAI,oBAAS,gBAAgB,EAAE,cAAc,CAAC;AACvE,QAAM,MAAM,iBAAiB,UAAU;AAAA,IACrC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,MAAI,MAAM;AACZ;","names":[]}