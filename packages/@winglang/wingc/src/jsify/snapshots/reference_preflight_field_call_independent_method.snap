---
source: packages/@winglang/wingc/src/jsify/tests.rs
---
## Code

```w

    class Foo {
      arr: Array<str>;
      
      new() {
        this.arr = ["hello", "world"];
      }
    
      inflight method() {
        this.arr.at(1);
      }
    }
    
```

## inflight.Foo-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({  }) {
  class Foo {
    constructor($args) {
      const { $this_arr } = $args;
      this.$this_arr = $this_arr;
    }
    async method() {
      $macros.__Array_at(false, this.$this_arr, 1);
    }
  }
  return Foo;
}
//# sourceMappingURL=inflight.Foo-1.cjs.map
```

## preflight.cjs

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $macros = require("@winglang/sdk/lib/macros");
const $platforms = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLATFORMS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
const $helpers = $stdlib.helpers;
const $extern = $helpers.createExternRequire(__dirname);
const $types = require("./types.cjs");
const $PlatformManager = new $stdlib.platform.PlatformManager({platformPaths: $platforms});
class $Root extends $stdlib.std.Resource {
  constructor($scope, $id) {
    super($scope, $id);
    $helpers.nodeof(this).root.$preflightTypesMap = { };
    let $preflightTypesMap = {};
    $helpers.nodeof(this).root.$preflightTypesMap = $preflightTypesMap;
    class Foo extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
        this.arr = ["hello", "world"];
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.Foo-1.cjs")({
          })
        `;
      }
      _liftedState() {
        return {
          ...(super._liftedState?.() ?? {}),
          $this_arr: $stdlib.core.liftObject(this.arr),
        };
      }
      get _liftMap() {
        return ({
          "method": [
            [this.arr, ["at"]],
          ],
          "$inflight_init": [
            [this.arr, []],
          ],
        });
      }
    }
  }
}
const $APP = $PlatformManager.createApp({ outdir: $outdir, name: "main", rootConstruct: $Root, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] });
$APP.synth();
//# sourceMappingURL=preflight.cjs.map
```

## types.cjs

```js
const std = require("@winglang/sdk").std;
const $types = {};
module.exports = $types;
```

