---
source: packages/@winglang/wingc/src/jsify/tests.rs
---
## Code

```w

    class PreflightC {
      pub inflight bar() {}
    }
    let pc = new PreflightC();

    inflight class InflightC {
      pub foo() {
        pc.bar();
      }
    }

    test "test" {
      let ic = new InflightC();
      ic.foo();
    }
    
```

## inflight.$Closure1-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({ $InflightC }) {
  class $Closure1 {
    constructor($args) {
      const {  } = $args;
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
    async handle() {
      const ic = (await (async () => {const o = new $InflightC(); await o.$inflight_init?.(); return o; })());
      (await ic.foo());
    }
  }
  return $Closure1;
}
//# sourceMappingURL=inflight.$Closure1-1.cjs.map
```

## inflight.InflightC-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({ $pc }) {
  class InflightC {
    async foo() {
      (await $pc.bar());
    }
  }
  return InflightC;
}
//# sourceMappingURL=inflight.InflightC-1.cjs.map
```

## inflight.PreflightC-1.cjs

```js
"use strict";
const $helpers = require("@winglang/sdk/lib/helpers");
const $macros = require("@winglang/sdk/lib/macros");
module.exports = function({  }) {
  class PreflightC {
    async bar() {
    }
  }
  return PreflightC;
}
//# sourceMappingURL=inflight.PreflightC-1.cjs.map
```

## preflight.cjs

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $macros = require("@winglang/sdk/lib/macros");
const $platforms = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLATFORMS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
const $helpers = $stdlib.helpers;
const $extern = $helpers.createExternRequire(__dirname);
const $types = require("./types.cjs");
const $PlatformManager = new $stdlib.platform.PlatformManager({platformPaths: $platforms});
class $Root extends $stdlib.std.Resource {
  constructor($scope, $id) {
    super($scope, $id);
    $helpers.nodeof(this).root.$preflightTypesMap = { };
    let $preflightTypesMap = {};
    $helpers.nodeof(this).root.$preflightTypesMap = $preflightTypesMap;
    class PreflightC extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.PreflightC-1.cjs")({
          })
        `;
      }
      get _liftMap() {
        return ({
          "bar": [
          ],
          "$inflight_init": [
          ],
        });
      }
    }
    class InflightC extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.InflightC-1.cjs")({
            $pc: ${$stdlib.core.liftObject(pc)},
          })
        `;
      }
      get _liftMap() {
        return ({
          "foo": [
            [pc, ["bar"]],
          ],
          "$inflight_init": [
            [pc, []],
          ],
        });
      }
    }
    if ($preflightTypesMap[2]) { throw new Error("InflightC is already in type map"); }
    $preflightTypesMap[2] = InflightC;
    class $Closure1 extends $stdlib.std.AutoIdResource {
      _id = $stdlib.core.closureId();
      constructor($scope, $id, ) {
        super($scope, $id);
        $helpers.nodeof(this).hidden = true;
      }
      static _toInflightType() {
        return `
          require("${$helpers.normalPath(__dirname)}/inflight.$Closure1-1.cjs")({
            $InflightC: ${$stdlib.core.liftObject(InflightC)},
          })
        `;
      }
      get _liftMap() {
        return ({
          "handle": [
            [$helpers.preflightClassSingleton(this, 2), ["foo"]],
            [InflightC, []],
          ],
          "$inflight_init": [
            [$helpers.preflightClassSingleton(this, 2), []],
            [InflightC, []],
          ],
        });
      }
    }
    const pc = new PreflightC(this, "PreflightC");
    globalThis.$ClassFactory.new("@winglang/sdk.std.Test", std.Test, this, "test:test", new $Closure1(this, "$Closure1"));
  }
}
const $APP = $PlatformManager.createApp({ outdir: $outdir, name: "main", rootConstruct: $Root, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] });
$APP.synth();
//# sourceMappingURL=preflight.cjs.map
```

## types.cjs

```js
const std = require("@winglang/sdk").std;
const $types = {};
module.exports = $types;
```

