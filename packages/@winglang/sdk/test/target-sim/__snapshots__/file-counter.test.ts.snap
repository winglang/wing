// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`can create sequential files in a bucket 1`] = `
{
  ".wing/consumer0_c8a319bc.cjs": ""use strict";
var $handler = undefined;
exports.handler = async function(event) {
  $handler = $handler ?? ((await (async () => {
  const $func = async (ctx, event) => {
            const batchItemFailures = [];
            const eventWithMessages = event;
            if (eventWithMessages.messages) {
                for (const $message of eventWithMessages.messages) {
                    try {
                        await ctx.handler($message.payload);
                    }
                    catch (error) {
                        batchItemFailures.push($message);
                    }
                }
            }
            else {
                throw new Error('No "messages" field in event.');
            }
            return batchItemFailures.length > 0
                ? batchItemFailures
                : undefined;
        }
  const $ctx = {
  handler: (await (async () => {
  const $func = async (ctx, event) => {
            let next = await ctx.counter.inc();
            let key = "file-" + next + ".txt";
            await ctx.bucket.put(key, event);
          }
  const $ctx = {
  counter: 
(await (async () => {
  const klass = (function() {
  class CounterClient {
    constructor({ $handle }) {
      const simulatorUrl = process.env.WING_SIMULATOR_URL;
      if (!simulatorUrl) {
        throw new Error("Missing environment variable: WING_SIMULATOR_URL");
      }
      const caller = process.env.WING_SIMULATOR_CALLER;
      if (!caller) {
        throw new Error("Missing environment variable: WING_SIMULATOR_CALLER");
      }
      this.backend = require("@winglang/sdk/lib/simulator/client").makeSimulatorClient(simulatorUrl, $handle, caller);
    }
    async $inflight_init() {}
    async inc(...args) { return this.backend.call("inc", args); }
async dec(...args) { return this.backend.call("dec", args); }
async peek(...args) { return this.backend.call("peek", args); }
async set(...args) { return this.backend.call("set", args); }
  }
  return CounterClient;
})();
  const client = new klass({$handle: process.env["RESOURCE_HANDLE_87e2e6cc"]});
  if (client.$inflight_init) { await client.$inflight_init(); }
  return client;
})())
,
bucket: 
(await (async () => {
  const klass = (function() {
  class BucketClient {
    constructor({ $handle }) {
      const simulatorUrl = process.env.WING_SIMULATOR_URL;
      if (!simulatorUrl) {
        throw new Error("Missing environment variable: WING_SIMULATOR_URL");
      }
      const caller = process.env.WING_SIMULATOR_CALLER;
      if (!caller) {
        throw new Error("Missing environment variable: WING_SIMULATOR_CALLER");
      }
      this.backend = require("@winglang/sdk/lib/simulator/client").makeSimulatorClient(simulatorUrl, $handle, caller);
    }
    async $inflight_init() {}
    async put(...args) { return this.backend.put(...args); }
async get(...args) { return this.backend.get(...args); }
async list(...args) { return this.backend.list(...args); }
async delete(...args) { return this.backend.delete(...args); }
async putJson(...args) { return this.backend.putJson(...args); }
async getJson(...args) { return this.backend.getJson(...args); }
async publicUrl(...args) { return this.backend.publicUrl(...args); }
async exists(...args) { return this.backend.exists(...args); }
async tryGet(...args) { return this.backend.tryGet(...args); }
async tryGetJson(...args) { return this.backend.tryGetJson(...args); }
async tryDelete(...args) { return this.backend.tryDelete(...args); }
async signedUrl(...args) { return this.backend.signedUrl(...args); }
async metadata(...args) { return this.backend.metadata(...args); }
async copy(...args) { return this.backend.copy(...args); }
async rename(...args) { return this.backend.rename(...args); }
  }
  return BucketClient;
})();
  const client = new klass({$handle: process.env["BUCKET_HANDLE_5f2a41c8"]});
  if (client.$inflight_init) { await client.$inflight_init(); }
  return client;
})())

  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)())
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)()));
  return await $handler.handle(event);
};",
  ".wing/resource_c81e2103.cjs": "        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = (await (async () => {
  const $func = async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        }
  const $ctx = {
  initial: 1000
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)());
          const noop = { onStop: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === 'onStop') {
            throw Error('Cannot call "onStop"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.onStop();
          $klass = undefined;
        };
        ",
  "connections.json": {
    "connections": [
      {
        "name": "consumer",
        "source": "root/HelloWorld/Queue",
        "sourceOp": "push",
        "target": "root/HelloWorld/Queue/Consumer0",
        "targetOp": "invoke",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Counter",
        "sourceOp": "inc",
        "target": "root/HelloWorld/Counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Counter",
        "sourceOp": "dec",
        "target": "root/HelloWorld/Counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Counter",
        "sourceOp": "peek",
        "target": "root/HelloWorld/Counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Counter",
        "sourceOp": "set",
        "target": "root/HelloWorld/Counter/Resource",
        "targetOp": "call",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Queue/Consumer0",
        "sourceOp": "invoke",
        "target": "root/HelloWorld/Counter",
        "targetOp": "inc",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Queue/Consumer0",
        "sourceOp": "invoke",
        "target": "root/HelloWorld/Bucket",
        "targetOp": "put",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Queue/Consumer0",
        "sourceOp": "invokeAsync",
        "target": "root/HelloWorld/Counter",
        "targetOp": "inc",
      },
      {
        "name": "call",
        "source": "root/HelloWorld/Queue/Consumer0",
        "sourceOp": "invokeAsync",
        "target": "root/HelloWorld/Bucket",
        "targetOp": "put",
      },
    ],
    "version": "connections-0.1",
  },
  "simulator.json": {
    "resources": {
      "root/HelloWorld/Bucket": {
        "addr": "c80e3625bbefd53d8c61fbb978711d410b5f2a41c8",
        "path": "root/HelloWorld/Bucket",
        "props": {
          "forceDestroy": false,
          "initialObjects": {},
          "public": false,
          "topics": {},
        },
        "type": "@winglang/sdk.cloud.Bucket",
      },
      "root/HelloWorld/Bucket/Policy": {
        "addr": "c86eb36bbe6e764a632afaaea5db2d4bd693c92624",
        "path": "root/HelloWorld/Bucket/Policy",
        "props": {
          "principal": "\${wsim#root/HelloWorld/Bucket#attrs.handle}",
          "statements": [],
        },
        "type": "@winglang/sdk.sim.Policy",
      },
      "root/HelloWorld/Counter/Resource": {
        "addr": "c81e2103dbfc2359abccf4774cbfa2f49287e2e6cc",
        "path": "root/HelloWorld/Counter/Resource",
        "policy": [],
        "props": {
          "environmentVariables": {},
          "sourceCodeFile": ".wing/resource_c81e2103.cjs",
          "sourceCodeLanguage": "javascript",
        },
        "type": "@winglang/sdk.sim.Resource",
      },
      "root/HelloWorld/Queue": {
        "addr": "c8de0494647ac0bdaec85a77e2a164cfbcfecc5ca1",
        "path": "root/HelloWorld/Queue",
        "props": {
          "retentionPeriod": 3600,
          "timeout": 30,
        },
        "type": "@winglang/sdk.cloud.Queue",
      },
      "root/HelloWorld/Queue/Consumer0": {
        "addr": "c8a319bcb354a5e6d231ddfa543d3b95df95586b71",
        "deps": [
          "root/HelloWorld/Counter/Resource",
          "root/HelloWorld/Bucket",
        ],
        "path": "root/HelloWorld/Queue/Consumer0",
        "policy": [
          {
            "operation": "inc",
            "resourceHandle": "\${wsim#root/HelloWorld/Counter/Resource#attrs.handle}",
          },
          {
            "operation": "put",
            "resourceHandle": "\${wsim#root/HelloWorld/Bucket#attrs.handle}",
          },
          {
            "operation": "call",
            "resourceHandle": "\${wsim#root/HelloWorld/Counter/Resource#attrs.handle}",
          },
        ],
        "props": {
          "concurrency": 100,
          "environmentVariables": {
            "BUCKET_HANDLE_5f2a41c8": "\${wsim#root/HelloWorld/Bucket#attrs.handle}",
            "RESOURCE_HANDLE_87e2e6cc": "\${wsim#root/HelloWorld/Counter/Resource#attrs.handle}",
          },
          "sourceCodeFile": ".wing/consumer0_c8a319bc.cjs",
          "sourceCodeLanguage": "javascript",
          "timeout": 60000,
        },
        "type": "@winglang/sdk.cloud.Function",
      },
      "root/HelloWorld/Queue/Policy": {
        "addr": "c86b009930462795eeb90e647a56dbfc5356d9ea80",
        "path": "root/HelloWorld/Queue/Policy",
        "props": {
          "principal": "\${wsim#root/HelloWorld/Queue#attrs.handle}",
          "statements": [
            {
              "operation": "invoke",
              "resourceHandle": "\${wsim#root/HelloWorld/Queue/Consumer0#attrs.handle}",
            },
            {
              "operation": "hasAvailableWorkers",
              "resourceHandle": "\${wsim#root/HelloWorld/Queue/Consumer0#attrs.handle}",
            },
          ],
        },
        "type": "@winglang/sdk.sim.Policy",
      },
      "root/HelloWorld/Queue/QueueEventMapping0": {
        "addr": "c80de7940bef4e6ad61443a5ed07362f300a117b29",
        "deps": [
          "root/HelloWorld/Queue/Consumer0",
          "root/HelloWorld/Queue",
          "root/HelloWorld/Queue/Policy",
        ],
        "path": "root/HelloWorld/Queue/QueueEventMapping0",
        "props": {
          "publisher": "\${wsim#root/HelloWorld/Queue#attrs.handle}",
          "subscriber": "\${wsim#root/HelloWorld/Queue/Consumer0#attrs.handle}",
          "subscriptionProps": {
            "batchSize": 1,
          },
        },
        "type": "@winglang/sdk.sim.EventMapping",
      },
    },
    "sdkVersion": "0.0.0",
    "types": {
      "@winglang/sdk.cloud.Api": {
        "className": "Api",
        "sourcePath": "<ABSOLUTE PATH>/api.inflight.js",
      },
      "@winglang/sdk.cloud.Bucket": {
        "className": "Bucket",
        "sourcePath": "<ABSOLUTE PATH>/bucket.inflight.js",
      },
      "@winglang/sdk.cloud.Domain": {
        "className": "Domain",
        "sourcePath": "<ABSOLUTE PATH>/domain.inflight.js",
      },
      "@winglang/sdk.cloud.Endpoint": {
        "className": "Endpoint",
        "sourcePath": "<ABSOLUTE PATH>/endpoint.inflight.js",
      },
      "@winglang/sdk.cloud.Function": {
        "className": "Function",
        "sourcePath": "<ABSOLUTE PATH>/function.inflight.js",
      },
      "@winglang/sdk.cloud.OnDeploy": {
        "className": "OnDeploy",
        "sourcePath": "<ABSOLUTE PATH>/on-deploy.inflight.js",
      },
      "@winglang/sdk.cloud.Queue": {
        "className": "Queue",
        "sourcePath": "<ABSOLUTE PATH>/queue.inflight.js",
      },
      "@winglang/sdk.cloud.Schedule": {
        "className": "Schedule",
        "sourcePath": "<ABSOLUTE PATH>/schedule.inflight.js",
      },
      "@winglang/sdk.cloud.Secret": {
        "className": "Secret",
        "sourcePath": "<ABSOLUTE PATH>/secret.inflight.js",
      },
      "@winglang/sdk.cloud.Service": {
        "className": "Service",
        "sourcePath": "<ABSOLUTE PATH>/service.inflight.js",
      },
      "@winglang/sdk.cloud.Topic": {
        "className": "Topic",
        "sourcePath": "<ABSOLUTE PATH>/topic.inflight.js",
      },
      "@winglang/sdk.cloud.Website": {
        "className": "Website",
        "sourcePath": "<ABSOLUTE PATH>/website.inflight.js",
      },
      "@winglang/sdk.sim.Container": {
        "className": "Container",
        "sourcePath": "<ABSOLUTE PATH>/container.inflight.js",
      },
      "@winglang/sdk.sim.EventMapping": {
        "className": "EventMapping",
        "sourcePath": "<ABSOLUTE PATH>/event-mapping.inflight.js",
      },
      "@winglang/sdk.sim.Policy": {
        "className": "Policy",
        "sourcePath": "<ABSOLUTE PATH>/policy.inflight.js",
      },
      "@winglang/sdk.sim.Resource": {
        "className": "Resource",
        "sourcePath": "<ABSOLUTE PATH>/resource.inflight.js",
      },
      "@winglang/sdk.sim.State": {
        "className": "State",
        "sourcePath": "<ABSOLUTE PATH>/state.inflight.js",
      },
      "@winglang/sdk.std.TestRunner": {
        "className": "TestRunner",
        "sourcePath": "<ABSOLUTE PATH>/test-runner.inflight.js",
      },
    },
  },
  "tree.json": {
    "tree": {
      "children": {
        "HelloWorld": {
          "children": {
            "Bucket": {
              "children": {
                "Policy": {
                  "constructInfo": {
                    "fqn": "constructs.Construct",
                    "version": "10.3.0",
                  },
                  "display": {
                    "description": "A simulated resource policy",
                    "hidden": true,
                    "title": "Policy",
                  },
                  "id": "Policy",
                  "path": "root/HelloWorld/Bucket/Policy",
                },
              },
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A cloud object store",
                "title": "Bucket",
              },
              "id": "Bucket",
              "path": "root/HelloWorld/Bucket",
            },
            "Counter": {
              "children": {
                "Resource": {
                  "constructInfo": {
                    "fqn": "constructs.Construct",
                    "version": "10.3.0",
                  },
                  "display": {
                    "color": "emerald",
                    "description": "A simulated resource",
                    "hidden": true,
                    "title": "Resource",
                  },
                  "id": "Resource",
                  "path": "root/HelloWorld/Counter/Resource",
                },
              },
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A distributed atomic counter",
                "title": "Counter",
              },
              "id": "Counter",
              "path": "root/HelloWorld/Counter",
            },
            "Queue": {
              "children": {
                "Consumer0": {
                  "constructInfo": {
                    "fqn": "constructs.Construct",
                    "version": "10.3.0",
                  },
                  "display": {
                    "description": "A cloud function (FaaS)",
                    "sourceModule": "@winglang/sdk",
                    "title": "Consumer",
                  },
                  "id": "Consumer0",
                  "path": "root/HelloWorld/Queue/Consumer0",
                },
                "Policy": {
                  "constructInfo": {
                    "fqn": "constructs.Construct",
                    "version": "10.3.0",
                  },
                  "display": {
                    "description": "A simulated resource policy",
                    "hidden": true,
                    "title": "Policy",
                  },
                  "id": "Policy",
                  "path": "root/HelloWorld/Queue/Policy",
                },
                "QueueEventMapping0": {
                  "constructInfo": {
                    "fqn": "constructs.Construct",
                    "version": "10.3.0",
                  },
                  "display": {
                    "hidden": true,
                  },
                  "id": "QueueEventMapping0",
                  "path": "root/HelloWorld/Queue/QueueEventMapping0",
                },
              },
              "constructInfo": {
                "fqn": "constructs.Construct",
                "version": "10.3.0",
              },
              "display": {
                "description": "A distributed message queue",
                "title": "Queue",
              },
              "id": "Queue",
              "path": "root/HelloWorld/Queue",
            },
          },
          "constructInfo": {
            "fqn": "constructs.Construct",
            "version": "10.3.0",
          },
          "display": {},
          "id": "HelloWorld",
          "path": "root/HelloWorld",
        },
      },
      "constructInfo": {
        "fqn": "constructs.Construct",
        "version": "10.3.0",
      },
      "display": {},
      "id": "root",
      "path": "root",
    },
    "version": "tree-0.1",
  },
}
`;
