name: Build

on:
  pull_request_target:
    types:
      - opened
      - synchronize
  push:
    branches:
      - main
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.ref || github.ref }}
  cancel-in-progress: true

env:
  NODEJS_VERSION: "18.x"
  # Testing runs out of memory without this
  NODE_OPTIONS: "--max-old-space-size=4096"
  PROJEN_BUMP_VERSION: "0.0.0-dev.${{ github.run_id }}.${{ github.run_attempt }}"

jobs:
  prepare:
    name: "Prepare"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.info.outputs.version || steps.pr_info.outputs.version }}
    steps:
      - name: Checkout
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: Get tags
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        run: git fetch --unshallow --tags

      - name: Install Dependencies
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        uses: bahmutov/npm-install@v1
        with:
          install-command: npm ci --ignore-scripts

      - name: Get Version Info
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        id: info
        env:
          # Needed for `auto` cli
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "version=$(npx auto release -d | grep 'Would have created a release on GitHub for version: ' | sed 's/.*version: //')" >> $GITHUB_OUTPUT
          npx auto changelog -d | tail -n +2 > CHANGELOG.md
          cat CHANGELOG.md >> $GITHUB_STEP_SUMMARY

      # newlines are easier to handle in single-line yaml
      - run: "echo '\n' >> CHANGELOG.md"
        if: github.event_name == 'push' && github.repository == 'winglang/wing'

      - name: PR Version Info
        id: pr_info
        if: github.event_name != 'push' || github.repository != 'winglang/wing'
        run: |
          echo "version=0.0.0-dev.${{ github.run_id }}.${{ github.run_attempt }}" >> $GITHUB_OUTPUT
          echo "Pull Request" > CHANGELOG.md
          cat CHANGELOG.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: CHANGELOG.md

      - name: Compress Docs
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        run: tar -czvf docs.tgz docs/*

      - name: Upload Docs
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs.tgz

  build-wasm:
    name: "Non-Native Build"
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: prepare
    env:
      PROJEN_BUMP_VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install wasi-sdk
        run: scripts/setup_wasi.sh

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1

      - name: Lint Nx
        run: npx nx workspace-lint

      - name: Build
        uses: MansaGroup/nrwl-nx-action@v2
        with:
          targets: "build"
          all: true
          exclude: "wing-language-server,vscode-wing"
          args: "--configuration=release --output-style=stream --verbose"

      # wingc require wingsdk to be built first in order to run
      - name: Test
        uses: MansaGroup/nrwl-nx-action@v2
        with:
          targets: "test"
          all: true
          exclude: "hangar"
          args: "--configuration=release --output-style=stream --verbose"

      - name: Create NPM packages
        uses: MansaGroup/nrwl-nx-action@v2
        with:
          targets: "package"
          projects: "winglang,sdk"
          args: "--configuration=release --output-style=stream --verbose"

      - name: Upload Wing CLI
        uses: actions/upload-artifact@v2
        with:
          name: wing
          path: apps/wing/*.tgz

      - name: Upload WingSDK
        uses: actions/upload-artifact@v2
        with:
          name: wingsdk
          path: libs/wingsdk/*.tgz

      - name: Upload WingC Binary
        uses: actions/upload-artifact@v2
        with:
          name: wingc
          path: target/wasm32-wasi/release/wingc.wasm

      - name: "Publish Wing Playground"
        if: github.event_name == 'push' && github.repository == 'winglang/wing'
        uses: amondnet/vercel-action@v25.1.0
        with:
          github-token: ${{ secrets.PROJEN_GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN_WING_PLAYGROUND }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WING_PLAYGROUND }}
          working-directory: apps/wing-playground/dist
          github-comment: false
          vercel-args: "--prod "

  build-native:
    needs: prepare
    env:
      PROJEN_BUMP_VERSION: ${{ needs.prepare.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: x64
          - os: ubuntu-latest
            arch: x64
          # TODO libnode build currently invalid for the following configs
          # - os: macos-latest
          #   arch: arm64
          # - os: ubuntu-latest
          #   arch: x86
    runs-on: ${{ matrix.os }}
    name: "Native Build"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1
        with:
          # Don't need to install sub-project dependencies
          install-command: npm install --ignore-scripts

      - name: Lint Nx
        run: npx nx workspace-lint

      - name: Build
        uses: MansaGroup/nrwl-nx-action@v2
        with:
          targets: "build-native"
          projects: "wing-language-server"
          args: "--configuration=release --output-style=stream --verbose"

      - name: Test
        uses: MansaGroup/nrwl-nx-action@v2
        with:
          targets: "test"
          projects: "wingii"
          args: "--configuration=release --output-style=stream --verbose"

      - name: Upload Wing Language Server
        uses: actions/upload-artifact@v2
        with:
          name: wing-language-server-${{ matrix.os }}-${{ matrix.arch }}
          path: target/release/wing-language-server

  e2e:
    name: "E2E Testing"
    needs:
      - build-wasm
    strategy:
      fail-fast: true
      matrix:
        runner:
          - ubuntu-latest
          # - macos-latest
        node: [18, 19]
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: tools/hangar
          install-command: npm ci --ignore-scripts

      - name: Run E2E Tests
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export HANGAR_WING_TGZ="$(pwd)/$(find wing/*.tgz)"
          export HANGAR_WINGSDK_TGZ="$(pwd)/$(find wingsdk/*.tgz)"
          cd tools/hangar
          HANGAR_WING_TGZ=$HANGAR_WING_TGZ HANGAR_WINGSDK_TGZ=$HANGAR_WINGSDK_TGZ npm run test

  build-vscode:
    name: "Build VSCode Extension"
    needs:
      - prepare
      - build-native
      - build-wasm
    env:
      PROJEN_BUMP_VERSION: ${{ needs.prepare.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Prepare language server binaries
        run: cp -r wing-language-server-* ./apps/vscode-wing/resources

      - name: Prepare WingSDK files
        run: |
          mkdir -p apps/vscode-wing/resources/wingsdk
          tar -xzf wingsdk/*.tgz -C apps/vscode-wing/resources/wingsdk --strip-components=1 package/package.json package/.jsii

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1

      - name: Build
        uses: MansaGroup/nrwl-nx-action@v2
        with:
          # build-multi assumes all required resources are present
          targets: "build-multi"
          projects: "vscode-wing"
          args: "--configuration=release --output-style=stream --verbose"

      - name: Upload extension
        uses: actions/upload-artifact@v2
        with:
          name: vscode-wing
          path: apps/vscode-wing/vscode-wing.vsix

  build:
    needs:
      - build-native
      - build-wasm
      - build-vscode
      - e2e
    runs-on: ubuntu-latest
    steps:
      - name: Build Validation
        run: echo "Build Successful"

  publish:
    name: Publish
    if: github.event_name == 'push' && github.repository == 'winglang/wing'
    needs:
      - build
      - prepare
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Publish Extension to Visual Studio Marketplace
        uses: "HaaLeo/publish-vscode-extension@v1"
        with:
          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
          registryUrl: "https://marketplace.visualstudio.com"
          extensionFile: "vscode-wing/vscode-wing.vsix"

      - name: Login to Private NPM registry
        run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Publish Wing
        working-directory: wing
        run: npm publish *.tgz --access public

      - name: Publish Wing SDK
        working-directory: wingsdk
        run: npm publish *.tgz --access public

      - name: Rename Docs
        run: mv docs "docs-${{ needs.prepare.outputs.version }}.tgz"

      - name: Compute Checksums
        run: |
          mkdir dist
          mv ./*/*.vsix ./dist
          mv ./*/*.tgz ./dist
          mv ./*/*.wasm ./dist
          cd dist

          cp ../changelog/CHANGELOG.md ../CHANGELOG.md
          echo '## SHA-1 Checksums' >> ../CHANGELOG.md
          echo '```' >> ../CHANGELOG.md
          sha1sum --binary * >> ../CHANGELOG.md
          echo '```' >> ../CHANGELOG.md
          cat ../CHANGELOG.md

      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.PROJEN_GITHUB_TOKEN }}"
          tag: "v${{ needs.prepare.outputs.version }}"

      - name: Cut Development Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Wing ${{ needs.prepare.outputs.version }}"
          tag_name: "v${{ needs.prepare.outputs.version }}"
          body_path: CHANGELOG.md
          files: dist/*
          token: ${{ secrets.PROJEN_GITHUB_TOKEN }}
