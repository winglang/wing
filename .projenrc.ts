import { MonorepoProject } from "@skyrpex/wingen";

const PNPM_VERSION = "8.15.1";
const NODE_VERSION = "20.17.0";

///////////////////////////////////////////////////////////////////////////////
const monorepo = new MonorepoProject({
  name: "@winglang/monorepo",
  devDeps: [
    "@skyrpex/wingen",
    "@winglang/compatibility-spy",
    "bump-pack",
    "generate-workspace",
  ],
});

///////////////////////////////////////////////////////////////////////////////
monorepo
  .tryFindObjectFile("pnpm-workspace.yaml")
  ?.addToArray(
    "packages",
    "packages/*",
    "packages/@wingcloud/*",
    "packages/@winglang/*",
    "packages/@winglibs/*",
    "tools/*",
    "docs",
    "docs/docs",
    "wing-console/packages/*",
    "wing-console/console/*",
    "wing-console/tools/*",
    "tests/*",
    "packages/@winglang/jsii-docgen/test/__fixtures__/**",
  );

///////////////////////////////////////////////////////////////////////////////
monorepo.tasks.removeTask("build");
const buildTask = monorepo.addTask("build");
buildTask.spawn(monorepo.defaultTask!);
buildTask.exec("turbo compile post-compile lint eslint test package");
monorepo.tasks.removeTask("compile");
const compileTask = monorepo.addTask("compile");
compileTask.exec("turbo compile");
monorepo.testTask.reset("turbo lint eslint test");
monorepo.devTask.reset();
monorepo.addScript("package", "turbo package");
monorepo.addScript(
  "package:ci",
  "turbo package --color && tar -czvf dist/docs.tgz docs/*",
);
monorepo.addScript(
  "test:ci",
  "turbo default --color --concurrency 1 && turbo compile post-compile lint eslint test test:playwright --color --filter=!hangar",
);
monorepo.addScript("docs", "./scripts/docsite.sh");
monorepo.addScript("install", "bash scripts/setup_wasi.sh");
monorepo.addScript("postinstall", "link-bundles && generate-workspace");
monorepo.addScript(
  "wing",
  "turbo compile -F winglang --output-logs=new-only && ./packages/winglang/bin/wing",
);

///////////////////////////////////////////////////////////////////////////////
monorepo.addFields({
  packageManager: `pnpm@${PNPM_VERSION}`,
  volta: {
    node: NODE_VERSION,
    pnpm: PNPM_VERSION,
  },
  pnpm: {
    overrides: {
      mime: "^3.0.0",
      "axios@>=0.8.1 <0.28.0": ">=0.28.0",
    },
    patchedDependencies: {
      "wasi-js@1.7.3": "patches/wasi-js@1.7.3.patch",
      "mime@3.0.0": "patches/mime@3.0.0.patch",
      "protobufjs@7.2.5": "patches/protobufjs@7.2.5.patch",
      "jsii@5.5.4": "patches/jsii@5.5.4.patch",
    },
  },
});

///////////////////////////////////////////////////////////////////////////////
monorepo.addGitIgnore("node_modules/");
monorepo.addGitIgnore(".DS_Store");
monorepo.addGitIgnore(".pnpm-store/");
// Terraform state files
monorepo.addGitIgnore("*.tfstate");
monorepo.addGitIgnore("*.tfstate.*");
// Generated wing output
monorepo.addGitIgnore("*.w.out/");
// Generated wingc .jsii binary cache
monorepo.addGitIgnore("**/*.jsii.speedy");
// cargo output
// will have compiled files and executables from cargo
monorepo.addGitIgnore("debug/");
monorepo.addGitIgnore("target/");
// Packaged npm files
monorepo.addGitIgnore("/dist/");
// These are backup files generated by rustfmt
monorepo.addGitIgnore("**/*.rs.bk");
// MSVC Windows builds of rustc generate these, which store debugging information
monorepo.addGitIgnore("*.pdb");
// turbo
monorepo.addGitIgnore(".turbo/");
// history
monorepo.addGitIgnore(".history/");

///////////////////////////////////////////////////////////////////////////////

monorepo.synth();
