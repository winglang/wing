// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > clients/Foo.inflight.js 1`] = `
"class Foo  {
constructor({ _sum_str }) {

  this._sum_str = _sum_str;
}
}
exports.Foo = Foo;"
`;

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"json\\", plugins: $plugins });
  
  class Foo extends $stdlib.core.Resource {
  	constructor(scope, id, ) {
  	super(scope, id);
  {
    this._sum_str = \\"wow!\\";
  }
  }
  	
  	_toInflight() {
  	const _sum_str_client = this._lift(this._sum_str);
  	const self_client_path = \\"./clients/Foo.inflight.js\\".replace(/\\\\\\\\/g, \\"/\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).Foo({_sum_str: \${_sum_str_client}}))\`);
  }
  }
  
  const json_number = 123;
  const json_bool = true;
  const json_array = [1, 2, 3];
  const json_obj = Object.freeze({\\"boom\\":123});
  const json_mut_obj = {\\"hello\\":123,\\"world\\":[1, \\"cat\\", 3],\\"boom boom\\":{\\"hello\\":1233}};
  const message = \\"Coolness\\";
  ((obj, args) => { obj[args[0]] = args[1]; })(json_mut_obj, [\\"hello\\",message]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((json_mut_obj)[\\"hello\\"] === message)'\`)})(((json_mut_obj)[\\"hello\\"] === message))};
  const some_number = 999;
  const jj = some_number;
  const jj1 = Object.freeze({\\"foo\\":some_number});
  const jj2 = [some_number, {\\"bar\\":some_number}];
  const get_str =  () =>  {
  	{
    return \\"hello\\";
  }
  };
  const jj3 = (get_str());
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(jj3 === \\"hello\\")'\`)})((jj3 === \\"hello\\"))};
  const f = new Foo(this,\\"Foo\\");
  const jj4 = f._sum_str;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(jj4 === \\"wow!\\")'\`)})((jj4 === \\"wow!\\"))};
  const some_json = {\\"x\\":some_number};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((some_json)[\\"x\\"] === some_number)'\`)})(((some_json)[\\"x\\"] === some_number))};
  ((obj, args) => { obj[args[0]] = args[1]; })(some_json, [\\"x\\",111]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((some_json)[\\"x\\"] === 111)'\`)})(((some_json)[\\"x\\"] === 111))};
  const x = Object.freeze({\\"cool\\":\\"beans\\"});
  const nested_json = {\\"a\\":\\"hello\\",\\"b\\":{\\"c\\":\\"world\\",\\"d\\":{\\"foo\\":\\"foo\\",\\"bar\\":123}}};
  ((obj, args) => { obj[args[0]] = args[1]; })(((nested_json)[\\"b\\"])[\\"d\\"], [\\"foo\\",\\"tastic\\"]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((((nested_json)[\\"b\\"])[\\"d\\"])[\\"foo\\"] === \\"tastic\\")'\`)})(((((nested_json)[\\"b\\"])[\\"d\\"])[\\"foo\\"] === \\"tastic\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((((nested_json)[\\"b\\"])[\\"d\\"])[\\"bar\\"] === 123)'\`)})(((((nested_json)[\\"b\\"])[\\"d\\"])[\\"bar\\"] === 123))};
  const b = \\"buckle\\";
  const arr = [1, 2, b, \\"my\\", \\"shoe\\", 3, 4, [\\"shut\\", \\"the\\", \\"door\\"]];
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr)[0] === 1)'\`)})(((arr)[0] === 1))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr)[2] === b)'\`)})(((arr)[2] === b))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(((arr)[7])[0] === \\"shut\\")'\`)})((((arr)[7])[0] === \\"shut\\"))};
  Object.freeze({\\"a\\":[1, 2, \\"world\\"],\\"b\\":[1, 2, \\"world\\"]});
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `"pass â”€ json.w (no tests)"`;
