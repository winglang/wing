// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > clients/Foo.inflight.js 1`] = `
"class Foo  {
constructor({ data }) {

  this.data = data;
}
}
exports.Foo = Foo;"
`;

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"structs\\", plugins: $plugins });
  
  class Foo extends $stdlib.core.Resource {
  	constructor(scope, id, b) {
  	super(scope, id);
  {
    this.data = b;
  }
  }
  	
  	_toInflight() {
  	const data_client = this._lift(this.data);
  	const self_client_path = \\"./clients/Foo.inflight.js\\".replace(/\\\\\\\\/g, \\"/\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).Foo({data: \${data_client}}))\`);
  }
  }
  
  const x = {
  \\"field0\\": \\"Sup\\",}
  ;
  const y = {
  \\"field0\\": \\"hello\\",
  \\"field1\\": 1,
  \\"field2\\": \\"world\\",
  \\"field3\\": {
  \\"field0\\": \\"foo\\",}
  ,}
  ;
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `"pass â”€ structs.w (no tests)"`;
