// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {
      "root": {
        "Default": {
          "cloud.TestRunner": {
            "TestFunctionArns": "WING_TEST_RUNNER_FUNCTION_ARNS",
          },
        },
      },
    },
  },
  "output": {
    "WING_TEST_RUNNER_FUNCTION_ARNS": {
      "value": "[]",
    },
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_cloudFunction_IamRole_DAEC3578": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/IamRole",
            "uniqueId": "root_cloudFunction_IamRole_DAEC3578",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_cloudFunction_IamRolePolicy_AAE6C0C0": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/IamRolePolicy",
            "uniqueId": "root_cloudFunction_IamRolePolicy_AAE6C0C0",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/IamRolePolicyAttachment",
            "uniqueId": "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_lambda_function": {
      "root_cloudFunction_6A57BA0A": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/Default",
            "uniqueId": "root_cloudFunction_6A57BA0A",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "cloud-Function-c8d2eca1",
          },
        },
        "function_name": "cloud-Function-c8d2eca1",
        "handler": "index.handler",
        "publish": true,
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "s3_key": "\${aws_s3_object.root_cloudFunction_S3Object_C8435368.key}",
        "timeout": 30,
        "vpc_config": {
          "security_group_ids": [],
          "subnet_ids": [],
        },
      },
    },
    "aws_s3_bucket": {
      "root_cloudFunction_Code_2F6A7948": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/Code",
            "uniqueId": "root_cloudFunction_Code_2F6A7948",
          },
        },
        "bucket_prefix": "code-c8d4206f-",
      },
    },
    "aws_s3_object": {
      "root_cloudFunction_S3Object_C8435368": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/S3Object",
            "uniqueId": "root_cloudFunction_S3Object_C8435368",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "key": "<ASSET_KEY>",
        "source": "<ASSET_SOURCE>",
      },
    },
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";
const $wing_is_test = process.env.WING_IS_TEST === \\"true\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $AppBase = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class $Root extends $stdlib.core.Resource {
  constructor(scope, id) {
    super(scope, id);
    const words = Object.freeze([\\"wing\\", \\"lang\\", \\"dang\\"]);
    const unique_numbers = Object.freeze(new Set([1, 2, 3]));
    for (const word of words) {
      for (const number of unique_numbers) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: '(number > 0)'\`)})((number > 0))};
        {console.log(\`\${word}: \${number}\`)};
      }
    }
    let i = 0;
    for (const word of words) {
      i = (i + 1);
      let pre_break_hits = 0;
      let post_break_hits = 0;
      for (const number of unique_numbers) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: '(number > 0)'\`)})((number > 0))};
        {console.log(\`\${word}: \${number}\`)};
        pre_break_hits = (pre_break_hits + 1);
        if ((number === 2)) {
          break;
        }
        post_break_hits = (post_break_hits + 1);
      }
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(pre_break_hits === 2)'\`)})((pre_break_hits === 2))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(post_break_hits === 1)'\`)})((post_break_hits === 1))};
    }
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i === 3)'\`)})((i === 3))};
    let j = 0;
    for (const word of words) {
      j = (j + 1);
      let pre_continue_hits = 0;
      let post_continue_hits = 0;
      for (const number of unique_numbers) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: '(number > 0)'\`)})((number > 0))};
        {console.log(\`\${word}: \${number}\`)};
        pre_continue_hits = (pre_continue_hits + 1);
        if ((number > 0)) {
          continue;
        }
        post_continue_hits = (post_continue_hits + 1);
      }
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(pre_continue_hits === 3)'\`)})((pre_continue_hits === 3))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(post_continue_hits === 0)'\`)})((post_continue_hits === 0))};
    }
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(j === 3)'\`)})((j === 3))};
    {console.log(\\"---\\\\nfor x in 0..0 { ... }\\")};
    for (const x of $stdlib.std.Range.of(0, 0, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
    }
    {console.log(\\"there's no value to iterate\\")};
    {console.log(\\"---\\\\nfor x in 0..=0 { ... }\\")};
    for (const x of $stdlib.std.Range.of(0, 0, true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === 0)'\`)})((x === 0))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..2 { ... }\\")};
    for (const x of $stdlib.std.Range.of(0, 2, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x < 2)'\`)})((x < 2))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..=2 { ... }\\")};
    for (const x of $stdlib.std.Range.of(0, 2, true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 2)'\`)})((x <= 2))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 2..0 { ... }\\")};
    for (const x of $stdlib.std.Range.of(2, 0, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 2)'\`)})((x <= 2))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x > 0)'\`)})((x > 0))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 2..=0 { ... }\\")};
    for (const x of $stdlib.std.Range.of(2, 0, true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 2)'\`)})((x <= 2))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..-2 { ... }\\")};
    for (const x of $stdlib.std.Range.of(0, (-2), false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 0)'\`)})((x <= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x > (-2))'\`)})((x > (-2)))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..=-2 { ... }\\")};
    for (const x of $stdlib.std.Range.of(0, (-2), true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 0)'\`)})((x <= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x > (-3))'\`)})((x > (-3)))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in -2..0 { ... }\\")};
    for (const x of $stdlib.std.Range.of((-2), 0, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= (-2))'\`)})((x >= (-2)))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x < 0)'\`)})((x < 0))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in -2..=0 { ... }\\")};
    for (const x of $stdlib.std.Range.of((-2), 0, true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= (-2))'\`)})((x >= (-2)))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 0)'\`)})((x <= 0))};
      {console.log(\`\${x}\`)};
    }
    const z = 2;
    {console.log(\\"---\\\\nfor x in 0..z { ... } <=> x = 2\\")};
    for (const x of $stdlib.std.Range.of(0, z, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x < 2)'\`)})((x < 2))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..=z { ... } <=> x = 2\\")};
    for (const x of $stdlib.std.Range.of(0, z, true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 2)'\`)})((x <= 2))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in z..0 { ... } <=> x = 2\\")};
    for (const x of $stdlib.std.Range.of(z, 0, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 2)'\`)})((x <= 2))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x > 0)'\`)})((x > 0))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..(z*2) { ... } <=> x = 2\\")};
    for (const x of $stdlib.std.Range.of(0, (z * 2), false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x < 4)'\`)})((x < 4))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in 0..=(z*2) { ... } <=> x = 2\\")};
    for (const x of $stdlib.std.Range.of(0, (z * 2), true)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x >= 0)'\`)})((x >= 0))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 4)'\`)})((x <= 4))};
      {console.log(\`\${x}\`)};
    }
    {console.log(\\"---\\\\nfor x in (z*2)..0 { ... } <=> x = 2\\")};
    for (const x of $stdlib.std.Range.of((z * 2), 0, false)) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 4)'\`)})((x <= 4))};
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x > 0)'\`)})((x > 0))};
      {console.log(\`\${x}\`)};
    }
    this.node.root.newAbstract(\\"@winglang/sdk.cloud.Function\\",this,\\"cloud.Function\\",new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
      code: $stdlib.core.NodeJsCode.fromFile(require.resolve(\\"./proc.afc6fe59bb6cdbd81e9208755ab2c9288766e754ea8cfb86c9310de61739c683/index.js\\".replace(/\\\\\\\\/g, \\"/\\"))),
      bindings: {
      }
    })
    );
  }
}
class $App extends $AppBase {
  constructor() {
    super({ outdir: $outdir, name: \\"for_loop\\", plugins: $plugins, isTestEnvironment: $wing_is_test });
    if ($wing_is_test) {
      new $Root(this, \\"env0\\");
      const $test_runner = this.testRunner;
      const $tests = $test_runner.findTests();
      for (let $i = 1; $i < $tests.length; $i++) {
        new $Root(this, \\"env\\" + $i);
      }
    } else {
      new $Root(this, \\"Default\\");
    }
  }
}
new $App().synth();
"
`;

exports[`wing compile -t tf-aws > proc.afc6fe59bb6cdbd81e9208755ab2c9288766e754ea8cfb86c9310de61739c683/index.js 1`] = `
"async handle(event) {
  const {  } = this;
  for (const x of ((s,e,i) => { function* iterator(start,end,inclusive) { let i = start; let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end; while (i < limit) yield i++; while (i > limit) yield i--; }; return iterator(s,e,i); })(0,10,false)) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x <= 0)'\`)})((x <= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x > 10)'\`)})((x > 10))};
    {console.log(\`\${x}\`)};
  }
}
"
`;

exports[`wing test -t sim > stdout 1`] = `
"- Compiling to sim...
wing: 1
wing: 2
wing: 3
lang: 1
lang: 2
lang: 3
dang: 1
dang: 2
dang: 3
wing: 1
wing: 2
lang: 1
lang: 2
dang: 1
dang: 2
wing: 1
wing: 2
wing: 3
lang: 1
lang: 2
lang: 3
dang: 1
dang: 2
dang: 3
---
for x in 0..0 { ... }
there's no value to iterate
---
for x in 0..=0 { ... }
0
---
for x in 0..2 { ... }
0
1
---
for x in 0..=2 { ... }
0
1
2
---
for x in 2..0 { ... }
2
1
---
for x in 2..=0 { ... }
2
1
0
---
for x in 0..-2 { ... }
0
-1
---
for x in 0..=-2 { ... }
0
-1
-2
---
for x in -2..0 { ... }
-2
-1
---
for x in -2..=0 { ... }
-2
-1
0
---
for x in 0..z { ... } <=> x = 2
0
1
---
for x in 0..=z { ... } <=> x = 2
0
1
2
---
for x in z..0 { ... } <=> x = 2
2
1
---
for x in 0..(z*2) { ... } <=> x = 2
0
1
2
3
---
for x in 0..=(z*2) { ... } <=> x = 2
0
1
2
3
4
---
for x in (z*2)..0 { ... } <=> x = 2
4
3
2
1
✔ Compiling to sim...
pass ─ for_loop.wsim (no tests)"
`;
