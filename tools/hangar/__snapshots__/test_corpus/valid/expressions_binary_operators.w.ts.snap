// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"expressions_binary_operators\\", plugins: $plugins });
  
  const x = (-1);
  const y = (2 * x);
  const z = ((x + y) - 1);
  const xyz = (((y * y) / (x * x)) * z);
  const xf = 1;
  const yf = ((-20.22) * xf);
  const zf = ((xf + yf) - (-0.01));
  const fxzy = (5 ** (2 ** 3));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(fxzy === 390625)'\`)})((fxzy === 390625))};
  const xyzf = Math.trunc(501 / (99 + 1));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(xyzf === 5)'\`)})((xyzf === 5))};
  const xyznf = Math.trunc((-501) / (99 + 1));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(xyznf === (-5))'\`)})((xyznf === (-5)))};
  const xyznfj = Math.trunc(501.9 / ((-99.1) - 0.91));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(xyznfj === (-5))'\`)})((xyznfj === (-5)))};
  const xynfj = Math.trunc((-501.9) / ((-99.1) - 0.91));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(xynfj === 5)'\`)})((xynfj === 5))};
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `"pass â”€ expressions_binary_operators.w (no tests)"`;
