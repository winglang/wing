// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";
const $wing_test = process.env.WING_TEST === \\"true\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $AppBase = __app(process.env.WING_TARGET);

class $Root extends $stdlib.core.Resource {
	constructor(scope, id) {
		super(scope, id);
		while (false) {
  const x = 1;
}
		const y = 123;
		while ((y < 0)) {
  const x = 1;
}
		let z = 0;
		while (true) {
  z = (z + 1);
  if ((z > 2)) {
    break;
  }
}
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(z === 3)'\`)})((z === 3))};
		while (true) {
  break;
}
		let v = 0;
		let i = 0;
		while ((i < 10)) {
  i = (i + 1);
  if (((i % 2) === 0)) {
    continue;
  }
  v = (v + 1);
}
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(i === 10)'\`)})((i === 10))};
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(v === 5)'\`)})((v === 5))};
	}
}

class $App extends $AppBase {
	constructor() {
		super({ outdir: $outdir, name: \\"while\\", plugins: $plugins });
		const $root = new $Root(this, \\"Default\\");
		if ($wing_test) {
			const $test_runner = this.node.findChild(\\"cloud.TestRunner\\");
			const $tests = $test_runner.findTests();
			for (let $i = 0; $i < $tests.length; $i++) {
				new $Root(this, \\"env\\" + $i);
			}
		}
	}
}

new $App().synth();"
`;

exports[`wing test -t sim > stdout 1`] = `"pass â”€ while.w (no tests)"`;
