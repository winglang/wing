// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_test_IamRole_6CDC2D16": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRole",
            "uniqueId": "root_test_IamRole_6CDC2D16",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_test_IamRolePolicy_474A6820": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRolePolicy",
            "uniqueId": "root_test_IamRolePolicy_474A6820",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_test_IamRolePolicyAttachment_1102A28A": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRolePolicyAttachment",
            "uniqueId": "root_test_IamRolePolicyAttachment_1102A28A",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.name}",
      },
    },
    "aws_lambda_function": {
      "root_test_AAE85061": {
        "//": {
          "metadata": {
            "path": "root/Default/test/Default",
            "uniqueId": "root_test_AAE85061",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "test-c8b6eece",
          },
        },
        "function_name": "test-c8b6eece",
        "handler": "index.handler",
        "publish": true,
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_test_Code_2D131EC2.bucket}",
        "s3_key": "\${aws_s3_object.root_test_S3Object_A16CD789.key}",
        "timeout": 30,
      },
    },
    "aws_s3_bucket": {
      "root_test_Code_2D131EC2": {
        "//": {
          "metadata": {
            "path": "root/Default/test/Code",
            "uniqueId": "root_test_Code_2D131EC2",
          },
        },
        "bucket_prefix": "code-c883c33b-",
      },
    },
    "aws_s3_object": {
      "root_test_S3Object_A16CD789": {
        "//": {
          "metadata": {
            "path": "root/Default/test/S3Object",
            "uniqueId": "root_test_S3Object_A16CD789",
          },
        },
        "bucket": "\${aws_s3_bucket.root_test_Code_2D131EC2.bucket}",
        "key": "<ASSET_KEY>",
      },
    },
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"capture_containers\\", plugins: $plugins });
  
  const arr = Object.freeze([\\"hello\\", \\"world\\"]);
  const my_set = Object.freeze(new Set([\\"my\\", \\"my\\", \\"set\\"]));
  const my_map = Object.freeze({\\"hello\\":123,\\"world\\":999});
  const arr_of_map = Object.freeze([Object.freeze({\\"bang\\":123})]);
  const j = Object.freeze({\\"a\\":\\"hello\\",\\"b\\":\\"world\\"});
  const handler = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.dc7e5dc23da309970778fe7db4c795e3a6ae63c0d0ddc5e1780d4e2daadf67e1/index.js\\").replace(/\\\\\\\\/g, \\"/\\")),
    bindings: {
      arr: {
        obj: arr,
        ops: []
      },
      arr_of_map: {
        obj: arr_of_map,
        ops: []
      },
      j: {
        obj: j,
        ops: []
      },
      my_map: {
        obj: my_map,
        ops: []
      },
      my_set: {
        obj: my_set,
        ops: []
      },
    }
  });
  this.node.root.newAbstract(\\"@winglang/sdk.cloud.Function\\",this,\\"test\\",handler);
}
}
new MyApp().synth();"
`;

exports[`wing compile -t tf-aws > proc.dc7e5dc23da309970778fe7db4c795e3a6ae63c0d0ddc5e1780d4e2daadf67e1/index.js 1`] = `
"async handle(s) { const { arr, arr_of_map, j, my_map, my_set } = this; {
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((await arr.at(0)) === \\"hello\\")'\`)})(((await arr.at(0)) === \\"hello\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((await arr.at(1)) === \\"world\\")'\`)})(((await arr.at(1)) === \\"world\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr.length === 2)'\`)})((arr.length === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(await my_set.has(\\"my\\"))'\`)})((await my_set.has(\\"my\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(my_set.size === 2)'\`)})((my_set.size === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(\\"world\\" in (my_map))'\`)})((\\"world\\" in (my_map)))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(Object.keys(my_map).length === 2)'\`)})((Object.keys(my_map).length === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(\\"bang\\" in ((await arr_of_map.at(0))))'\`)})((\\"bang\\" in ((await arr_of_map.at(0)))))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((j)[\\"b\\"] === \\"world\\")'\`)})(((j)[\\"b\\"] === \\"world\\"))};
} };"
`;

exports[`wing test > stdout 1`] = `"pass ─ capture_containers.w » root/test"`;
