// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"try_catch\\", plugins: $plugins });
  
  let x = \\"\\";
  try {
  	{
    {((msg) => {throw new Error(msg)})(\\"hello\\")};
    x = \\"no way I got here\\";
  }
  } catch ($error_e) {
  	const e = $error_e.message;
  	{
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(e === \\"hello\\")'\`)})((e === \\"hello\\"))};
    x = \\"caught\\";
  }
  } finally {
  	{
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === \\"caught\\")'\`)})((x === \\"caught\\"))};
    x = \\"finally\\";
  };
  }
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === \\"finally\\")'\`)})((x === \\"finally\\"))};
  try {
  	{
    x = \\"I got here\\";
  }
  } catch ($error_e) {
  	const e = $error_e.message;
  	{
    x = \\"caught\\";
  }
  } finally {
  	{
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === \\"I got here\\")'\`)})((x === \\"I got here\\"))};
    x = \\"finally\\";
  };
  }
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === \\"finally\\")'\`)})((x === \\"finally\\"))};
  try {
  	{
    {((msg) => {throw new Error(msg)})(\\"hello\\")};
  }
  } catch  {
  	
  	
  } finally {
  	{
    x = \\"finally with no catch\\";
  };
  }
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === \\"finally with no catch\\")'\`)})((x === \\"finally with no catch\\"))};
  try {
  	{
  }
  } catch  {
  	
  	
  } finally {
  	{
    x = \\"finally with no catch and no exception\\";
  };
  }
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === \\"finally with no catch and no exception\\")'\`)})((x === \\"finally with no catch and no exception\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((( () =>  {
  	{
    try {
    	{
    }
    } catch  {
    	
    	
    } finally {
    	{
      return 1;
    };
    }
  }
  })()) === 1)'\`)})(((( () =>  {
  	{
    try {
    	{
    }
    } catch  {
    	
    	
    } finally {
    	{
      return 1;
    };
    }
  }
  })()) === 1))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((( () =>  {
  	{
    try {
    	{
      {((msg) => {throw new Error(msg)})(\\"\\")};
    }
    } catch  {
    	
    	{
      return 2;
    }
    } finally {
    	
    }
  }
  })()) === 2)'\`)})(((( () =>  {
  	{
    try {
    	{
      {((msg) => {throw new Error(msg)})(\\"\\")};
    }
    } catch  {
    	
    	{
      return 2;
    }
    } finally {
    	
    }
  }
  })()) === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((( () =>  {
  	{
    try {
    	{
      return 3;
    }
    } catch  {
    	
    	
    } finally {
    	{
    };
    }
  }
  })()) === 3)'\`)})(((( () =>  {
  	{
    try {
    	{
      return 3;
    }
    } catch  {
    	
    	
    } finally {
    	{
    };
    }
  }
  })()) === 3))};
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `"pass â”€ try_catch.w (no tests)"`;
