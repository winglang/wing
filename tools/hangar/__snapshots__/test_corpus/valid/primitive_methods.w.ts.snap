// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";
const $wing_test = process.env.WING_TEST === \\"true\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $AppBase = __app(process.env.WING_TARGET);

class $Root extends $stdlib.core.Resource {
	constructor(scope, id) {
		super(scope, id);
		const dur = $stdlib.std.Duration.fromSeconds(60);
		const dur2 = $stdlib.std.Duration.fromSeconds(600);
		const f =  (d) =>  {
	{
}
};
		const stringy = \`\${dur.minutes}:\${dur.seconds}\`;
		{console.log(stringy)};
		if ((stringy.includes(\\"60\\") && (((stringy.split(\\":\\")).at(0)) === \\"60\\"))) {
  {console.log(\`\${stringy.length}!\`)};
}
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(((args) => { if (isNaN(args)) {throw new Error(\\"unable to parse \\\\\\"\\" + args + \\"\\\\\\" as a number\\")}; return parseInt(args) })(\\"123\\") === 123)'\`)})((((args) => { if (isNaN(args)) {throw new Error(\\"unable to parse \\\\\\"\\" + args + \\"\\\\\\" as a number\\")}; return parseInt(args) })(\\"123\\") === 123))};
	}
}

class $App extends $AppBase {
	constructor() {
		super({ outdir: $outdir, name: \\"primitive_methods\\", plugins: $plugins });
		const $root = new $Root(this, \\"Default\\");
		if ($wing_test) {
			const $test_runner = this.node.findChild(\\"cloud.TestRunner\\");
			const $tests = $test_runner.findTests();
			for (let $i = 0; $i < $tests.length; $i++) {
				new $Root(this, \\"env\\" + $i);
			}
		}
	}
}

new $App().synth();"
`;

exports[`wing test -t sim > stdout 1`] = `
"1:60
pass â”€ primitive_methods.w (no tests)"
`;
