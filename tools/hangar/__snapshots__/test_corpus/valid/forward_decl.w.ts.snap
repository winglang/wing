// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > clients/R.inflight.js 1`] = `
"class R  {
constructor({ f }) {

  this.f = f;
}
}
exports.R = R;"
`;

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"forward_decl\\", plugins: $plugins });
  
  class R extends $stdlib.core.Resource {
  	constructor(scope, id, ) {
  	super(scope, id);
  {
  }
  }
  	 method2()  {
  	{
    (this.method1());
    {console.log(\`\${this.f}\`)};
    (this.method2());
  }
  }
   method1()  {
  	{
  }
  }
  	_toInflight() {
  	const f_client = this._lift(this.f);
  	const self_client_path = \\"./clients/R.inflight.js\\".replace(/\\\\\\\\/g, \\"/\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).R({f: \${f_client}}))\`);
  }
  }
  
  const x = \\"hi\\";
  if (true) {
    {console.log(\`\${x}\`)};
    const y = new R(this,\\"R\\");
  }
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `
"hi
pass â”€ forward_decl.w (no tests)"
`;
