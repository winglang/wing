// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {
      "root": {
        "Default": {
          "cloud.TestRunner": {
            "TestFunctionArns": "WING_TEST_RUNNER_FUNCTION_ARNS",
          },
        },
      },
    },
  },
  "output": {
    "WING_TEST_RUNNER_FUNCTION_ARNS": {
      "value": "[]",
    },
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_dynamodb_table": {
      "root_cloudCounter_E0AC1263": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Counter/Default",
            "uniqueId": "root_cloudCounter_E0AC1263",
          },
        },
        "attribute": [
          {
            "name": "id",
            "type": "S",
          },
        ],
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "name": "wing-counter-cloud.Counter-c866f225",
      },
    },
    "aws_iam_role": {
      "root_cloudQueueOnMessagee46e5cb7_IamRole_D8F85094": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue-OnMessage-e46e5cb7/IamRole",
            "uniqueId": "root_cloudQueueOnMessagee46e5cb7_IamRole_D8F85094",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_cloudQueueOnMessagee46e5cb7_IamRolePolicy_99F6B872": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue-OnMessage-e46e5cb7/IamRolePolicy",
            "uniqueId": "root_cloudQueueOnMessagee46e5cb7_IamRolePolicy_99F6B872",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":[\\"sqs:ReceiveMessage\\",\\"sqs:ChangeMessageVisibility\\",\\"sqs:GetQueueUrl\\",\\"sqs:DeleteMessage\\",\\"sqs:GetQueueAttributes\\"],\\"Resource\\":\\"\${aws_sqs_queue.root_cloudQueue_E3597F7A.arn}\\",\\"Effect\\":\\"Allow\\"},{\\"Action\\":[\\"s3:PutObject*\\",\\"s3:Abort*\\"],\\"Resource\\":[\\"\${aws_s3_bucket.root_cloudBucket_4F3C4F53.arn}\\",\\"\${aws_s3_bucket.root_cloudBucket_4F3C4F53.arn}/*\\"],\\"Effect\\":\\"Allow\\"},{\\"Action\\":[\\"s3:GetObject*\\",\\"s3:GetBucket*\\",\\"s3:List*\\"],\\"Resource\\":[\\"\${aws_s3_bucket.root_cloudBucket_4F3C4F53.arn}\\",\\"\${aws_s3_bucket.root_cloudBucket_4F3C4F53.arn}/*\\"],\\"Effect\\":\\"Allow\\"},{\\"Action\\":[\\"s3:DeleteObject*\\",\\"s3:DeleteObjectVersion*\\",\\"s3:PutLifecycleConfiguration*\\"],\\"Resource\\":[\\"\${aws_s3_bucket.root_cloudBucket_4F3C4F53.arn}\\",\\"\${aws_s3_bucket.root_cloudBucket_4F3C4F53.arn}/*\\"],\\"Effect\\":\\"Allow\\"},{\\"Action\\":[\\"dynamodb:UpdateItem\\"],\\"Resource\\":\\"\${aws_dynamodb_table.root_cloudCounter_E0AC1263.arn}\\",\\"Effect\\":\\"Allow\\"},{\\"Action\\":[\\"dynamodb:GetItem\\"],\\"Resource\\":\\"\${aws_dynamodb_table.root_cloudCounter_E0AC1263.arn}\\",\\"Effect\\":\\"Allow\\"}]}",
        "role": "\${aws_iam_role.root_cloudQueueOnMessagee46e5cb7_IamRole_D8F85094.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_cloudQueueOnMessagee46e5cb7_IamRolePolicyAttachment_D3D5C118": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue-OnMessage-e46e5cb7/IamRolePolicyAttachment",
            "uniqueId": "root_cloudQueueOnMessagee46e5cb7_IamRolePolicyAttachment_D3D5C118",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_cloudQueueOnMessagee46e5cb7_IamRole_D8F85094.name}",
      },
    },
    "aws_lambda_event_source_mapping": {
      "root_cloudQueue_EventSourceMapping_A2041279": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue/EventSourceMapping",
            "uniqueId": "root_cloudQueue_EventSourceMapping_A2041279",
          },
        },
        "batch_size": 1,
        "event_source_arn": "\${aws_sqs_queue.root_cloudQueue_E3597F7A.arn}",
        "function_name": "\${aws_lambda_function.root_cloudQueueOnMessagee46e5cb7_C394DE2A.function_name}",
      },
    },
    "aws_lambda_function": {
      "root_cloudQueueOnMessagee46e5cb7_C394DE2A": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue-OnMessage-e46e5cb7/Default",
            "uniqueId": "root_cloudQueueOnMessagee46e5cb7_C394DE2A",
          },
        },
        "environment": {
          "variables": {
            "BUCKET_NAME_d755b447": "\${aws_s3_bucket.root_cloudBucket_4F3C4F53.bucket}",
            "BUCKET_NAME_d755b447_IS_PUBLIC": "false",
            "DYNAMODB_TABLE_NAME_49baa65c": "\${aws_dynamodb_table.root_cloudCounter_E0AC1263.name}",
            "WING_FUNCTION_NAME": "cloud-Queue-OnMessage-e46e5cb7-c86cd0c0",
          },
        },
        "function_name": "cloud-Queue-OnMessage-e46e5cb7-c86cd0c0",
        "handler": "index.handler",
        "publish": true,
        "role": "\${aws_iam_role.root_cloudQueueOnMessagee46e5cb7_IamRole_D8F85094.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_cloudQueueOnMessagee46e5cb7_Code_A7B6C6A0.bucket}",
        "s3_key": "\${aws_s3_object.root_cloudQueueOnMessagee46e5cb7_S3Object_E583CB6B.key}",
        "timeout": 30,
      },
    },
    "aws_s3_bucket": {
      "root_cloudBucket_4F3C4F53": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Bucket/Default",
            "uniqueId": "root_cloudBucket_4F3C4F53",
          },
        },
        "bucket_prefix": "cloud-bucket-c87175e7-",
        "force_destroy": false,
      },
      "root_cloudQueueOnMessagee46e5cb7_Code_A7B6C6A0": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue-OnMessage-e46e5cb7/Code",
            "uniqueId": "root_cloudQueueOnMessagee46e5cb7_Code_A7B6C6A0",
          },
        },
        "bucket_prefix": "code-c8b80a9a-",
      },
    },
    "aws_s3_bucket_public_access_block": {
      "root_cloudBucket_PublicAccessBlock_319C1C2E": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Bucket/PublicAccessBlock",
            "uniqueId": "root_cloudBucket_PublicAccessBlock_319C1C2E",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_cloudBucket_4F3C4F53.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
    },
    "aws_s3_bucket_server_side_encryption_configuration": {
      "root_cloudBucket_Encryption_8ED0CD9C": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Bucket/Encryption",
            "uniqueId": "root_cloudBucket_Encryption_8ED0CD9C",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudBucket_4F3C4F53.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
    },
    "aws_s3_object": {
      "root_cloudQueueOnMessagee46e5cb7_S3Object_E583CB6B": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue-OnMessage-e46e5cb7/S3Object",
            "uniqueId": "root_cloudQueueOnMessagee46e5cb7_S3Object_E583CB6B",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudQueueOnMessagee46e5cb7_Code_A7B6C6A0.bucket}",
        "key": "<ASSET_KEY>",
        "source": "<ASSET_SOURCE>",
      },
    },
    "aws_sqs_queue": {
      "root_cloudQueue_E3597F7A": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Queue/Default",
            "uniqueId": "root_cloudQueue_E3597F7A",
          },
        },
        "name": "cloud-Queue-c86e03d8",
        "visibility_timeout_seconds": 10,
      },
    },
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";
const $wing_is_test = process.env.WING_IS_TEST === \\"true\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $AppBase = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class $Root extends $stdlib.core.Resource {
  constructor(scope, id) {
    super(scope, id);
    const bucket = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Bucket\\",this,\\"cloud.Bucket\\");
    const counter = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Counter\\",this,\\"cloud.Counter\\",{ initial: 100 });
    const queue = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Queue\\",this,\\"cloud.Queue\\",{ timeout: $stdlib.std.Duration.fromSeconds(10) });
    const handler = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
  code: $stdlib.core.NodeJsCode.fromFile(require.resolve(\\"./proc.1ece6a476239c44d64d8b687b9e4389715198c49564defb8766e8b85b0f54620/index.js\\".replace(/\\\\\\\\/g, \\"/\\"))),
  bindings: {
    bucket: {
      obj: bucket,
      ops: [\\"delete\\",\\"get\\",\\"get_json\\",\\"list\\",\\"public_url\\",\\"put\\",\\"put_json\\"]
    },
    counter: {
      obj: counter,
      ops: [\\"dec\\",\\"inc\\",\\"peek\\",\\"reset\\"]
    },
  }
});
    (queue.onMessage(handler));
  }
}

class $App extends $AppBase {
  constructor() {
    super({ outdir: $outdir, name: \\"file_counter\\", plugins: $plugins, isTestEnvironment: $wing_is_test });
    if ($wing_is_test) {
      new $Root(this, \\"env0\\");
      const $test_runner = this.testRunner;
      const $tests = $test_runner.findTests();
      for (let $i = 1; $i < $tests.length; $i++) {
        new $Root(this, \\"env\\" + $i);
      }
    } else {
      new $Root(this, \\"Default\\");
    }
  }
}

new $App().synth();"
`;

exports[`wing compile -t tf-aws > proc.1ece6a476239c44d64d8b687b9e4389715198c49564defb8766e8b85b0f54620/index.js 1`] = `
"async handle(body) { const { bucket, counter } = this; {
  const next = (await counter.inc());
  const key = \`myfile-\${\\"hi\\"}.txt\`;
  (await bucket.put(key,body));
} };"
`;

exports[`wing test -t sim > stdout 1`] = `
"- Compiling to sim...
✔ Compiling to sim...
pass ─ file_counter.wsim (no tests)"
`;
