// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > clients/A.inflight.js 1`] = `
"export class A  {
constructor({  }) {


}
async handle(msg)  {
	{
  return;
}
}}"
`;

exports[`wing compile -t tf-aws > clients/B.inflight.js 1`] = `
"export class B  {
constructor({  }) {


}
async handle(msg)  {
	{
  return 5;
}
}}"
`;

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"impl_interface\\", plugins: $plugins });
  
  class A extends $stdlib.core.Resource {
  	constructor(scope, id, ) {
  	super(scope, id);
  {
  }
  }
  	
  	_toInflight() {
  	
  	const self_client_path = require('path').resolve(__dirname, \\"clients/A.inflight.js\\").replace(/\\\\\\\\/g, \\"/\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).A({}))\`);
  }
  }
  A._annotateInflight(\\"handle\\", {});
  class B extends $stdlib.core.Resource {
  	constructor(scope, id, ) {
  	super(scope, id);
  {
  }
  }
  	
  	_toInflight() {
  	
  	const self_client_path = require('path').resolve(__dirname, \\"clients/B.inflight.js\\").replace(/\\\\\\\\/g, \\"/\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).B({}))\`);
  }
  }
  B._annotateInflight(\\"handle\\", {});
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `"pass â”€ impl_interface.w (no tests)"`;
