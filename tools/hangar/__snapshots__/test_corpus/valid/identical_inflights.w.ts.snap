// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"identical_inflights\\", plugins: $plugins });
  
  const x = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.8eb95bcbc154530931e15fc418c8b1fe991095671409552099ea1aa596999ede/index.js\\").replace(/\\\\\\\\/g, \\"/\\")),
    bindings: {
    }
  });
  const y = new $stdlib.core.Inflight(this, \\"$Inflight2\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.8eb95bcbc154530931e15fc418c8b1fe991095671409552099ea1aa596999ede/index.js\\").replace(/\\\\\\\\/g, \\"/\\")),
    bindings: {
    }
  });
}
}
new MyApp().synth();"
`;

exports[`wing compile -t tf-aws > proc.8eb95bcbc154530931e15fc418c8b1fe991095671409552099ea1aa596999ede/index.js 1`] = `
"async handle() { const {  } = this; {
} };"
`;

exports[`wing test > stdout 1`] = `"pass â”€ identical_inflights.w (no tests)"`;
