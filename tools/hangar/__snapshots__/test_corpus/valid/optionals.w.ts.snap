// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";
const $wing_test = process.env.WING_TEST === \\"true\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $AppBase = __app(process.env.WING_TARGET);

class $Root extends $stdlib.core.Resource {
	constructor(scope, id) {
		super(scope, id);
		class Super
{
constructor()  {
	{
  this.name = \\"Super\\";
}
}
name;

}
		class Sub extends Super
{
constructor()  {
	{
  this.name = \\"Sub\\";
}
}


}
		class Sub1 extends Super
{
constructor()  {
	{
  this.name = \\"Sub\\";
}
}


}
		const x = 4;
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(((x) != null) === true)'\`)})((((x) != null) === true))};
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '((!((x) != null)) === false)'\`)})(((!((x) != null)) === false))};
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '((x ?? 5) === 4)'\`)})(((x ?? 5) === 4))};
		const y = (x ?? 5);
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(y === 4)'\`)})((y === 4))};
		const optional_sup = new Super();
		const s = (optional_sup ?? new Sub());
		{((cond) => {if (!cond) throw new Error(\`assertion failed: '(s.name === \\"Super\\")'\`)})((s.name === \\"Super\\"))};
	}
}

class $App extends $AppBase {
	constructor() {
		super({ outdir: $outdir, name: \\"optionals\\", plugins: $plugins });
		const $root = new $Root(this, \\"Default\\");
		if ($wing_test) {
			const $test_runner = this.node.findChild(\\"cloud.TestRunner\\");
			const $tests = $test_runner.findTests();
			for (let $i = 0; $i < $tests.length; $i++) {
				new $Root(this, \\"env\\" + $i);
			}
		}
	}
}

new $App().synth();"
`;

exports[`wing test -t sim > stdout 1`] = `"pass â”€ optionals.w (no tests)"`;
