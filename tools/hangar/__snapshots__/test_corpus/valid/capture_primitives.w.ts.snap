// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {
      "root": {
        "Default": {
          "cloud.TestRunner": {
            "TestFunctionArns": "WING_TEST_RUNNER_FUNCTION_ARNS",
          },
        },
      },
    },
  },
  "output": {
    "WING_TEST_RUNNER_FUNCTION_ARNS": {
      "value": "[]",
    },
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_cloudFunction_IamRole_DAEC3578": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/IamRole",
            "uniqueId": "root_cloudFunction_IamRole_DAEC3578",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_cloudFunction_IamRolePolicy_AAE6C0C0": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/IamRolePolicy",
            "uniqueId": "root_cloudFunction_IamRolePolicy_AAE6C0C0",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/IamRolePolicyAttachment",
            "uniqueId": "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_lambda_function": {
      "root_cloudFunction_6A57BA0A": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/Default",
            "uniqueId": "root_cloudFunction_6A57BA0A",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "cloud-Function-c8d2eca1",
          },
        },
        "function_name": "cloud-Function-c8d2eca1",
        "handler": "index.handler",
        "publish": true,
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "s3_key": "\${aws_s3_object.root_cloudFunction_S3Object_C8435368.key}",
        "timeout": 30,
        "vpc_config": {
          "security_group_ids": [],
          "subnet_ids": [],
        },
      },
    },
    "aws_s3_bucket": {
      "root_cloudFunction_Code_2F6A7948": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/Code",
            "uniqueId": "root_cloudFunction_Code_2F6A7948",
          },
        },
        "bucket_prefix": "code-c8d4206f-",
      },
    },
    "aws_s3_object": {
      "root_cloudFunction_S3Object_C8435368": {
        "//": {
          "metadata": {
            "path": "root/Default/Default/cloud.Function/S3Object",
            "uniqueId": "root_cloudFunction_S3Object_C8435368",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "key": "<ASSET_KEY>",
        "source": "<ASSET_SOURCE>",
      },
    },
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WING_SYNTH_DIR ?? \\".\\";
const $wing_is_test = process.env.WING_IS_TEST === \\"true\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		case \\"awscdk\\":
			return $stdlib.awscdk.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $AppBase = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class $Root extends $stdlib.core.Resource {
  constructor(scope, id) {
    super(scope, id);
    const my_str = \\"hello, string\\";
    const my_num = 1234;
    const my_bool = true;
    const my_second_bool = false;
    const my_dur = $stdlib.std.Duration.fromSeconds(600);
    const handler = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
      code: $stdlib.core.NodeJsCode.fromFile(require.resolve(\\"./proc.34e5b7de651594942ccd90c9d76355813afc895aa395fbda2c204aa36f7c3a85/index.js\\".replace(/\\\\\\\\/g, \\"/\\"))),
      bindings: {
        my_bool: {
          obj: my_bool,
          ops: []
        },
        my_dur: {
          obj: my_dur,
          ops: []
        },
        my_num: {
          obj: my_num,
          ops: []
        },
        my_second_bool: {
          obj: my_second_bool,
          ops: []
        },
        my_str: {
          obj: my_str,
          ops: []
        },
      }
    })
    ;
    this.node.root.newAbstract(\\"@winglang/sdk.cloud.Function\\",this,\\"cloud.Function\\",handler);
  }
}
class $App extends $AppBase {
  constructor() {
    super({ outdir: $outdir, name: \\"capture_primitives\\", plugins: $plugins, isTestEnvironment: $wing_is_test });
    if ($wing_is_test) {
      new $Root(this, \\"env0\\");
      const $test_runner = this.testRunner;
      const $tests = $test_runner.findTests();
      for (let $i = 1; $i < $tests.length; $i++) {
        new $Root(this, \\"env\\" + $i);
      }
    } else {
      new $Root(this, \\"Default\\");
    }
  }
}
new $App().synth();
"
`;

exports[`wing compile -t tf-aws > proc.34e5b7de651594942ccd90c9d76355813afc895aa395fbda2c204aa36f7c3a85/index.js 1`] = `
"async handle(s) {
  const { my_bool, my_dur, my_num, my_second_bool, my_str } = this;
  {console.log(my_str)};
  const n = my_num;
  {console.log(\`\${n}\`)};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(my_second_bool === false)'\`)})((my_second_bool === false))};
  if (my_bool) {
    {console.log(\\"bool=true\\")};
  }
  else {
    {console.log(\\"bool=false\\")};
  }
  const min = my_dur.minutes;
  const sec = my_dur.seconds;
  const hr = my_dur.hours;
  const split = (await \`min=\${min} sec=\${sec} hr=\${hr}\`.split(\\" \\"));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(split.length === 3)'\`)})((split.length === 3))};
}
"
`;

exports[`wing test -t sim > stdout 1`] = `
"- Compiling to sim...
✔ Compiling to sim...
pass ─ capture_primitives.wsim (no tests)"
`;
