// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"for_loop\\", plugins: $plugins });
  
  const words = Object.freeze([\\"wing\\", \\"lang\\", \\"dang\\"]);
  const unique_numbers = Object.freeze(new Set([1, 2, 3]));
  for (const word of words) {
    for (const number of unique_numbers) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(number > 0)'\`)})((number > 0))};
      {console.log(\`\${word}: \${number}\`)};
    }
  }
  for (const word of words) {
    for (const number of unique_numbers) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(number > 0)'\`)})((number > 0))};
      {console.log(\`\${word}: \${number}\`)};
      if ((number === 2)) {
        break;
      }
    }
  }
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `
"wing: 1
wing: 2
wing: 3
lang: 1
lang: 2
lang: 3
dang: 1
dang: 2
dang: 3
wing: 1
wing: 2
lang: 1
lang: 2
dang: 1
dang: 2
pass â”€ for_loop.w (no tests)"
`;
