// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bool_from_json.w 1`] = `
"ERROR: unable to parse number 123 as a boolean

../../../examples/tests/error/target/test/bool_from_json.wsim.[REDACTED].tmp/.wing/preflight.js:9
       super(scope, id);
       const j = Object.freeze({\\"a\\":123});
>>     const a = (std.Boolean.fromJson((j)[\\"a\\"]));
     }
   }

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`num_from_str.w 1`] = `
"ERROR: unable to parse \\"123a\\" as a number

../../../examples/tests/error/target/test/num_from_str.wsim.[REDACTED].tmp/.wing/preflight.js:8
     constructor(scope, id) {
       super(scope, id);
>>     const a = ((args) => { if (isNaN(args)) {throw new Error(\\"unable to parse /\\"\\" + args + \\"/\\" as a number\\")}; return parseInt(args) })(\\"123a\\");
     }
   }

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`number_from_json.w 1`] = `
"ERROR: unable to parse string apples as a number

../../../examples/tests/error/target/test/number_from_json.wsim.[REDACTED].tmp/.wing/preflight.js:9
       super(scope, id);
       const j = Object.freeze({\\"a\\":\\"apples\\"});
>>     const a = ((args) => { if (typeof args !== \\"number\\") {throw new Error(\\"unable to parse \\" + typeof args + \\" \\" + args + \\" as a number\\")}; return JSON.parse(JSON.stringify(args)) })((j)[\\"a\\"]);
     }
   }

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`repeat_construct_id.w 1`] = `
"ERROR: There is already a Construct with name 'cloud.Bucket' in $Root [env0]

hint: Every preflight object needs a unique identifier within its scope. You can assign one as shown:

> new cloud.Bucket() as \\"MyBucket\\";

For more information, see https://www.winglang.io/docs/language-guide/language-reference#33-preflight-classes

../../../examples/tests/error/target/test/repeat_construct_id.wsim.[REDACTED].tmp/.wing/preflight.js:10
       super(scope, id);
       const bucket1 = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Bucket\\",this,\\"cloud.Bucket\\");
>>     const bucket2 = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Bucket\\",this,\\"cloud.Bucket\\");
     }
   }

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`repeat_construct_id2.w 1`] = `
"ERROR: There is already a Construct with name 'bucket-name' in $Root [env0]

hint: Every preflight object needs a unique identifier within its scope. You can assign one as shown:

> new cloud.Bucket() as \\"MyBucket\\";

For more information, see https://www.winglang.io/docs/language-guide/language-reference#33-preflight-classes

../../../examples/tests/error/target/test/repeat_construct_id2.wsim.[REDACTED].tmp/.wing/preflight.js:13
       });
       const bucket1 = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Bucket\\",this,String.raw({ raw: [\\"\\", \\"\\"] }, (make_name())));
>>     const bucket2 = this.node.root.newAbstract(\\"@winglang/sdk.cloud.Bucket\\",this,String.raw({ raw: [\\"\\", \\"\\"] }, (make_name())));
     }
   }

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`string_from_json.w 1`] = `
"ERROR: unable to parse number 123 as a string

../../../examples/tests/error/target/test/string_from_json.wsim.[REDACTED].tmp/.wing/preflight.js:9
       super(scope, id);
       const j = Object.freeze({\\"a\\":123});
>>     const a = ((args) => { if (typeof args !== \\"string\\") {throw new Error(\\"unable to parse \\" + typeof args + \\" \\" + args + \\" as a string\\")}; return JSON.parse(JSON.stringify(args)) })((j)[\\"a\\"]);
     }
   }

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`utilities.w 1`] = `
"ERROR: assertion failed: false

../../../examples/tests/error/target/test/utilities.wsim.[REDACTED].tmp/.wing/preflight.js:8
     constructor(scope, id) {
       super(scope, id);
>>     {((cond) => {if (!cond) throw new Error(\\"assertion failed: false\\")})(false)};
       {console.log(\\"W\\")};
       {((msg) => {throw new Error(msg)})(\\"me\\")};

 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;
