// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bool_from_json.test.w 1`] = `
"Error: unable to parse bool:
- instance is not of a type(s) boolean
  --> ../../../examples/tests/error/bool_from_json.test.w:5:15
  | // If it is run with other tests, subsequent failures will be ignored in snapshot.
  | let j = Json { a: 123 };
  | 
5 | let a: bool = bool.fromJson(j.get(\\"a\\"));
  |               ^
at <ABSOLUTE>/bool_from_json.test.w:5:15
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`inflight_stacktraces.test.w 1`] = `
"fail ┌ inflight_stacktraces.test.wsim » root/env0/test:assert            
     │ Error: assertion failed: false
     │   --> ../../../examples/tests/error/inflight_stacktraces.test.w:7:3
     │   | let bucket = new cloud.Bucket();
     │   | 
     │   | test \\"assert\\" {
     │ 7 |   assert(false);
     │   |   ^
     └ at <ABSOLUTE>/inflight_stacktraces.test.w:7:3
fail ┌ inflight_stacktraces.test.wsim » root/env1/test:expect.equal      
     │ Error: AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:
     │ 
     │ 1 !== 2
     │ 
     │    --> ../../../examples/tests/error/inflight_stacktraces.test.w:11:3
     │    | }
     │    | 
     │    | test \\"expect.equal\\" {
     │ 11 |   expect.equal(1,2 );
     │    |   ^
     └ at <ABSOLUTE>/inflight_stacktraces.test.w:11:3
fail ┌ inflight_stacktraces.test.wsim » root/env2/test:bucket failed get 
     │ Error: Object does not exist (key=doesn't exist): Error: ENOENT: no such file or directory, open '../../../examples/tests/error/target/test/inflight_stacktraces.test.wsim/.state/<STATE_FILE>'
     │    --> ../../../examples/tests/error/inflight_stacktraces.test.w:15:3
     │    | }
     │    | 
     │    | test \\"bucket failed get\\" {
     │ 15 |   bucket.get(\\"doesn't exist\\");
     │    |   ^
     └ at <ABSOLUTE>/inflight_stacktraces.test.w:15:3
fail ┌ inflight_stacktraces.test.wsim » root/env3/test:throw from closure
     │ Error: ouch
     │    --> ../../../examples/tests/error/inflight_stacktraces.test.w:20:5
     │    | 
     │    | test \\"throw from closure\\" {
     │    |   let closure = inflight () => {
     │ 20 |     throw \\"ouch\\";
     │    |     ^
     │ at closure <ABSOLUTE>/inflight_stacktraces.test.w:20:5
     └ at <ABSOLUTE>/inflight_stacktraces.test.w:22:3
 
 
Tests 4 failed (4)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`num_from_str.test.w 1`] = `
"Error: unable to parse \\"123a\\" as a number
  --> ../../../examples/tests/error/num_from_str.test.w:3:14
  | // Note that this test has to be alone because it needs to compile successfully and fail at preflight.
  | // If it is run with other tests, subsequent failures will be ignored in snapshot.
3 | let a: num = num.fromStr(\\"123a\\");
  |              ^
at <ABSOLUTE>/num_from_str.test.w:3:14
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`number_from_json.test.w 1`] = `
"Error: unable to parse num:
- instance is not of a type(s) number
  --> ../../../examples/tests/error/number_from_json.test.w:5:14
  | // If it is run with other tests, subsequent failures will be ignored in snapshot.
  | let j = Json { a: \\"apples\\" };
  | 
5 | let a: num = num.fromJson(j.get(\\"a\\"));
  |              ^
at <ABSOLUTE>/number_from_json.test.w:5:14
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`repeat_construct_id.test.w 1`] = `
"Error: There is already a Construct with name 'cloud.Bucket' in $Root [env0]

hint: Every preflight object needs a unique identifier within its scope. You can assign one as shown:

> new cloud.Bucket() as \\"MyBucket\\";

For more information, see https://www.winglang.io/docs/concepts/application-tree
  --> ../../../examples/tests/error/repeat_construct_id.test.w:4:15
  | bring cloud;
  | 
  | let bucket1 = new cloud.Bucket();
4 | let bucket2 = new cloud.Bucket();
  |               ^
at <ABSOLUTE>/repeat_construct_id.test.w:4:15
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`repeat_construct_id2.test.w 1`] = `
"Error: There is already a Construct with name 'bucket-name' in $Root [env0]

hint: Every preflight object needs a unique identifier within its scope. You can assign one as shown:

> new cloud.Bucket() as \\"MyBucket\\";

For more information, see https://www.winglang.io/docs/concepts/application-tree
  --> ../../../examples/tests/error/repeat_construct_id2.test.w:8:15
  | };
  | 
  | let bucket1 = new cloud.Bucket() as \\"{make_name()}\\";
8 | let bucket2 = new cloud.Bucket() as \\"{make_name()}\\";
  |               ^
at <ABSOLUTE>/repeat_construct_id2.test.w:8:15
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`string_from_json.test.w 1`] = `
"Error: unable to parse string:
- instance is not of a type(s) string
  --> ../../../examples/tests/error/string_from_json.test.w:5:14
  | // If it is run with other tests, subsequent failures will be ignored in snapshot.
  | let j = Json { a: 123 };
  | 
5 | let a: str = str.fromJson(j.get(\\"a\\"));
  |              ^
at <ABSOLUTE>/string_from_json.test.w:5:14
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`struct_from_json_1.test.w 1`] = `
"Error: unable to parse Person:
- instance.age is not of a type(s) number
   --> ../../../examples/tests/error/struct_from_json_1.test.w:11:1
   | 
   | let j = {name: \\"cool\\", age: \\"not a number\\"};
   | 
11 | Person.fromJson(j);
   | ^
at <ABSOLUTE>/struct_from_json_1.test.w:11:1
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`struct_from_json_2.test.w 1`] = `
"Error: unable to parse Student:
- instance.age is not of a type(s) number
- instance requires property \\"advisor\\"
   --> ../../../examples/tests/error/struct_from_json_2.test.w:22:1
   |   age: \\"not a number\\"
   | };
   | 
22 | Student.fromJson(missingAdvisor);
   | ^
at <ABSOLUTE>/struct_from_json_2.test.w:22:1
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`struct_from_json_3.test.w 1`] = `
"Error: unable to parse Student:
- instance.advisors[1].id is not of a type(s) string
- instance.age is not of a type(s) number
   --> ../../../examples/tests/error/struct_from_json_3.test.w:26:1
   |   ]
   | };
   | 
26 | Student.fromJson(invalidAdvisorInArray);
   | ^
at <ABSOLUTE>/struct_from_json_3.test.w:26:1
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`struct_from_json_4.test.w 1`] = `
"Error: unable to parse Student:
- instance.advisors contains duplicate item
   --> ../../../examples/tests/error/struct_from_json_4.test.w:27:1
   |   ]
   | };
   | 
27 | Student.fromJson(invalidAdvisorInArray);
   | ^
at <ABSOLUTE>/struct_from_json_4.test.w:27:1
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`struct_from_json_5.test.w 1`] = `
"Error: unable to parse Foo:
- instance.names.c is not of a type(s) string
   --> ../../../examples/tests/error/struct_from_json_5.test.w:16:1
   |   }
   | };
   | 
16 | Foo.fromJson(jFoo);
   | ^
at <ABSOLUTE>/struct_from_json_5.test.w:16:1
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;

exports[`utilities.test.w 1`] = `
"Error: assertion failed: false
  --> ../../../examples/tests/error/utilities.test.w:1:1
1 | assert(false);
  | ^
at <ABSOLUTE>/utilities.test.w:1:1
 
 
Tests 1 failed (1)
Test Files 1 failed (1)
Duration <DURATION>"
`;
