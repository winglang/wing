// Vitest Snapshot v1

exports[`anon_function.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> anon_function.w"`;

exports[`asynchronous_model_implicit_await_in_functions.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> asynchronous_model_implicit_await_in_functions.w"`;

exports[`bring_fs.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> bring_fs.w"`;

exports[`bring_jsii.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> bring_jsii.w <gray>»</color> <brightWhite>root/test:say_hello</color>"`;

exports[`bring_jsii_path.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> bring_jsii_path.w <gray>»</color> <brightWhite>root/test:say_hello</color>"`;

exports[`capture_containers.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> capture_containers.w <gray>»</color> <brightWhite>root/test</color>"`;

exports[`capture_containers_of_resources.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> capture_containers_of_resources.w <gray>»</color> <brightWhite>root/test</color>"`;

exports[`capture_in_binary.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> capture_in_binary.w <gray>»</color> <brightWhite>root/test</color>"`;

exports[`capture_primitives.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> capture_primitives.w"`;

exports[`capture_resource_and_data.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> capture_resource_and_data.w <gray>»</color> <brightWhite>root/test</color>"`;

exports[`captures.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> captures.w"`;

exports[`container_types.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> container_types.w"`;

exports[`enums.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> enums.w"`;

exports[`expressions_binary_operators.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> expressions_binary_operators.w"`;

exports[`expressions_string_interpolation.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> expressions_string_interpolation.w"`;

exports[`file_counter.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> file_counter.w"`;

exports[`for_loop.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> for_loop.w"`;

exports[`forward_decl.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> forward_decl.w"`;

exports[`hello.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> hello.w"`;

exports[`identical_inflights.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> identical_inflights.w"`;

exports[`mut_container_types.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> mut_container_types.w"`;

exports[`primitive_methods.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> primitive_methods.w"`;

exports[`print.w > wing test --target sim > stdout 1`] = `
"<green>pass</color> <gray>┌</color> print.w <gray>»</color> <brightWhite>root/test:print1</color>
    <gray> │ </color><gray>inflight print 1.1</color>
    <gray> └ </color><gray>inflight print 1.2</color>
<green>pass</color> <gray>┌</color> print.w <gray>»</color> <brightWhite>root/test:print2</color>
    <gray> │ </color><gray>inflight print 2.1</color>
    <gray> └ </color><gray>inflight print 2.2</color>"
`;

exports[`reassignment.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> reassignment.w"`;

exports[`resource.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> resource.w <gray>»</color> <brightWhite>root/test</color>"`;

exports[`statements_if.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> statements_if.w <gray>»</color> <brightWhite>root/test</color>"`;

exports[`statements_variable_declarations.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> statements_variable_declarations.w"`;

exports[`std_containers.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> std_containers.w"`;

exports[`test_bucket.w > wing test --target sim > stdout 1`] = `
"<green>pass</color> <gray>─</color> test_bucket.w <gray>»</color> <brightWhite>root/test:get</color>
<green>pass</color> <gray>─</color> test_bucket.w <gray>»</color> <brightWhite>root/test:put</color>"
`;

exports[`try_catch.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> try_catch.w"`;

exports[`user-defined-resources-captures.w > wing test --target sim > stdout 1`] = `
"<green>pass</color> <gray>─</color> user-defined-resources-captures.w <gray>»</color> <brightWhite>root/test:capture_array          </color>
<green>pass</color> <gray>─</color> user-defined-resources-captures.w <gray>»</color> <brightWhite>root/test:capture_array_of_queues</color>
<green>pass</color> <gray>─</color> user-defined-resources-captures.w <gray>»</color> <brightWhite>root/test:capture_map            </color>
<green>pass</color> <gray>─</color> user-defined-resources-captures.w <gray>»</color> <brightWhite>root/test:capture_primitives     </color>
<green>pass</color> <gray>─</color> user-defined-resources-captures.w <gray>»</color> <brightWhite>root/test:capture_resource       </color>
<green>pass</color> <gray>─</color> user-defined-resources-captures.w <gray>»</color> <brightWhite>root/test:capture_set            </color>"
`;

exports[`while.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> while.w"`;

exports[`while_loop_await.w > wing test --target sim > stdout 1`] = `"<green>pass</color> <gray>─</color> while_loop_await.w"`;
