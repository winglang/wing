// Vitest Snapshot v1

exports[`wing test anon_function.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>anon_function.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test asynchronous_model_implicit_await_in_functions.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>asynchronous_model_implicit_await_in_functions.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test capture_containers.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>capture_containers.w<gray> | </color><brightWhite>root/test</color>"`;

exports[`wing test capture_containers_of_resources.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>capture_containers_of_resources.w<gray> | </color><brightWhite>root/test</color>"`;

exports[`wing test capture_in_binary.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>capture_in_binary.w<gray> | </color><brightWhite>root/test</color>"`;

exports[`wing test capture_primitives.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>capture_primitives.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test capture_resource_and_data.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>capture_resource_and_data.w<gray> | </color><brightWhite>root/test</color>"`;

exports[`wing test captures.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>captures.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test container_types.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>container_types.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test enums.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>enums.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test expressions_binary_operators.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>expressions_binary_operators.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test expressions_string_interpolation.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>expressions_string_interpolation.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test file_counter.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>file_counter.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test for_loop.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>for_loop.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test forward_decl.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>forward_decl.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test hello.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>hello.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test identical_inflights.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>identical_inflights.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test mut_container_types.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>mut_container_types.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test primitive_methods.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>primitive_methods.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test print.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>print.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test reassignment.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>reassignment.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test resource.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>resource.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test statements_if.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>statements_if.w<gray> | </color><brightWhite>root/test</color>"`;

exports[`wing test statements_variable_declarations.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>statements_variable_declarations.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test std_containers.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>std_containers.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test test_bucket.w (--target sim) > stdout 1`] = `
"<green>pass</color><gray> | </color>test_bucket.w<gray> | </color><brightWhite>root/test:get</color>
<green>pass</color><gray> | </color>test_bucket.w<gray> | </color><brightWhite>root/test:put</color>"
`;

exports[`wing test while.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>while.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;

exports[`wing test while_loop_await.w (--target sim) > stdout 1`] = `"<green>pass</color><gray> | </color>while_loop_await.w<gray> | </color><brightWhite>(no inflight tests)</color>"`;
