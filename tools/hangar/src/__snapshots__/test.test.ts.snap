// Vitest Snapshot v1

exports[`anon_function.w > wing test --target sim > stdout 1`] = `
"1
2
3
pass ─ anon_function.w (no tests)"
`;

exports[`asynchronous_model_implicit_await_in_functions.w > wing test --target sim > stdout 1`] = `"pass ─ asynchronous_model_implicit_await_in_functions.w (no tests)"`;

exports[`bring_cdktf.w > wing test --target sim > stdout 1`] = `"pass ─ bring_cdktf.w (no tests)"`;

exports[`bring_fs.w > wing test --target sim > stdout 1`] = `"pass ─ bring_fs.w (no tests)"`;

exports[`bring_jsii.w > wing test --target sim > stdout 1`] = `"pass ─ bring_jsii.w » root/test:say_hello"`;

exports[`bring_jsii_path.w > wing test --target sim > stdout 1`] = `"pass ─ bring_jsii_path.w » root/test:say_hello"`;

exports[`bring_projen.w > wing test --target sim > stdout 1`] = `"pass ─ bring_projen.w (no tests)"`;

exports[`bucket_keys.w > wing test --target sim > stdout 1`] = `"pass ─ bucket_keys.w » root/test"`;

exports[`capture_containers.w > wing test --target sim > stdout 1`] = `"pass ─ capture_containers.w » root/test"`;

exports[`capture_containers_of_resources.w > wing test --target sim > stdout 1`] = `"pass ─ capture_containers_of_resources.w » root/test"`;

exports[`capture_in_binary.w > wing test --target sim > stdout 1`] = `"pass ─ capture_in_binary.w » root/test"`;

exports[`capture_primitives.w > wing test --target sim > stdout 1`] = `"pass ─ capture_primitives.w (no tests)"`;

exports[`capture_resource_and_data.w > wing test --target sim > stdout 1`] = `"pass ─ capture_resource_and_data.w » root/test"`;

exports[`capture_resource_with_no_inflight.w > wing test --target sim > stdout 1`] = `"pass ─ capture_resource_with_no_inflight.w » root/test"`;

exports[`captures.w > wing test --target sim > stdout 1`] = `"pass ─ captures.w (no tests)"`;

exports[`container_types.w > wing test --target sim > stdout 1`] = `"pass ─ container_types.w (no tests)"`;

exports[`enums.w > wing test --target sim > stdout 1`] = `"pass ─ enums.w (no tests)"`;

exports[`expressions_binary_operators.w > wing test --target sim > stdout 1`] = `"pass ─ expressions_binary_operators.w (no tests)"`;

exports[`expressions_string_interpolation.w > wing test --target sim > stdout 1`] = `"pass ─ expressions_string_interpolation.w (no tests)"`;

exports[`file_counter.w > wing test --target sim > stdout 1`] = `"pass ─ file_counter.w (no tests)"`;

exports[`for_loop.w > wing test --target sim > stdout 1`] = `
"wing: 1
wing: 2
wing: 3
lang: 1
lang: 2
lang: 3
dang: 1
dang: 2
dang: 3
pass ─ for_loop.w (no tests)"
`;

exports[`forward_decl.w > wing test --target sim > stdout 1`] = `
"hi
pass ─ forward_decl.w (no tests)"
`;

exports[`hello.w > wing test --target sim > stdout 1`] = `"pass ─ hello.w (no tests)"`;

exports[`identical_inflights.w > wing test --target sim > stdout 1`] = `"pass ─ identical_inflights.w (no tests)"`;

exports[`impl_interface.w > wing test --target sim > stdout 1`] = `"pass ─ impl_interface.w (no tests)"`;

exports[`inflight_ref_external.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_external.w » root/test"`;

exports[`inflight_ref_inflight_field.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_inflight_field.w » root/test"`;

exports[`inflight_ref_primitive.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_primitive.w » root/test"`;

exports[`inflight_ref_resource.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_resource.w » root/test"`;

exports[`inflight_ref_resource_collection.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_resource_collection.w » root/test"`;

exports[`inflight_ref_resource_field.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_resource_field.w » root/test"`;

exports[`inflight_ref_resource_sub_field.w > wing test --target sim > stdout 1`] = `
"pass ┌ inflight_ref_resource_sub_field.w » root/test
     │ array.len=3
     │ my_str=hello
     │ this.another.my_field=hello!
     └ this.another.first.my_resource:world"
`;

exports[`inflight_ref_resource_userdefined.w > wing test --target sim > stdout 1`] = `"pass ─ inflight_ref_resource_userdefined.w » root/test"`;

exports[`json.w > wing test --target sim > stdout 1`] = `"pass ─ json.w (no tests)"`;

exports[`json_bucket.w > wing test --target sim > stdout 1`] = `"pass ─ json_bucket.w » root/test:put"`;

exports[`mut_container_types.w > wing test --target sim > stdout 1`] = `"pass ─ mut_container_types.w (no tests)"`;

exports[`primitive_methods.w > wing test --target sim > stdout 1`] = `
"1:60
pass ─ primitive_methods.w (no tests)"
`;

exports[`print.w > wing test --target sim > stdout 1`] = `
"preflight print
pass ┌ print.w » root/test:print1
     │ inflight print 1.1
     └ inflight print 1.2
pass ┌ print.w » root/test:print2
     │ inflight print 2.1
     └ inflight print 2.2"
`;

exports[`reassignment.w > wing test --target sim > stdout 1`] = `"pass ─ reassignment.w (no tests)"`;

exports[`resource.w > wing test --target sim > stdout 1`] = `"pass ─ resource.w » root/test"`;

exports[`statements_if.w > wing test --target sim > stdout 1`] = `"pass ─ statements_if.w » root/test"`;

exports[`statements_variable_declarations.w > wing test --target sim > stdout 1`] = `"pass ─ statements_variable_declarations.w (no tests)"`;

exports[`static_members.w > wing test --target sim > stdout 1`] = `"pass ─ static_members.w » root/test"`;

exports[`std_containers.w > wing test --target sim > stdout 1`] = `"pass ─ std_containers.w (no tests)"`;

exports[`std_string.w > wing test --target sim > stdout 1`] = `
"pass ┌ std_string.w » root/test:string
     │ index of \\"s\\" in s1 is 0
     │ string
     └ some strings are immutable"
`;

exports[`test_bucket.w > wing test --target sim > stdout 1`] = `
"pass ─ test_bucket.w » root/test:get
pass ─ test_bucket.w » root/test:put"
`;

exports[`try_catch.w > wing test --target sim > stdout 1`] = `"pass ─ try_catch.w (no tests)"`;

exports[`user-defined-resources-captures.w > wing test --target sim > stdout 1`] = `
"pass ─ user-defined-resources-captures.w » root/test:capture_array          
pass ─ user-defined-resources-captures.w » root/test:capture_array_of_queues
pass ─ user-defined-resources-captures.w » root/test:capture_map            
pass ─ user-defined-resources-captures.w » root/test:capture_primitives     
pass ─ user-defined-resources-captures.w » root/test:capture_resource       
pass ─ user-defined-resources-captures.w » root/test:capture_set            "
`;

exports[`while.w > wing test --target sim > stdout 1`] = `"pass ─ while.w (no tests)"`;

exports[`while_loop_await.w > wing test --target sim > stdout 1`] = `"pass ─ while_loop_await.w (no tests)"`;
