// Vitest Snapshot v1

exports[`wing compile --target tf-aws anon_function.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws anon_function.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"anon_function\\" });
  
  const myfunc = (x) => {
    {console.log(\`\${x}\`)};
    x = (x + 1);
    if ((x > 3.14)) {
      return;
    }
    (myfunc(x));
  };
  (myfunc(1));
  (((x) => {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === 1)'\`)})((x === 1))};
  })(1));
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws capture_containers.w > index.js 1`] = `
"async handle(s) { const { arr, arr_of_map, my_map, my_set } = this; {
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((await arr.at(0)) === \\"hello\\")'\`)})(((await arr.at(0)) === \\"hello\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((await arr.at(1)) === \\"world\\")'\`)})(((await arr.at(1)) === \\"world\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr.length === 2)'\`)})((arr.length === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(await my_set.has(\\"my\\"))'\`)})((await my_set.has(\\"my\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(my_set.size === 2)'\`)})((my_set.size === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(await my_map.has(\\"world\\"))'\`)})((await my_map.has(\\"world\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(my_map.size === 2)'\`)})((my_map.size === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(await (await arr_of_map.at(0)).has(\\"bang\\"))'\`)})((await (await arr_of_map.at(0)).has(\\"bang\\")))};
} };"
`;

exports[`wing compile --target tf-aws capture_containers.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_test_IamRole_6CDC2D16": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRole",
            "uniqueId": "root_test_IamRole_6CDC2D16",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_test_IamRolePolicy_474A6820": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRolePolicy",
            "uniqueId": "root_test_IamRolePolicy_474A6820",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_test_IamRolePolicyAttachment_1102A28A": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRolePolicyAttachment",
            "uniqueId": "root_test_IamRolePolicyAttachment_1102A28A",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.name}",
      },
    },
    "aws_lambda_function": {
      "root_test_AAE85061": {
        "//": {
          "metadata": {
            "path": "root/Default/test/Default",
            "uniqueId": "root_test_AAE85061",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "test-c8b6eece",
          },
        },
        "function_name": "test-c8b6eece",
        "handler": "index.handler",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_test_Code_2D131EC2.bucket}",
        "s3_key": "\${aws_s3_object.root_test_S3Object_A16CD789.key}",
        "timeout": 60,
      },
    },
    "aws_s3_bucket": {
      "root_test_Code_2D131EC2": {
        "//": {
          "metadata": {
            "path": "root/Default/test/Code",
            "uniqueId": "root_test_Code_2D131EC2",
          },
        },
        "bucket_prefix": "code-c883c33b-",
      },
    },
    "aws_s3_object": {
      "root_test_S3Object_A16CD789": {
        "//": {
          "metadata": {
            "path": "root/Default/test/S3Object",
            "uniqueId": "root_test_S3Object_A16CD789",
          },
        },
        "bucket": "\${aws_s3_bucket.root_test_Code_2D131EC2.bucket}",
        "key": "<ASSET_KEY>",
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws capture_containers.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"capture_containers\\" });
  
  const arr = Object.freeze([\\"hello\\", \\"world\\"]);
  const my_set = Object.freeze(new Set([\\"my\\", \\"my\\", \\"set\\"]));
  const my_map = Object.freeze(new Map([[ \\"hello\\", 123 ], [ \\"world\\", 999 ]]));
  const arr_of_map = Object.freeze([Object.freeze(new Map([[ \\"bang\\", 123 ]]))]);
  const handler = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.2342d82d8096c3cfa44f12187d5dd9fb250167dc7ea113fbdfa095b6a80902fa/index.js\\")),
    bindings: {
      
      data: {
        arr: arr,
        arr_of_map: arr_of_map,
        my_map: my_map,
        my_set: my_set,
      },
    }
  });
  new cloud.Function(this,\\"test\\",handler);
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws capture_primitives.w > index.js 1`] = `
"async handle(s) { const { my_bool, my_dur, my_num, my_second_bool, my_str } = this; {
  {console.log(my_str)};
  const n = my_num;
  {console.log(\`\${n}\`)};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(my_second_bool === false)'\`)})((my_second_bool === false))};
  if (my_bool) {
    {console.log(\\"bool=true\\")};
  } else {
    {console.log(\\"bool=false\\")};
  }
  const min = my_dur.minutes;
  const sec = my_dur.seconds;
  const hr = my_dur.hours;
  const split = (await \`min=\${min} sec=\${sec} hr=\${hr}\`.split(\\" \\"));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(split.length === 3)'\`)})((split.length === 3))};
} };"
`;

exports[`wing compile --target tf-aws capture_primitives.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_cloudFunction_IamRole_DAEC3578": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/IamRole",
            "uniqueId": "root_cloudFunction_IamRole_DAEC3578",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_cloudFunction_IamRolePolicy_AAE6C0C0": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/IamRolePolicy",
            "uniqueId": "root_cloudFunction_IamRolePolicy_AAE6C0C0",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/IamRolePolicyAttachment",
            "uniqueId": "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_lambda_function": {
      "root_cloudFunction_6A57BA0A": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/Default",
            "uniqueId": "root_cloudFunction_6A57BA0A",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "cloud-Function-c8d2eca1",
          },
        },
        "function_name": "cloud-Function-c8d2eca1",
        "handler": "index.handler",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "s3_key": "\${aws_s3_object.root_cloudFunction_S3Object_C8435368.key}",
        "timeout": 60,
      },
    },
    "aws_s3_bucket": {
      "root_cloudFunction_Code_2F6A7948": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/Code",
            "uniqueId": "root_cloudFunction_Code_2F6A7948",
          },
        },
        "bucket_prefix": "code-c8d4206f-",
      },
    },
    "aws_s3_object": {
      "root_cloudFunction_S3Object_C8435368": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/S3Object",
            "uniqueId": "root_cloudFunction_S3Object_C8435368",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "key": "<ASSET_KEY>",
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws capture_primitives.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"capture_primitives\\" });
  
  const my_str = \\"hello, string\\";
  const my_num = 1234;
  const my_bool = true;
  const my_second_bool = false;
  const my_dur = $stdlib.std.Duration.fromSeconds(600);
  const handler = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.275873c041545c7a2de55149fb73b77f5b75da61d16914ceadd71c3445173d97/index.js\\")),
    bindings: {
      
      data: {
        my_bool: my_bool,
        my_dur: my_dur,
        my_num: my_num,
        my_second_bool: my_second_bool,
        my_str: my_str,
      },
    }
  });
  new cloud.Function(this,\\"cloud.Function\\",handler);
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws container_types.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_s3_bucket": {
      "root_bucket1_3A77B9B4": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket1/Default",
            "uniqueId": "root_bucket1_3A77B9B4",
          },
        },
        "bucket_prefix": "bucket1-c81ed215-",
      },
      "root_bucket2_E39F70EE": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket2/Default",
            "uniqueId": "root_bucket2_E39F70EE",
          },
        },
        "bucket_prefix": "bucket2-c83a0be6-",
      },
      "root_bucket3_A0C568EA": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket3/Default",
            "uniqueId": "root_bucket3_A0C568EA",
          },
        },
        "bucket_prefix": "bucket3-c8b6c706-",
      },
    },
    "aws_s3_bucket_public_access_block": {
      "root_bucket1_PublicAccessBlock_6C5071C0": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket1/PublicAccessBlock",
            "uniqueId": "root_bucket1_PublicAccessBlock_6C5071C0",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_bucket1_3A77B9B4.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
      "root_bucket2_PublicAccessBlock_BC328E84": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket2/PublicAccessBlock",
            "uniqueId": "root_bucket2_PublicAccessBlock_BC328E84",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_bucket2_E39F70EE.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
      "root_bucket3_PublicAccessBlock_CF2593D4": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket3/PublicAccessBlock",
            "uniqueId": "root_bucket3_PublicAccessBlock_CF2593D4",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_bucket3_A0C568EA.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
    },
    "aws_s3_bucket_server_side_encryption_configuration": {
      "root_bucket1_Encryption_33CABC1A": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket1/Encryption",
            "uniqueId": "root_bucket1_Encryption_33CABC1A",
          },
        },
        "bucket": "\${aws_s3_bucket.root_bucket1_3A77B9B4.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
      "root_bucket2_Encryption_A83E82F9": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket2/Encryption",
            "uniqueId": "root_bucket2_Encryption_A83E82F9",
          },
        },
        "bucket": "\${aws_s3_bucket.root_bucket2_E39F70EE.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
      "root_bucket3_Encryption_A2A51E22": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket3/Encryption",
            "uniqueId": "root_bucket3_Encryption_A2A51E22",
          },
        },
        "bucket": "\${aws_s3_bucket.root_bucket3_A0C568EA.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws container_types.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"container_types\\" });
  
  const bucket1 = new cloud.Bucket(this,\\"bucket1\\");
  const bucket2 = new cloud.Bucket(this,\\"bucket2\\");
  const bucket3 = new cloud.Bucket(this,\\"bucket3\\");
  const empty_array = Object.freeze([]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(empty_array.length === 0)'\`)})((empty_array.length === 0))};
  const empty_array2 = [];
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(empty_array2.length === 0)'\`)})((empty_array2.length === 0))};
  const arr1 = Object.freeze([1, 2, 3]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr1.length === 3)'\`)})((arr1.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr1.at(1)) === 2)'\`)})(((arr1.at(1)) === 2))};
  const arr2 = Object.freeze([\\"1\\", \\"2\\", \\"3\\"]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr2.length === 3)'\`)})((arr2.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr2.at(1)) === \\"2\\")'\`)})(((arr2.at(1)) === \\"2\\"))};
  const arr3 = Object.freeze([1, 2, 3]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr3.length === 3)'\`)})((arr3.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr3.at(1)) === 2)'\`)})(((arr3.at(1)) === 2))};
  const arr4 = Object.freeze([1, 2, 3]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr4.length === 3)'\`)})((arr4.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr4.at(1)) === 2)'\`)})(((arr4.at(1)) === 2))};
  const arr5 = Object.freeze([bucket1, bucket2, bucket3]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr5.length === 3)'\`)})((arr5.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr5.at(1)) === bucket2)'\`)})(((arr5.at(1)) === bucket2))};
  const arr6 = Object.freeze([bucket1, bucket2, bucket3]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr6.length === 3)'\`)})((arr6.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr6.at(1)) === bucket2)'\`)})(((arr6.at(1)) === bucket2))};
  const arr7 = arr4;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr7.length === 3)'\`)})((arr7.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr7.at(1)) === 2)'\`)})(((arr7.at(1)) === 2))};
  const empty_map = Object.freeze(new Map([]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(empty_map.size === 0)'\`)})((empty_map.size === 0))};
  const empty_map2 = Object.freeze(new Map([]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(empty_map2.size === 0)'\`)})((empty_map2.size === 0))};
  const m1 = Object.freeze(new Map([[ \\"a\\", 1 ], [ \\"b\\", 2 ], [ \\"c\\", 3 ]]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m1.size === 3)'\`)})((m1.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m1.get(\\"b\\")) === 2)'\`)})(((m1.get(\\"b\\")) === 2))};
  const m2 = Object.freeze(new Map([[ \\"a\\", 1 ], [ \\"b\\", 2 ], [ \\"c\\", 3 ]]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m2.size === 3)'\`)})((m2.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m2.get(\\"b\\")) === 2)'\`)})(((m2.get(\\"b\\")) === 2))};
  const m3 = Object.freeze(new Map([[ \\"a\\", 1 ], [ \\"b\\", 2 ], [ \\"c\\", 3 ]]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m3.size === 3)'\`)})((m3.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m3.get(\\"b\\")) === 2)'\`)})(((m3.get(\\"b\\")) === 2))};
  const m4 = Object.freeze(new Map([[ \\"a\\", 1 ], [ \\"b\\", 2 ], [ \\"c\\", 3 ]]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m4.size === 3)'\`)})((m4.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m4.get(\\"b\\")) === 2)'\`)})(((m4.get(\\"b\\")) === 2))};
  const m5 = Object.freeze(new Map([[ \\"a\\", bucket1 ], [ \\"b\\", bucket2 ], [ \\"c\\", bucket3 ]]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m5.size === 3)'\`)})((m5.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m5.get(\\"b\\")) === bucket2)'\`)})(((m5.get(\\"b\\")) === bucket2))};
  const m6 = Object.freeze(new Map([[ \\"a\\", bucket1 ], [ \\"b\\", bucket2 ], [ \\"c\\", bucket3 ]]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m6.size === 3)'\`)})((m6.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m6.get(\\"b\\")) === bucket2)'\`)})(((m6.get(\\"b\\")) === bucket2))};
  const m7 = m1;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m7.size === 3)'\`)})((m7.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m7.get(\\"b\\")) === 2)'\`)})(((m7.get(\\"b\\")) === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m7.has(\\"b\\"))'\`)})((m7.has(\\"b\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m4.has(\\"boom\\")) === false)'\`)})(((m4.has(\\"boom\\")) === false))};
  const empty_set = Object.freeze(new Set([]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(empty_set.size === 0)'\`)})((empty_set.size === 0))};
  const empty_set2 = new Set([]);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(empty_set2.size === 0)'\`)})((empty_set2.size === 0))};
  const s2 = Object.freeze(new Set([1, 2, 3]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s2.size === 3)'\`)})((s2.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s2.has(1))'\`)})((s2.has(1)))};
  const s3 = Object.freeze(new Set([1, 2, 3]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s3.size === 3)'\`)})((s3.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s3.has(1))'\`)})((s3.has(1)))};
  const s4 = Object.freeze(new Set([1, 2, 3]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s4.size === 3)'\`)})((s4.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s4.has(1))'\`)})((s4.has(1)))};
  const s6 = Object.freeze(new Set([bucket1, bucket2, bucket3]));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s6.size === 3)'\`)})((s6.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s6.has(bucket2))'\`)})((s6.has(bucket2)))};
  const s7 = s2;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s7.size === 3)'\`)})((s7.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s7.has(1))'\`)})((s7.has(1)))};
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws enums.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws enums.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"enums\\" });
  
  const SomeEnum = Object.freeze((function (SomeEnum) {
    SomeEnum[SomeEnum[\\"ONE\\"] = 0] = \\"ONE\\";
    SomeEnum[SomeEnum[\\"TWO\\"] = 1] = \\"TWO\\";
    SomeEnum[SomeEnum[\\"THREE\\"] = 2] = \\"THREE\\";
    return SomeEnum;
  })({}));
  const one = SomeEnum.ONE;
  const two = SomeEnum.TWO;
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws expressions_binary_operators.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws expressions_binary_operators.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"expressions_binary_operators\\" });
  
  const x = (-1);
  const y = (2 * x);
  const z = ((x + y) - 1);
  const xyz = (((y * y) / (x * x)) * z);
  const xf = 1;
  const yf = ((-20.22) * xf);
  const zf = ((xf + yf) - (-0.01));
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws expressions_string_interpolation.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws expressions_string_interpolation.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"expressions_string_interpolation\\" });
  
  const regular_string = \\"str\\\\n\\\\\\"\\";
  const empty_string = \\"\\";
  const number = 1;
  const cool_string = \`cool \\\\\\"\\\\\${\${regular_string}}\\\\\\" test\`;
  const really_cool_string = \`\${number}\${empty_string}\\\\n\${cool_string}\\\\n\\\\\${empty_string}\${\\"string-in-string\\"}!\`;
  const begining_with_cool_strings = \`\${regular_string} \${number} <- cool\`;
  const ending_with_cool_strings = \`cool -> \${regular_string} \${number}\`;
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws for_loop.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws for_loop.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"for_loop\\" });
  
  const words = Object.freeze([\\"wing\\", \\"lang\\", \\"dang\\"]);
  const unique_numbers = Object.freeze(new Set([1, 2, 3]));
  for (const word of words) {
    for (const number of unique_numbers) {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: '(number > 0)'\`)})((number > 0))};
      {console.log(\`\${word}: \${number}\`)};
    }
  }
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws forward_decl.w > R.inflight.js 1`] = `
"export class R_inflight  {
constructor({  }) {


}
}"
`;

exports[`wing compile --target tf-aws forward_decl.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws forward_decl.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"forward_decl\\" });
  
  class R extends $stdlib.core.Resource {
  constructor(scope, id, ) {
  	super(scope, id);
  {
  }
  }
  method2 = () => {
    (this.method1());
    {console.log(\`\${this.f}\`)};
    (this.method2());
  }
  method1 = () => {
  }
  _toInflight() {
  	
  	const self_client_path = require('path').resolve(__dirname, \\"clients/R.inflight.js\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).R_inflight({}))\`);
  }
  }
  
  const x = \\"hi\\";
  if (true) {
    {console.log(\`\${x}\`)};
    const y = new R(this,\\"R\\");
  }
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws identical_inflights.w > index.js 1`] = `
"async handle() { const {  } = this; {
} };"
`;

exports[`wing compile --target tf-aws identical_inflights.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws identical_inflights.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"identical_inflights\\" });
  
  const x = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.8eb95bcbc154530931e15fc418c8b1fe991095671409552099ea1aa596999ede/index.js\\")),
    bindings: {
      
      
    }
  });
  const y = new $stdlib.core.Inflight(this, \\"$Inflight2\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.8eb95bcbc154530931e15fc418c8b1fe991095671409552099ea1aa596999ede/index.js\\")),
    bindings: {
      
      
    }
  });
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws mut_container_types.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_s3_bucket": {
      "root_bucket1_3A77B9B4": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket1/Default",
            "uniqueId": "root_bucket1_3A77B9B4",
          },
        },
        "bucket_prefix": "bucket1-c81ed215-",
      },
      "root_bucket2_E39F70EE": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket2/Default",
            "uniqueId": "root_bucket2_E39F70EE",
          },
        },
        "bucket_prefix": "bucket2-c83a0be6-",
      },
      "root_bucket3_A0C568EA": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket3/Default",
            "uniqueId": "root_bucket3_A0C568EA",
          },
        },
        "bucket_prefix": "bucket3-c8b6c706-",
      },
    },
    "aws_s3_bucket_public_access_block": {
      "root_bucket1_PublicAccessBlock_6C5071C0": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket1/PublicAccessBlock",
            "uniqueId": "root_bucket1_PublicAccessBlock_6C5071C0",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_bucket1_3A77B9B4.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
      "root_bucket2_PublicAccessBlock_BC328E84": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket2/PublicAccessBlock",
            "uniqueId": "root_bucket2_PublicAccessBlock_BC328E84",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_bucket2_E39F70EE.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
      "root_bucket3_PublicAccessBlock_CF2593D4": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket3/PublicAccessBlock",
            "uniqueId": "root_bucket3_PublicAccessBlock_CF2593D4",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_bucket3_A0C568EA.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
    },
    "aws_s3_bucket_server_side_encryption_configuration": {
      "root_bucket1_Encryption_33CABC1A": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket1/Encryption",
            "uniqueId": "root_bucket1_Encryption_33CABC1A",
          },
        },
        "bucket": "\${aws_s3_bucket.root_bucket1_3A77B9B4.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
      "root_bucket2_Encryption_A83E82F9": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket2/Encryption",
            "uniqueId": "root_bucket2_Encryption_A83E82F9",
          },
        },
        "bucket": "\${aws_s3_bucket.root_bucket2_E39F70EE.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
      "root_bucket3_Encryption_A2A51E22": {
        "//": {
          "metadata": {
            "path": "root/Default/bucket3/Encryption",
            "uniqueId": "root_bucket3_Encryption_A2A51E22",
          },
        },
        "bucket": "\${aws_s3_bucket.root_bucket3_A0C568EA.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws mut_container_types.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"mut_container_types\\" });
  
  const bucket1 = new cloud.Bucket(this,\\"bucket1\\");
  const bucket2 = new cloud.Bucket(this,\\"bucket2\\");
  const bucket3 = new cloud.Bucket(this,\\"bucket3\\");
  const arr1 = [\\"a\\", \\"b\\", \\"c\\"];
  const arr2 = [1, 2, 3];
  const arr3 = [bucket1, bucket2];
  const arr4 = arr1;
  (arr1.push(\\"a\\"));
  (arr2.push(4));
  (arr3.push(bucket3));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr2.pop()) === 4)'\`)})(((arr2.pop()) === 4))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(arr1.length === 4)'\`)})((arr1.length === 4))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((arr4.at(0)) === \\"a\\")'\`)})(((arr4.at(0)) === \\"a\\"))};
  const s1 = new Set([1, 2, 3, 3]);
  const s2 = new Set([\\"hello\\", \\"world\\", \\"hello\\"]);
  const s3 = new Set([bucket1, bucket2, bucket2]);
  (s1.add(5));
  (s2.add(\\"bye\\"));
  (s3.add(bucket3));
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s2.has(\\"bye\\"))'\`)})((s2.has(\\"bye\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s2.has(\\"hello\\"))'\`)})((s2.has(\\"hello\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s3.has(bucket2))'\`)})((s3.has(bucket2)))};
  const m1 = Object.freeze(new Map([[ \\"hello\\", \\"world\\" ]]));
  const m2 = Object.freeze(new Map([[ \\"hello\\", 123 ]]));
  const m3 = Object.freeze(new Map([[ \\"b1\\", bucket1 ], [ \\"b2\\", bucket2 ]]));
  const m4 = m1;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m1.has(\\"hello\\"))'\`)})((m1.has(\\"hello\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m2.size === 1)'\`)})((m2.size === 1))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((m3.get(\\"b1\\")) === bucket1)'\`)})(((m3.get(\\"b1\\")) === bucket1))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(m4.size === 1)'\`)})((m4.size === 1))};
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws primitive_methods.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws primitive_methods.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"primitive_methods\\" });
  
  const dur = $stdlib.std.Duration.fromSeconds(60);
  const stringy = \`\${dur.minutes}:\${dur.seconds}\`;
  {console.log(stringy)};
  if ((stringy.includes(\\"60\\") && (((stringy.split(\\":\\")).at(0)) === \\"60\\"))) {
    {console.log(\`\${stringy.length}!\`)};
  }
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws print.w > index.js 1`] = `
"async handle(event) { const {  } = this; {
  {console.log(event)};
} };"
`;

exports[`wing compile --target tf-aws print.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_cloudFunction_IamRole_DAEC3578": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/IamRole",
            "uniqueId": "root_cloudFunction_IamRole_DAEC3578",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_cloudFunction_IamRolePolicy_AAE6C0C0": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/IamRolePolicy",
            "uniqueId": "root_cloudFunction_IamRolePolicy_AAE6C0C0",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/IamRolePolicyAttachment",
            "uniqueId": "root_cloudFunction_IamRolePolicyAttachment_FC3D9E7C",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.name}",
      },
    },
    "aws_lambda_function": {
      "root_cloudFunction_6A57BA0A": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/Default",
            "uniqueId": "root_cloudFunction_6A57BA0A",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "cloud-Function-c8d2eca1",
          },
        },
        "function_name": "cloud-Function-c8d2eca1",
        "handler": "index.handler",
        "role": "\${aws_iam_role.root_cloudFunction_IamRole_DAEC3578.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "s3_key": "\${aws_s3_object.root_cloudFunction_S3Object_C8435368.key}",
        "timeout": 60,
      },
    },
    "aws_s3_bucket": {
      "root_cloudBucket_4F3C4F53": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Bucket/Default",
            "uniqueId": "root_cloudBucket_4F3C4F53",
          },
        },
        "bucket_prefix": "cloud-bucket-c87175e7-",
      },
      "root_cloudFunction_Code_2F6A7948": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/Code",
            "uniqueId": "root_cloudFunction_Code_2F6A7948",
          },
        },
        "bucket_prefix": "code-c8d4206f-",
      },
    },
    "aws_s3_bucket_public_access_block": {
      "root_cloudBucket_PublicAccessBlock_319C1C2E": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Bucket/PublicAccessBlock",
            "uniqueId": "root_cloudBucket_PublicAccessBlock_319C1C2E",
          },
        },
        "block_public_acls": true,
        "block_public_policy": true,
        "bucket": "\${aws_s3_bucket.root_cloudBucket_4F3C4F53.bucket}",
        "ignore_public_acls": true,
        "restrict_public_buckets": true,
      },
    },
    "aws_s3_bucket_server_side_encryption_configuration": {
      "root_cloudBucket_Encryption_8ED0CD9C": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Bucket/Encryption",
            "uniqueId": "root_cloudBucket_Encryption_8ED0CD9C",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudBucket_4F3C4F53.bucket}",
        "rule": [
          {
            "apply_server_side_encryption_by_default": {
              "sse_algorithm": "AES256",
            },
          },
        ],
      },
    },
    "aws_s3_object": {
      "root_cloudFunction_S3Object_C8435368": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Function/S3Object",
            "uniqueId": "root_cloudFunction_S3Object_C8435368",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudFunction_Code_2F6A7948.bucket}",
        "key": "<ASSET_KEY>",
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws print.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"print\\" });
  
  const bucket1 = new cloud.Bucket(this,\\"cloud.Bucket\\");
  {console.log(\\"Hello world!\\")};
  new cloud.Function(this,\\"cloud.Function\\",new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.eeb10908f35dd17ca239f77c5c30ce7a1bd0464d804a789596c23a5b437a72f2/index.js\\")),
    bindings: {
      
      
    }
  }));
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws reassignment.w > R.inflight.js 1`] = `
"export class R_inflight  {
constructor({  }) {


}
}"
`;

exports[`wing compile --target tf-aws reassignment.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws reassignment.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"reassignment\\" });
  
  class R extends $stdlib.core.Resource {
  constructor(scope, id, ) {
  	super(scope, id);
  {
    if (true) {
      this.f = 1;
      this.f1 = 0;
    }
  }
  }
  inc = () => {
    this.f = (this.f + 1);
  }
  _toInflight() {
  	
  	const self_client_path = require('path').resolve(__dirname, \\"clients/R.inflight.js\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).R_inflight({}))\`);
  }
  }
  
  let x = 5;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === 5)'\`)})((x === 5))};
  x = (x + 1);
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(x === 6)'\`)})((x === 6))};
  const r = new R(this,\\"R\\");
  (r.inc());
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(r.f === 2)'\`)})((r.f === 2))};
  const f = (arg) => {
    arg = 0;
    return arg;
  };
  const y = 1;
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((f(y)) === 0)'\`)})(((f(y)) === 0))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(y === 1)'\`)})((y === 1))};
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws resource.w > R.inflight.js 1`] = `
"export class R_inflight  {
constructor({  }) {


}
}"
`;

exports[`wing compile --target tf-aws resource.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws resource.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"resource\\" });
  
  class R extends $stdlib.core.Resource {
  constructor(scope, id, name) {
  	super(scope, id);
  {
    this.name = name;
  }
  }
  
  _toInflight() {
  	
  	const self_client_path = require('path').resolve(__dirname, \\"clients/R.inflight.js\\");
  	return $stdlib.core.NodeJsCode.fromInline(\`(new (require(\\"\${self_client_path}\\")).R_inflight({}))\`);
  }
  }
  
  const res = new R(this,\\"R\\",\\"Arr\\");
  {console.log(res.name)};
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws statements_if.w > index.js 1`] = `
"async handle(s) { const {  } = this; {
  if (true) {
    const x = 2;
    if ((true && ((x + 2) === 4))) {
      if ((true && ((x + 3) === 4))) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
      } else if ((true && ((x + 3) === 6))) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
      } else if ((false || ((x + 3) === 5))) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'true'\`)})(true)};
      } else {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
      }
    } else {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
    }
  }
} };"
`;

exports[`wing compile --target tf-aws statements_if.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_test_IamRole_6CDC2D16": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRole",
            "uniqueId": "root_test_IamRole_6CDC2D16",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_test_IamRolePolicy_474A6820": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRolePolicy",
            "uniqueId": "root_test_IamRolePolicy_474A6820",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":\\"none:null\\",\\"Resource\\":\\"*\\"}]}",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_test_IamRolePolicyAttachment_1102A28A": {
        "//": {
          "metadata": {
            "path": "root/Default/test/IamRolePolicyAttachment",
            "uniqueId": "root_test_IamRolePolicyAttachment_1102A28A",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.name}",
      },
    },
    "aws_lambda_function": {
      "root_test_AAE85061": {
        "//": {
          "metadata": {
            "path": "root/Default/test/Default",
            "uniqueId": "root_test_AAE85061",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "test-c8b6eece",
          },
        },
        "function_name": "test-c8b6eece",
        "handler": "index.handler",
        "role": "\${aws_iam_role.root_test_IamRole_6CDC2D16.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_test_Code_2D131EC2.bucket}",
        "s3_key": "\${aws_s3_object.root_test_S3Object_A16CD789.key}",
        "timeout": 60,
      },
    },
    "aws_s3_bucket": {
      "root_test_Code_2D131EC2": {
        "//": {
          "metadata": {
            "path": "root/Default/test/Code",
            "uniqueId": "root_test_Code_2D131EC2",
          },
        },
        "bucket_prefix": "code-c883c33b-",
      },
    },
    "aws_s3_object": {
      "root_test_S3Object_A16CD789": {
        "//": {
          "metadata": {
            "path": "root/Default/test/S3Object",
            "uniqueId": "root_test_S3Object_A16CD789",
          },
        },
        "bucket": "\${aws_s3_bucket.root_test_Code_2D131EC2.bucket}",
        "key": "<ASSET_KEY>",
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws statements_if.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"statements_if\\" });
  
  if (true) {
    const x = 2;
    const f = false;
    if ((true && ((x + 2) === 4))) {
      if ((true && ((x + 3) === 4))) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
      } else if ((true && ((x + 3) === 6))) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
      } else if ((false || ((x + 3) === 5))) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'true'\`)})(true)};
      } else if ((!f)) {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: '(!(!(!f)))'\`)})((!(!(!f))))};
      } else {
        {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
      }
    } else {
      {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
    }
  }
  new cloud.Function(this,\\"test\\",new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.09c5e24751d9ba1246f91518f2f7f5c5d1102a09d0b1acff479ae27ad134090f/index.js\\")),
    bindings: {
      
      
    }
  }));
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws statements_variable_declarations.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws statements_variable_declarations.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"statements_variable_declarations\\" });
  
  const x = 2;
  const y = x;
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws std_containers.w > index.js 1`] = `
"async handle(body) { const { immut_array, immut_map, immut_set, s, s_array, s_map, s_set } = this; {
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s === \\"two\\")'\`)})((s === \\"two\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((await s_array.at(1)) === \\"two\\")'\`)})(((await s_array.at(1)) === \\"two\\"))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s_array.length === 2)'\`)})((s_array.length === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(immut_array.length === 3)'\`)})((immut_array.length === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(await s_set.has(\\"one\\"))'\`)})((await s_set.has(\\"one\\")))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s_set.size === 2)'\`)})((s_set.size === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(immut_set.size === 3)'\`)})((immut_set.size === 3))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '((await s_map.get(\\"one\\")) === 1)'\`)})(((await s_map.get(\\"one\\")) === 1))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(s_map.size === 2)'\`)})((s_map.size === 2))};
  {((cond) => {if (!cond) throw new Error(\`assertion failed: '(immut_map.size === 3)'\`)})((immut_map.size === 3))};
} };"
`;

exports[`wing compile --target tf-aws std_containers.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws std_containers.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"std_containers\\" });
  
  const s_array = Object.freeze([\\"one\\", \\"two\\"]);
  const mut_array = [...(s_array)];
  (mut_array.push(\\"three\\"));
  const immut_array = Object.freeze([...(mut_array)]);
  const s_set = Object.freeze(new Set([\\"one\\", \\"two\\"]));
  const mut_set = new Set(s_set);
  (mut_set.add(\\"three\\"));
  const immut_set = Object.freeze(new Set(mut_set));
  const s_map = Object.freeze(new Map([[ \\"one\\", 1 ], [ \\"two\\", 2 ]]));
  const mut_map = new Map(s_map);
  (mut_map.set(\\"five\\",5));
  const immut_map = Object.freeze(new Map(mut_map));
  const s = (s_array.at(1));
  const handler = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.2bccfc7c5a6cf0ff8a0697876fd0e9b788b71a4288792fab940ebf8241e8689b/index.js\\")),
    bindings: {
      
      data: {
        immut_array: immut_array,
        immut_map: immut_map,
        immut_set: immut_set,
        s: s,
        s_array: s_array,
        s_map: s_map,
        s_set: s_set,
      },
    }
  });
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws while.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile --target tf-aws while.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"while\\" });
  
  while (false) {
    const x = 1;
  }
  const y = 123;
  while ((y < 0)) {
    const x = 1;
  }
}
}
new MyApp().synth();"
`;

exports[`wing compile --target tf-aws while_loop_await.w > index.js 1`] = `
"async handle(j) { const {  } = this; {
  return (j + 1);
} };"
`;

exports[`wing compile --target tf-aws while_loop_await.w > index.js 2`] = `
"async handle(body) { const {  } = this; {
  const i = 0;
  while (((await iterator(i)) < 3)) {
    {console.log(\`\${i}\`)};
  }
} };"
`;

exports[`wing compile --target tf-aws while_loop_await.w > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
  "resource": {
    "aws_iam_role": {
      "root_cloudQueueOnMessageb3f3d188_IamRole_2EDE9980": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue-OnMessage-b3f3d188/IamRole",
            "uniqueId": "root_cloudQueueOnMessageb3f3d188_IamRole_2EDE9980",
          },
        },
        "assume_role_policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Principal\\":{\\"Service\\":\\"lambda.amazonaws.com\\"},\\"Effect\\":\\"Allow\\"}]}",
      },
    },
    "aws_iam_role_policy": {
      "root_cloudQueueOnMessageb3f3d188_IamRolePolicy_F06A54DE": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue-OnMessage-b3f3d188/IamRolePolicy",
            "uniqueId": "root_cloudQueueOnMessageb3f3d188_IamRolePolicy_F06A54DE",
          },
        },
        "policy": "{\\"Version\\":\\"2012-10-17\\",\\"Statement\\":[{\\"Action\\":[\\"sqs:ReceiveMessage\\",\\"sqs:ChangeMessageVisibility\\",\\"sqs:GetQueueUrl\\",\\"sqs:DeleteMessage\\",\\"sqs:GetQueueAttributes\\"],\\"Resource\\":\\"\${aws_sqs_queue.root_cloudQueue_E3597F7A.arn}\\",\\"Effect\\":\\"Allow\\"}]}",
        "role": "\${aws_iam_role.root_cloudQueueOnMessageb3f3d188_IamRole_2EDE9980.name}",
      },
    },
    "aws_iam_role_policy_attachment": {
      "root_cloudQueueOnMessageb3f3d188_IamRolePolicyAttachment_6D0B5E93": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue-OnMessage-b3f3d188/IamRolePolicyAttachment",
            "uniqueId": "root_cloudQueueOnMessageb3f3d188_IamRolePolicyAttachment_6D0B5E93",
          },
        },
        "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        "role": "\${aws_iam_role.root_cloudQueueOnMessageb3f3d188_IamRole_2EDE9980.name}",
      },
    },
    "aws_lambda_event_source_mapping": {
      "root_cloudQueue_EventSourceMapping_A2041279": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue/EventSourceMapping",
            "uniqueId": "root_cloudQueue_EventSourceMapping_A2041279",
          },
        },
        "batch_size": 1,
        "event_source_arn": "\${aws_sqs_queue.root_cloudQueue_E3597F7A.arn}",
        "function_name": "\${aws_lambda_function.root_cloudQueueOnMessageb3f3d188_29346340.function_name}",
      },
    },
    "aws_lambda_function": {
      "root_cloudQueueOnMessageb3f3d188_29346340": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue-OnMessage-b3f3d188/Default",
            "uniqueId": "root_cloudQueueOnMessageb3f3d188_29346340",
          },
        },
        "environment": {
          "variables": {
            "WING_FUNCTION_NAME": "cloud-Queue-OnMessage-b3f3d188-c87e2d03",
          },
        },
        "function_name": "cloud-Queue-OnMessage-b3f3d188-c87e2d03",
        "handler": "index.handler",
        "role": "\${aws_iam_role.root_cloudQueueOnMessageb3f3d188_IamRole_2EDE9980.arn}",
        "runtime": "nodejs16.x",
        "s3_bucket": "\${aws_s3_bucket.root_cloudQueueOnMessageb3f3d188_Code_4D451A84.bucket}",
        "s3_key": "\${aws_s3_object.root_cloudQueueOnMessageb3f3d188_S3Object_18BDF7F0.key}",
        "timeout": 60,
      },
    },
    "aws_s3_bucket": {
      "root_cloudQueueOnMessageb3f3d188_Code_4D451A84": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue-OnMessage-b3f3d188/Code",
            "uniqueId": "root_cloudQueueOnMessageb3f3d188_Code_4D451A84",
          },
        },
        "bucket_prefix": "code-c8b6a338-",
      },
    },
    "aws_s3_object": {
      "root_cloudQueueOnMessageb3f3d188_S3Object_18BDF7F0": {
        "//": {
          "metadata": {
            "path": "root/Default/cloud.Queue-OnMessage-b3f3d188/S3Object",
            "uniqueId": "root_cloudQueueOnMessageb3f3d188_S3Object_18BDF7F0",
          },
        },
        "bucket": "\${aws_s3_bucket.root_cloudQueueOnMessageb3f3d188_Code_4D451A84.bucket}",
        "key": "<ASSET_KEY>",
      },
    },
  },
}
`;

exports[`wing compile --target tf-aws while_loop_await.w > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

const cloud = require('@winglang/sdk').cloud;
class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"while_loop_await\\" });
  
  const queue = new cloud.Queue(this,\\"cloud.Queue\\");
  const iterator = new $stdlib.core.Inflight(this, \\"$Inflight1\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.82d0059fdbaebaab6d1be68f497052f9d5b8662f4333952a6e9ad55f564e0c97/index.js\\")),
    bindings: {
      
      
    }
  });
  const handler = new $stdlib.core.Inflight(this, \\"$Inflight2\\", {
    code: $stdlib.core.NodeJsCode.fromFile(require('path').resolve(__dirname, \\"proc.f259e8d1edc5d47946ec1a1f3aa23e59fe550255ec12b899cffb307ecf525df6/index.js\\")),
    bindings: {
      
      
    }
  });
  (queue.onMessage(handler));
}
}
new MyApp().synth();"
`;
