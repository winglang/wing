====================
Unary expression
====================

+1;

---

(source
    (expression_statement
        (unary_expression
            arg: (number)
        )
    )
)

====================
Binary expressions
====================

5 * 1;
(5+1) % 1;
5+1 % 1;
5 % 1 + 1;

---

(source
    (expression_statement
        (binary_expression
            left: (number)
            right: (number)
        )
    )
    (expression_statement
        (binary_expression
            left: (parenthesized_expression
                (binary_expression
                    left: (number)
                    right: (number)
                )
            )
            right: (number)
        )
    )
    (expression_statement
        (binary_expression
            left: (number)
            right: (binary_expression
                left: (number)
                right: (number)
            )
        )
    )
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (number)
                right: (number)
            )
            right: (number)
        )
    )
)

====================
Function call
====================

hello(1,a);

---

(source
    (expression_statement
        (function_call
            call_name: (reference (identifier))
            args: (argument_list
                (positional_argument
                    (number)
                )
                (positional_argument
                    (reference (identifier))
                )
            )
        )
    )
)

====================
Method call
====================

obj.method();

---

(source
    (expression_statement
        (method_call
          call_name: (nested_identifier
            object: (reference (identifier))
            property: (identifier)
          )
          args: (argument_list)
        )
    )
)

====================
New expression
====================

new A();

---

(source
    (expression_statement
        (new_expression
            class: (reference (identifier))
            args: (argument_list)
        )
    )
)

================================
New expression with id and scope
================================

new A() as "b" in c;

---

(source
    (expression_statement
        (new_expression
            class: (reference (identifier))
            args: (argument_list)
            id: (new_object_id (string))
            scope: (new_object_scope (reference (identifier)))
        )
    )
)

================================
preflight anonymous closure
================================

(a: number) -> { return a; };

---

(source
    (expression_statement
        (preflight_closure
            (parameter_list
                (parameter_definition
                    (identifier)
                    (builtin_type)
                )
            )
            (block
                (return_statement
                    (reference
                        (identifier)
                    )
                )
            )
        )
    )
)

================================
inflight anonymous closure
================================

() ~> { return 1; };

---

(source
    (expression_statement
        (inflight_closure
            (parameter_list)
            (block
                (return_statement
                    (number)
                )
            )
        )
    )
)
