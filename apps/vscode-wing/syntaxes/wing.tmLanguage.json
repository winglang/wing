{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Wing",
  "scopeName": "source.wing",
  "patterns": [
    {
      "include": "#template-string"
    },
    {
      "include": "#non-interpolated-string"
    },
    {
      "include": "#object-keys"
    },
    {
      "include": "#members"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#type-primitive"
    },
    {
      "include": "#statement"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "non-interpolated-string": {
      "name": "string.quoted.double.wing",
      "begin": "#\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "template-string": {
      "name": "string.quoted.double.wing",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#template-element"
        },
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.wing",
      "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "template-element": {
      "patterns": [
        {
          "name": "meta.template.expression.wing",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.wing"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.wing"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#template-string"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#statement"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#identifiers"
            }
          ]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.wing",
          "match": "//.*"
        },
        {
          "name": "comment.block.wing",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.wing",
          "match": "\\b(else|elif|if|return|throw|try|catch|finally|bring|as)\\b"
        },
        {
          "name": "keyword.control.loop.wing",
          "match": "\\b(for|in|break|while|continue)\\b"
        },
        {
          "name": "keyword.operator.new.wing",
          "match": "\\b(new)\\b"
        },
        {
          "name": "storage.modifier.wing",
          "match": "\\b(inflight|preflight|var|let|pub|protected|internal|static|extends|impl|extern)\\b"
        },
        {
          "name": "storage.type.wing",
          "match": "\\b(class|struct|enum|interface|test)\\b"
        },
        {
          "name": "support.function.wing",
          "match": "\\b(log|assert|throw|panic)\\b"
        }
      ]
    },
    "type-primitive": {
      "patterns": [
        {
          "name": "support.type.wing",
          "match": "\\b(void|any)\\b"
        },
        {
          "name": "support.class.wing",
          "match": "\\b(void|str|num|bool|any|duration|Map|Set|MutMap|MutSet|Array|MutArray|Promise|Json|MutJson)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.wing",
          "match": "(-?[0-9][0-9_]*(\\.[0-9][0-9_]*)?(s|ms|h|m)?\\b)"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.this.wing",
          "match": "\\b(this)\\b"
        },
        {
          "name": "constant.language.boolean.wing",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.wing",
          "match": "\\b(nil)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.wing",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "members": {
      "patterns": [
        {
          "match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.wing"
            }
          }
        }
      ]
    },
    "object-keys": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
          "captures": {
            "1": {
              "name": "variable.wing"
            }
          }
        }
      ]
    }
  }
}
