diff --git a/lib/assembler.js b/lib/assembler.js
index a8ae750fa6ec83cd56b84848bcd3cfdd4c297de1..c620930d412b6c87c8f38dcf0cd5f6ce17189d70 100644
--- a/lib/assembler.js
+++ b/lib/assembler.js
@@ -1575,7 +1575,12 @@ class Assembler {
             return { type: spec.CANONICAL_ANY };
         }
         if (type.symbol.name === 'Array') {
-            return { type: _arrayType.call(this) };
+            // "Array" only refers to the real JS array type if it has a type parameter
+            // this is a hack so we can export classes named Array
+            const typeRef = type;
+            if (typeRef.typeArguments && typeRef.typeArguments.length === 1) {
+                return { type: _arrayType.call(this) };
+            }
         }
         if (type.symbol.name === '__type' && type.symbol.members) {
             return { type: _mapType.call(this) };
@@ -1586,9 +1591,9 @@ class Assembler {
                 this._diagnostics.push(jsii_diagnostic_1.JsiiDiagnostic.JSII_1002_UNSPECIFIED_PROMISE.create(declaration));
                 return { type: spec.CANONICAL_ANY };
             }
-            return {
-                type: this._typeReference(typeRef.typeArguments[0], declaration, purpose),
-            };
+            // (hacky) allow optionals to be returned from async methods
+            // see https://github.com/aws/jsii/issues/4035
+            return this._optionalValue(typeRef.typeArguments[0], declaration, purpose);
         }
         const fqn = this._getFQN(type, declaration, purpose, isThisType);
         if (fqn == null) {
diff --git a/lib/tsconfig/compiler-options.js b/lib/tsconfig/compiler-options.js
index e7ac0ec99906448c609beff54dc868bf41c2da82..fab0114ba5ae57f71ca987d08b19eb176d3e9b7d 100644
--- a/lib/tsconfig/compiler-options.js
+++ b/lib/tsconfig/compiler-options.js
@@ -15,8 +15,9 @@ exports.BASE_COMPILER_OPTIONS = {
     declaration: true,
     experimentalDecorators: true,
     incremental: true,
-    lib: ['lib.es2020.d.ts'],
+    lib: ['lib.es2020.d.ts', 'lib.dom.d.ts'],
     module: ts.ModuleKind.CommonJS,
+    esModuleInterop: true,
     noEmitOnError: true,
     noFallthroughCasesInSwitch: true,
     noImplicitAny: true,
